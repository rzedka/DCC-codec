
bin\Debug\ArdNano_DCC_project_v4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000b72  00000c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b72  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000069  00800144  00800144  00000c6a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000c6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000c0  00000000  00000000  00000c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002e2  00000000  00000000  00000d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000904  00000000  00000000  0000100f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000042e  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b04  00000000  00000000  00001d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000364  00000000  00000000  00002a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 3a       	cpi	r26, 0xAD	; 173
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <main>
  9e:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DCC_ENCODER_Pin_Setup>:
#include "tim.h"

#ifdef ENCODER

void DCC_ENCODER_Pin_Setup(void)
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
    /// DCC Interface Pins:
    DDRDCC |= (1<<DCC_TX_PIN); /// OUT
  ae:	aa e2       	ldi	r26, 0x2A	; 42
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	ea e2       	ldi	r30, 0x2A	; 42
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	8c 93       	st	X, r24

    DDRB |= (1<<LEDx_PIN); /// IDLE Blink Led OUT
  bc:	a4 e2       	ldi	r26, 0x24	; 36
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e4 e2       	ldi	r30, 0x24	; 36
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	8c 93       	st	X, r24
    PORTB &= ~(1<<LEDx_PIN);
  ca:	a5 e2       	ldi	r26, 0x25	; 37
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e5 e2       	ldi	r30, 0x25	; 37
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	8c 93       	st	X, r24
}
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	08 95       	ret

000000de <DCC_ENCODER_MainFCN>:


void DCC_ENCODER_MainFCN(void)  /// TO DO ....
{
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
    static uint8_t dcc_byte2 = 0;
    static uint8_t dcc_byte_idx = 0;
    static uint8_t uart_flag_f = 0;

/// ============= TIMER0 EVENT =====================================
        if(timer0_flag_f != timer0_flag){
  e6:	90 91 5c 01 	lds	r25, 0x015C
  ea:	80 91 a5 01 	lds	r24, 0x01A5
  ee:	98 17       	cp	r25, r24
  f0:	09 f4       	brne	.+2      	; 0xf4 <DCC_ENCODER_MainFCN+0x16>
  f2:	e9 c0       	rjmp	.+466    	; 0x2c6 <DCC_ENCODER_MainFCN+0x1e8>
            timer0_flag_f = timer0_flag;
  f4:	80 91 a5 01 	lds	r24, 0x01A5
  f8:	80 93 5c 01 	sts	0x015C, r24

            if(dcc_state == 1){/// PREAMBLE state ===============================
  fc:	80 91 02 01 	lds	r24, 0x0102
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	c9 f4       	brne	.+50     	; 0x136 <DCC_ENCODER_MainFCN+0x58>
                    //PORTLED |= (1<<LED1_PIN);  /// DEBUG
                if((dcc_tx_level^dcc_tx_rest_level)==0){
 104:	90 91 a7 01 	lds	r25, 0x01A7
 108:	80 91 01 01 	lds	r24, 0x0101
 10c:	98 17       	cp	r25, r24
 10e:	09 f0       	breq	.+2      	; 0x112 <DCC_ENCODER_MainFCN+0x34>
 110:	da c0       	rjmp	.+436    	; 0x2c6 <DCC_ENCODER_MainFCN+0x1e8>
                    /// After DCC_TX EVEN Edge:
                    //PORTLED |= (1<<LED1_PIN);  /// DEBUG
                    if(dcc_bit_num == 0){ /// Preamble finished
 112:	80 91 00 01 	lds	r24, 0x0100
 116:	88 23       	and	r24, r24
 118:	41 f4       	brne	.+16     	; 0x12a <DCC_ENCODER_MainFCN+0x4c>
                        /// Determine where to move on...
                        dcc_state = 2; /// PACKET START BIT state
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	80 93 02 01 	sts	0x0102, r24
                        OCR0A = 231; /// Set timing for the "ZERO" bit
 120:	e7 e4       	ldi	r30, 0x47	; 71
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	87 ee       	ldi	r24, 0xE7	; 231
 126:	80 83       	st	Z, r24
 128:	ce c0       	rjmp	.+412    	; 0x2c6 <DCC_ENCODER_MainFCN+0x1e8>
                        #ifdef DEBUG
                        PORTLED &= ~(1<<LED0_PIN); /// DEBUG
                        PORTLED |= (1<<LED1_PIN);  /// DEBUG
                        #endif // DEBUG
                    }else{ /// Preamble generation in progress...
                        dcc_bit_num--;
 12a:	80 91 00 01 	lds	r24, 0x0100
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	80 93 00 01 	sts	0x0100, r24
 134:	c8 c0       	rjmp	.+400    	; 0x2c6 <DCC_ENCODER_MainFCN+0x1e8>
                        //PORTLED |= (1<<LED1_PIN);  /// DEBUG
                    }
                } /// endif "EVEN" EDGE


            }else if(dcc_state == 2){ /// PACKET START BIT state ================
 136:	80 91 02 01 	lds	r24, 0x0102
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	09 f5       	brne	.+66     	; 0x180 <DCC_ENCODER_MainFCN+0xa2>

                if((dcc_tx_level^dcc_tx_rest_level)==0){
 13e:	90 91 a7 01 	lds	r25, 0x01A7
 142:	80 91 01 01 	lds	r24, 0x0101
 146:	98 17       	cp	r25, r24
 148:	09 f0       	breq	.+2      	; 0x14c <DCC_ENCODER_MainFCN+0x6e>
 14a:	bd c0       	rjmp	.+378    	; 0x2c6 <DCC_ENCODER_MainFCN+0x1e8>
                    /// After DCC_TX EVEN Edge:
                    dcc_state = 3; /// PACKET DATA BYTE state
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	80 93 02 01 	sts	0x0102, r24
                    dcc_bit_num = 7;
 152:	87 e0       	ldi	r24, 0x07	; 7
 154:	80 93 00 01 	sts	0x0100, r24
                    /// Prepare the First bit to be sent:
                    if(dcc_data[dcc_byte_idx]&0x80){
 158:	80 91 45 01 	lds	r24, 0x0145
 15c:	88 2f       	mov	r24, r24
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	e8 5b       	subi	r30, 0xB8	; 184
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	80 81       	ld	r24, Z
 168:	88 23       	and	r24, r24
 16a:	2c f4       	brge	.+10     	; 0x176 <DCC_ENCODER_MainFCN+0x98>
                        /// MSB of data == 1
                        OCR0A = 115;
 16c:	e7 e4       	ldi	r30, 0x47	; 71
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	83 e7       	ldi	r24, 0x73	; 115
 172:	80 83       	st	Z, r24
 174:	a8 c0       	rjmp	.+336    	; 0x2c6 <DCC_ENCODER_MainFCN+0x1e8>
                    }else{
                        /// MSB of data == 0
                        OCR0A = 231;
 176:	e7 e4       	ldi	r30, 0x47	; 71
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	87 ee       	ldi	r24, 0xE7	; 231
 17c:	80 83       	st	Z, r24
 17e:	a3 c0       	rjmp	.+326    	; 0x2c6 <DCC_ENCODER_MainFCN+0x1e8>
                    #ifdef DEBUG
                    PORTLED &= ~(1<<LED1_PIN);
                    #endif // DEBUG
                }/// end if

            }else if(dcc_state == 3){ /// PACKET DATA BYTE state ================
 180:	80 91 02 01 	lds	r24, 0x0102
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	09 f0       	breq	.+2      	; 0x18a <DCC_ENCODER_MainFCN+0xac>
 188:	4d c0       	rjmp	.+154    	; 0x224 <DCC_ENCODER_MainFCN+0x146>
                if((dcc_tx_level^dcc_tx_rest_level)==0){
 18a:	90 91 a7 01 	lds	r25, 0x01A7
 18e:	80 91 01 01 	lds	r24, 0x0101
 192:	98 17       	cp	r25, r24
 194:	09 f0       	breq	.+2      	; 0x198 <DCC_ENCODER_MainFCN+0xba>
 196:	97 c0       	rjmp	.+302    	; 0x2c6 <DCC_ENCODER_MainFCN+0x1e8>
                    /// After DCC_TX EVEN Edge:
                    if(dcc_bit_num == 0){
 198:	80 91 00 01 	lds	r24, 0x0100
 19c:	88 23       	and	r24, r24
 19e:	c9 f4       	brne	.+50     	; 0x1d2 <DCC_ENCODER_MainFCN+0xf4>
                        /// Data byte finished...
                        dcc_byte_idx++;
 1a0:	80 91 45 01 	lds	r24, 0x0145
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	80 93 45 01 	sts	0x0145, r24
                        if(dcc_byte_idx == 3){
 1aa:	80 91 45 01 	lds	r24, 0x0145
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	41 f4       	brne	.+16     	; 0x1c2 <DCC_ENCODER_MainFCN+0xe4>
                            /// This was the last data byte
                            OCR0A = 115;
 1b2:	e7 e4       	ldi	r30, 0x47	; 71
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	83 e7       	ldi	r24, 0x73	; 115
 1b8:	80 83       	st	Z, r24
                            dcc_state = 4; /// Go to PACKED END BIT state
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	80 93 02 01 	sts	0x0102, r24
 1c0:	82 c0       	rjmp	.+260    	; 0x2c6 <DCC_ENCODER_MainFCN+0x1e8>
                            #ifdef DEBUG
                            PORTLED |= (1<<LED0_PIN);
                            PORTLED |= (1<<LED1_PIN);
                            #endif // DEBUG
                        }else{
                            OCR0A = 231;
 1c2:	e7 e4       	ldi	r30, 0x47	; 71
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	87 ee       	ldi	r24, 0xE7	; 231
 1c8:	80 83       	st	Z, r24
                            #ifdef DEBUG
                            PORTLED |= (1<<LED1_PIN);
                            #endif // DEBUG
                            dcc_state = 2; /// PACKET START BIT state
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 93 02 01 	sts	0x0102, r24
 1d0:	7a c0       	rjmp	.+244    	; 0x2c6 <DCC_ENCODER_MainFCN+0x1e8>

                        }
                    }else{
                        /// Data byte not finished...
                        if(dcc_data[dcc_byte_idx]&(1<<(dcc_bit_num-1)))
 1d2:	80 91 45 01 	lds	r24, 0x0145
 1d6:	88 2f       	mov	r24, r24
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	e8 5b       	subi	r30, 0xB8	; 184
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	80 81       	ld	r24, Z
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	80 91 00 01 	lds	r24, 0x0100
 1ea:	88 2f       	mov	r24, r24
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	a9 01       	movw	r20, r18
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DCC_ENCODER_MainFCN+0x11a>
 1f4:	55 95       	asr	r21
 1f6:	47 95       	ror	r20
 1f8:	8a 95       	dec	r24
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DCC_ENCODER_MainFCN+0x116>
 1fc:	ca 01       	movw	r24, r20
 1fe:	81 70       	andi	r24, 0x01	; 1
 200:	90 70       	andi	r25, 0x00	; 0
 202:	88 23       	and	r24, r24
 204:	29 f0       	breq	.+10     	; 0x210 <DCC_ENCODER_MainFCN+0x132>
                            OCR0A = 115;
 206:	e7 e4       	ldi	r30, 0x47	; 71
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	83 e7       	ldi	r24, 0x73	; 115
 20c:	80 83       	st	Z, r24
 20e:	04 c0       	rjmp	.+8      	; 0x218 <DCC_ENCODER_MainFCN+0x13a>
                        else
                            OCR0A = 231;
 210:	e7 e4       	ldi	r30, 0x47	; 71
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	87 ee       	ldi	r24, 0xE7	; 231
 216:	80 83       	st	Z, r24
                        dcc_bit_num--;
 218:	80 91 00 01 	lds	r24, 0x0100
 21c:	81 50       	subi	r24, 0x01	; 1
 21e:	80 93 00 01 	sts	0x0100, r24
 222:	51 c0       	rjmp	.+162    	; 0x2c6 <DCC_ENCODER_MainFCN+0x1e8>
                    }
                }/// end if

            }else if(dcc_state == 4){ ///    PACKET END BIT state ================
 224:	80 91 02 01 	lds	r24, 0x0102
 228:	84 30       	cpi	r24, 0x04	; 4
 22a:	09 f0       	breq	.+2      	; 0x22e <DCC_ENCODER_MainFCN+0x150>
 22c:	45 c0       	rjmp	.+138    	; 0x2b8 <DCC_ENCODER_MainFCN+0x1da>
                if((dcc_tx_level^dcc_tx_rest_level)==0){ /// EVEN Edge
 22e:	90 91 a7 01 	lds	r25, 0x01A7
 232:	80 91 01 01 	lds	r24, 0x0101
 236:	98 17       	cp	r25, r24
 238:	09 f0       	breq	.+2      	; 0x23c <DCC_ENCODER_MainFCN+0x15e>
 23a:	45 c0       	rjmp	.+138    	; 0x2c6 <DCC_ENCODER_MainFCN+0x1e8>
                    /// Check for the UART DATA:
                    if(uart_flag_f != USART_get_flag()){
 23c:	0e 94 57 04 	call	0x8ae	; 0x8ae <USART_get_flag>
 240:	98 2f       	mov	r25, r24
 242:	80 91 44 01 	lds	r24, 0x0144
 246:	98 17       	cp	r25, r24
 248:	31 f1       	breq	.+76     	; 0x296 <DCC_ENCODER_MainFCN+0x1b8>
                        uart_flag_f = USART_get_flag();
 24a:	0e 94 57 04 	call	0x8ae	; 0x8ae <USART_get_flag>
 24e:	80 93 44 01 	sts	0x0144, r24

                        /// Copy the UART data into DCC data array:
                        //uart_rxbyte_num = strlen(rx_array);
                        if(UART_data_parser(&dcc_byte1, &dcc_byte2)){
 252:	87 e4       	ldi	r24, 0x47	; 71
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	26 e4       	ldi	r18, 0x46	; 70
 258:	31 e0       	ldi	r19, 0x01	; 1
 25a:	b9 01       	movw	r22, r18
 25c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <UART_data_parser>
 260:	88 23       	and	r24, r24
 262:	81 f0       	breq	.+32     	; 0x284 <DCC_ENCODER_MainFCN+0x1a6>
                            /// Message had the correct length
                            dcc_data[0]=dcc_byte1;/// 1st part
 264:	80 91 47 01 	lds	r24, 0x0147
 268:	80 93 48 01 	sts	0x0148, r24
                            dcc_data[1]=dcc_byte2;/// 2nd part
 26c:	80 91 46 01 	lds	r24, 0x0146
 270:	80 93 49 01 	sts	0x0149, r24
                            dcc_data[2]=dcc_byte1^dcc_byte2;/// ERROR DETECTION (XOR)
 274:	90 91 47 01 	lds	r25, 0x0147
 278:	80 91 46 01 	lds	r24, 0x0146
 27c:	89 27       	eor	r24, r25
 27e:	80 93 4a 01 	sts	0x014A, r24
 282:	11 c0       	rjmp	.+34     	; 0x2a6 <DCC_ENCODER_MainFCN+0x1c8>
                            //PORT_DEBUG |= (1<<PIN_DEBUG_0);
                        }else{ /// Incorrect message length.. SEND IDLE DCC PACKET
                            dcc_data[0] = 0xff;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	80 93 48 01 	sts	0x0148, r24
                            dcc_data[1] = 0x00;
 28a:	10 92 49 01 	sts	0x0149, r1
                            dcc_data[2] = 0xff;
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	80 93 4a 01 	sts	0x014A, r24
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <DCC_ENCODER_MainFCN+0x1c8>
                        }
                    }else{ /// No UART DATA = SEND IDLE DCC PACKET
                        dcc_data[0] = 0xff;
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	80 93 48 01 	sts	0x0148, r24
                        dcc_data[1] = 0x00;
 29c:	10 92 49 01 	sts	0x0149, r1
                        dcc_data[2] = 0xff;
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	80 93 4a 01 	sts	0x014A, r24
                        //PORT_DEBUG &= ~(1<<PIN_DEBUG_0);
                    }/// endif uart_flag_f
                    dcc_bit_num = PREAMB_BITS-1;
 2a6:	8d e0       	ldi	r24, 0x0D	; 13
 2a8:	80 93 00 01 	sts	0x0100, r24
                    dcc_byte_idx = 0;
 2ac:	10 92 45 01 	sts	0x0145, r1
                    dcc_state = 1; /// Go back to the Preamble
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 02 01 	sts	0x0102, r24
 2b6:	07 c0       	rjmp	.+14     	; 0x2c6 <DCC_ENCODER_MainFCN+0x1e8>

                }/// end if EVEN EDGE

            }else{ /// INVALID state
                /// Stop the TIMER0
                TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
 2b8:	a5 e4       	ldi	r26, 0x45	; 69
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	e5 e4       	ldi	r30, 0x45	; 69
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	88 7f       	andi	r24, 0xF8	; 248
 2c4:	8c 93       	st	X, r24

            }/// end if DCC_STATE
        }/// end if timer0_flag
}
 2c6:	cf 91       	pop	r28
 2c8:	df 91       	pop	r29
 2ca:	08 95       	ret

000002cc <LED_toggle>:
}
*/


void LED_toggle(uint8_t led_bit)
{   /// led_bit = 0x01, 0x02, 0x04, 0x08, ...
 2cc:	df 93       	push	r29
 2ce:	cf 93       	push	r28
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <LED_toggle+0x6>
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <LED_toggle+0x8>
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t bitshift = 0;
 2da:	19 82       	std	Y+1, r1	; 0x01

    switch(led_bit){
 2dc:	8a 81       	ldd	r24, Y+2	; 0x02
 2de:	28 2f       	mov	r18, r24
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	3c 83       	std	Y+4, r19	; 0x04
 2e4:	2b 83       	std	Y+3, r18	; 0x03
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	9c 81       	ldd	r25, Y+4	; 0x04
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	91 05       	cpc	r25, r1
 2ee:	69 f0       	breq	.+26     	; 0x30a <LED_toggle+0x3e>
 2f0:	2b 81       	ldd	r18, Y+3	; 0x03
 2f2:	3c 81       	ldd	r19, Y+4	; 0x04
 2f4:	24 30       	cpi	r18, 0x04	; 4
 2f6:	31 05       	cpc	r19, r1
 2f8:	59 f0       	breq	.+22     	; 0x310 <LED_toggle+0x44>
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	9c 81       	ldd	r25, Y+4	; 0x04
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	91 05       	cpc	r25, r1
 302:	49 f4       	brne	.+18     	; 0x316 <LED_toggle+0x4a>
    case 0x01: /// LED0
            bitshift = LEDz_PIN;
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	89 83       	std	Y+1, r24	; 0x01
 308:	08 c0       	rjmp	.+16     	; 0x31a <LED_toggle+0x4e>
        break;
    case 0x02: /// LED1
            bitshift = LEDy_PIN;
 30a:	84 e0       	ldi	r24, 0x04	; 4
 30c:	89 83       	std	Y+1, r24	; 0x01
 30e:	05 c0       	rjmp	.+10     	; 0x31a <LED_toggle+0x4e>
        break;
    case 0x04: /// IDLE process LED
            bitshift = LEDx_PIN;
 310:	85 e0       	ldi	r24, 0x05	; 5
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	02 c0       	rjmp	.+4      	; 0x31a <LED_toggle+0x4e>
        break;
    default:   /// LED0
            bitshift = LEDx_PIN;
 316:	85 e0       	ldi	r24, 0x05	; 5
 318:	89 83       	std	Y+1, r24	; 0x01

    }// end switch

    if(led_flag&led_bit){
 31a:	80 91 a8 01 	lds	r24, 0x01A8
 31e:	9a 81       	ldd	r25, Y+2	; 0x02
 320:	89 23       	and	r24, r25
 322:	88 23       	and	r24, r24
 324:	e9 f0       	breq	.+58     	; 0x360 <LED_toggle+0x94>
        led_flag &= ~led_bit;
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	98 2f       	mov	r25, r24
 32a:	90 95       	com	r25
 32c:	80 91 a8 01 	lds	r24, 0x01A8
 330:	89 23       	and	r24, r25
 332:	80 93 a8 01 	sts	0x01A8, r24
        PORTB &= ~(1<<bitshift);
 336:	a5 e2       	ldi	r26, 0x25	; 37
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	e5 e2       	ldi	r30, 0x25	; 37
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	48 2f       	mov	r20, r24
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	28 2f       	mov	r18, r24
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 2e       	mov	r0, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <LED_toggle+0x88>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	0a 94       	dec	r0
 356:	e2 f7       	brpl	.-8      	; 0x350 <LED_toggle+0x84>
 358:	80 95       	com	r24
 35a:	84 23       	and	r24, r20
 35c:	8c 93       	st	X, r24
 35e:	19 c0       	rjmp	.+50     	; 0x392 <LED_toggle+0xc6>
    }else{ /// The LED is off
        led_flag |= led_bit;
 360:	90 91 a8 01 	lds	r25, 0x01A8
 364:	8a 81       	ldd	r24, Y+2	; 0x02
 366:	89 2b       	or	r24, r25
 368:	80 93 a8 01 	sts	0x01A8, r24
        PORTB |= (1<<bitshift);
 36c:	a5 e2       	ldi	r26, 0x25	; 37
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	e5 e2       	ldi	r30, 0x25	; 37
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	48 2f       	mov	r20, r24
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	28 2f       	mov	r18, r24
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 2e       	mov	r0, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <LED_toggle+0xbe>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <LED_toggle+0xba>
 38e:	84 2b       	or	r24, r20
 390:	8c 93       	st	X, r24
    }
}
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	cf 91       	pop	r28
 39c:	df 91       	pop	r29
 39e:	08 95       	ret

000003a0 <main>:

/// ====================


int main(void)
{
 3a0:	df 93       	push	r29
 3a2:	cf 93       	push	r28
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <main+0x6>
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62

    uint16_t ref_timer = 0;
 3aa:	1a 82       	std	Y+2, r1	; 0x02
 3ac:	19 82       	std	Y+1, r1	; 0x01
    timer0_cnt = 0;
 3ae:	10 92 aa 01 	sts	0x01AA, r1
 3b2:	10 92 a9 01 	sts	0x01A9, r1
    timer1_cnt = 0;
 3b6:	10 92 ac 01 	sts	0x01AC, r1
 3ba:	10 92 ab 01 	sts	0x01AB, r1
    #ifdef ENCODER

        /// Global variable initialization:
        timer0_flag = 0;
 3be:	10 92 a5 01 	sts	0x01A5, r1
        uart_char_idx = 0;
 3c2:	10 92 a6 01 	sts	0x01A6, r1
        dcc_tx_level = 1;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	80 93 a7 01 	sts	0x01A7, r24
        uart_flag = 0;
 3cc:	10 92 5d 01 	sts	0x015D, r1

        DCC_ENCODER_Pin_Setup();
 3d0:	0e 94 53 00 	call	0xa6	; 0xa6 <DCC_ENCODER_Pin_Setup>
        TIMER0_ENCODER_setup(); /// Setup TIMER0 in CTC mode (Running)
 3d4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <TIMER0_ENCODER_setup>
        TIMER1_ENCODER_setup();
 3d8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <TIMER1_ENCODER_setup>
        USART_init();
 3dc:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <USART_init>

        USART_TX_STRING_WAIT("\nENCODER mode\n");
 3e0:	83 e0       	ldi	r24, 0x03	; 3
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	0e 94 2c 04 	call	0x858	; 0x858 <USART_TX_STRING_WAIT>



    #endif // DECODER

    sei();/// Enable Interrupts
 3e8:	78 94       	sei

    /// ======================== LOOP ===================
    while(1){
        #ifdef ENCODER
           DCC_ENCODER_MainFCN();
 3ea:	0e 94 6f 00 	call	0xde	; 0xde <DCC_ENCODER_MainFCN>

           /// BACKGROUND BLINK PROCESS:
            if( (TIMER1_get_value() - ref_timer) >= T_IDLE){
 3ee:	0e 94 30 03 	call	0x660	; 0x660 <TIMER1_get_value>
 3f2:	29 81       	ldd	r18, Y+1	; 0x01
 3f4:	3a 81       	ldd	r19, Y+2	; 0x02
 3f6:	82 1b       	sub	r24, r18
 3f8:	93 0b       	sbc	r25, r19
 3fa:	21 e0       	ldi	r18, 0x01	; 1
 3fc:	84 3f       	cpi	r24, 0xF4	; 244
 3fe:	92 07       	cpc	r25, r18
 400:	a0 f3       	brcs	.-24     	; 0x3ea <main+0x4a>
                ref_timer = TIMER1_get_value();
 402:	0e 94 30 03 	call	0x660	; 0x660 <TIMER1_get_value>
 406:	9a 83       	std	Y+2, r25	; 0x02
 408:	89 83       	std	Y+1, r24	; 0x01
                LED_toggle(0x04); /// PINB5 (built-in LED)
 40a:	84 e0       	ldi	r24, 0x04	; 4
 40c:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_toggle>
 410:	ec cf       	rjmp	.-40     	; 0x3ea <main+0x4a>

00000412 <__vector_18>:
}

#ifdef ENCODER

ISR(USART_RX_vect) /// ====================== UART (ENCODER) DATA RECEPTION ===============================================
{ /// UART RX complete Interrupt:
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	2f 93       	push	r18
 41e:	3f 93       	push	r19
 420:	4f 93       	push	r20
 422:	5f 93       	push	r21
 424:	6f 93       	push	r22
 426:	7f 93       	push	r23
 428:	8f 93       	push	r24
 42a:	9f 93       	push	r25
 42c:	af 93       	push	r26
 42e:	bf 93       	push	r27
 430:	ef 93       	push	r30
 432:	ff 93       	push	r31
 434:	df 93       	push	r29
 436:	cf 93       	push	r28
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
    cli();
 43c:	f8 94       	cli

    /// UART TERMINAL SETTINGS:
    /// - every message must be terminated with CR+LF (0x0D 0x0A)

    /// All the variables
    if(uart_char_idx > 99){
 43e:	80 91 a6 01 	lds	r24, 0x01A6
 442:	84 36       	cpi	r24, 0x64	; 100
 444:	70 f0       	brcs	.+28     	; 0x462 <__vector_18+0x50>
        uart_char_idx=0; /// Start overwriting the beginning
 446:	10 92 a6 01 	sts	0x01A6, r1
        rx_array[uart_char_idx] = UDR0; /// read UART buffer
 44a:	80 91 a6 01 	lds	r24, 0x01A6
 44e:	88 2f       	mov	r24, r24
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	e6 ec       	ldi	r30, 0xC6	; 198
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	20 81       	ld	r18, Z
 458:	fc 01       	movw	r30, r24
 45a:	ef 56       	subi	r30, 0x6F	; 111
 45c:	fe 4f       	sbci	r31, 0xFE	; 254
 45e:	20 83       	st	Z, r18
 460:	54 c0       	rjmp	.+168    	; 0x50a <__vector_18+0xf8>
    }else if(uart_char_idx == 0){
 462:	80 91 a6 01 	lds	r24, 0x01A6
 466:	88 23       	and	r24, r24
 468:	c9 f4       	brne	.+50     	; 0x49c <__vector_18+0x8a>
        memset(rx_array,'\0',20);
 46a:	81 e9       	ldi	r24, 0x91	; 145
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	44 e1       	ldi	r20, 0x14	; 20
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	0e 94 9f 05 	call	0xb3e	; 0xb3e <memset>
        rx_array[uart_char_idx] = UDR0; /// read UART buffer
 47a:	80 91 a6 01 	lds	r24, 0x01A6
 47e:	88 2f       	mov	r24, r24
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	e6 ec       	ldi	r30, 0xC6	; 198
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	20 81       	ld	r18, Z
 488:	fc 01       	movw	r30, r24
 48a:	ef 56       	subi	r30, 0x6F	; 111
 48c:	fe 4f       	sbci	r31, 0xFE	; 254
 48e:	20 83       	st	Z, r18
        uart_char_idx++;
 490:	80 91 a6 01 	lds	r24, 0x01A6
 494:	8f 5f       	subi	r24, 0xFF	; 255
 496:	80 93 a6 01 	sts	0x01A6, r24
 49a:	37 c0       	rjmp	.+110    	; 0x50a <__vector_18+0xf8>
        //PORTLED |= (1<<LED0_PIN);
    }else{
        rx_array[uart_char_idx] = UDR0; /// read UART buffer
 49c:	80 91 a6 01 	lds	r24, 0x01A6
 4a0:	88 2f       	mov	r24, r24
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	e6 ec       	ldi	r30, 0xC6	; 198
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	20 81       	ld	r18, Z
 4aa:	fc 01       	movw	r30, r24
 4ac:	ef 56       	subi	r30, 0x6F	; 111
 4ae:	fe 4f       	sbci	r31, 0xFE	; 254
 4b0:	20 83       	st	Z, r18
        if(rx_array[uart_char_idx] == 0x0A){ /// end of the CMD (CR char)
 4b2:	80 91 a6 01 	lds	r24, 0x01A6
 4b6:	88 2f       	mov	r24, r24
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	fc 01       	movw	r30, r24
 4bc:	ef 56       	subi	r30, 0x6F	; 111
 4be:	fe 4f       	sbci	r31, 0xFE	; 254
 4c0:	80 81       	ld	r24, Z
 4c2:	8a 30       	cpi	r24, 0x0A	; 10
 4c4:	e9 f4       	brne	.+58     	; 0x500 <__vector_18+0xee>
            rx_array[uart_char_idx] = 0x00; // erase 0x0A
 4c6:	80 91 a6 01 	lds	r24, 0x01A6
 4ca:	88 2f       	mov	r24, r24
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	fc 01       	movw	r30, r24
 4d0:	ef 56       	subi	r30, 0x6F	; 111
 4d2:	fe 4f       	sbci	r31, 0xFE	; 254
 4d4:	10 82       	st	Z, r1
            rx_array[--uart_char_idx] = 0x00; // erase 0x0D
 4d6:	80 91 a6 01 	lds	r24, 0x01A6
 4da:	81 50       	subi	r24, 0x01	; 1
 4dc:	80 93 a6 01 	sts	0x01A6, r24
 4e0:	80 91 a6 01 	lds	r24, 0x01A6
 4e4:	88 2f       	mov	r24, r24
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	fc 01       	movw	r30, r24
 4ea:	ef 56       	subi	r30, 0x6F	; 111
 4ec:	fe 4f       	sbci	r31, 0xFE	; 254
 4ee:	10 82       	st	Z, r1
            uart_flag ++; /// this variable increments each ISR. It is followed by another variable in the loop.
 4f0:	80 91 5d 01 	lds	r24, 0x015D
 4f4:	8f 5f       	subi	r24, 0xFF	; 255
 4f6:	80 93 5d 01 	sts	0x015D, r24
            /// The change of "uart_flag" triggers Command recognition procedure.
            /// However, "uart_flag" can never be modified outside this ISR! It can only be read.
            uart_char_idx = 0;
 4fa:	10 92 a6 01 	sts	0x01A6, r1
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <__vector_18+0xf8>
        }else{
            uart_char_idx++;
 500:	80 91 a6 01 	lds	r24, 0x01A6
 504:	8f 5f       	subi	r24, 0xFF	; 255
 506:	80 93 a6 01 	sts	0x01A6, r24
        }
    }
    sei();
 50a:	78 94       	sei
}
 50c:	cf 91       	pop	r28
 50e:	df 91       	pop	r29
 510:	ff 91       	pop	r31
 512:	ef 91       	pop	r30
 514:	bf 91       	pop	r27
 516:	af 91       	pop	r26
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	7f 91       	pop	r23
 51e:	6f 91       	pop	r22
 520:	5f 91       	pop	r21
 522:	4f 91       	pop	r20
 524:	3f 91       	pop	r19
 526:	2f 91       	pop	r18
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <SPI_setup>:

#include "spi.h"

void SPI_setup(void)
{
 532:	df 93       	push	r29
 534:	cf 93       	push	r28
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
    //SPCR0 |= ();
    /// F_CPU = 16 MHz
    /// Set SCK speed, type of Endian, Edges, etc..
SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR1)|(1<<SPR0); ///SPI control REG.
 53a:	ec e4       	ldi	r30, 0x4C	; 76
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	83 e5       	ldi	r24, 0x53	; 83
 540:	80 83       	st	Z, r24
/// SPR1 & SPR0 = 00  F_clk/4. = 4 MHz => 250 ns
/// SPR1 & SPR0 = 11  F_clk/128. = 125 kHz => 8 us

//SPSR &= ~(1<<SPI2X); /// DOuble SPI speed is OFF

}
 542:	cf 91       	pop	r28
 544:	df 91       	pop	r29
 546:	08 95       	ret

00000548 <SPI_ByteTransfer>:

uint8_t SPI_ByteTransfer(uint8_t TXData)
{
 548:	df 93       	push	r29
 54a:	cf 93       	push	r28
 54c:	0f 92       	push	r0
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	89 83       	std	Y+1, r24	; 0x01
    SPDR = TXData; /// First Shift one byte OUT of MOSI
 554:	ee e4       	ldi	r30, 0x4E	; 78
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	89 81       	ldd	r24, Y+1	; 0x01
 55a:	80 83       	st	Z, r24
    while(!(SPSR & (1<<SPIF)));
 55c:	ed e4       	ldi	r30, 0x4D	; 77
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	88 23       	and	r24, r24
 564:	dc f7       	brge	.-10     	; 0x55c <SPI_ByteTransfer+0x14>
    return SPDR; /// Simultanously you get one Byte IN to MISO
 566:	ee e4       	ldi	r30, 0x4E	; 78
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
}
 56c:	0f 90       	pop	r0
 56e:	cf 91       	pop	r28
 570:	df 91       	pop	r29
 572:	08 95       	ret

00000574 <TIMER1_setup>:
#include "tim.h"


void TIMER1_setup(void)
{
 574:	df 93       	push	r29
 576:	cf 93       	push	r28
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
  ///   1       0       1       1024
  ///   1       1       0       Extern Falling
  ///   1       1       1       Extern Rising
    #ifdef F_CPU_16
    /// F_CPU = 16 MHz
  TCCR1A |= (0<<WGM11)|(0<<WGM10);
 57c:	a0 e8       	ldi	r26, 0x80	; 128
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	e0 e8       	ldi	r30, 0x80	; 128
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	8c 93       	st	X, r24
  TCCR1B |= (0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(1<<CS10);
 588:	a1 e8       	ldi	r26, 0x81	; 129
 58a:	b0 e0       	ldi	r27, 0x00	; 0
 58c:	e1 e8       	ldi	r30, 0x81	; 129
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	8b 60       	ori	r24, 0x0B	; 11
 594:	8c 93       	st	X, r24
  /// CTC mode, N = 64
  TIMSK1 |= (0<<TOIE1)|(1<<OCIE1A);
 596:	af e6       	ldi	r26, 0x6F	; 111
 598:	b0 e0       	ldi	r27, 0x00	; 0
 59a:	ef e6       	ldi	r30, 0x6F	; 111
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	82 60       	ori	r24, 0x02	; 2
 5a2:	8c 93       	st	X, r24
  /// CTC interrupt enabled
  OCR1A = 249;
 5a4:	e8 e8       	ldi	r30, 0x88	; 136
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	89 ef       	ldi	r24, 0xF9	; 249
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	91 83       	std	Z+1, r25	; 0x01
 5ae:	80 83       	st	Z, r24
  OCR1A = 499;
  /// T_ISR = 1.000 ms

  #endif // F_CPU_4

}
 5b0:	cf 91       	pop	r28
 5b2:	df 91       	pop	r29
 5b4:	08 95       	ret

000005b6 <TIMER0_ENCODER_setup>:
    //timer_cnt = 0;
}
*/

void TIMER0_ENCODER_setup(void)
{
 5b6:	df 93       	push	r29
 5b8:	cf 93       	push	r28
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
    /// Set TIMER0 into FAST PWM mode with OCR0A update in BOTTOM TCNT0 position.

    TCCR0A |= (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(1<<WGM01)|(0<<WGM00);
 5be:	a4 e4       	ldi	r26, 0x44	; 68
 5c0:	b0 e0       	ldi	r27, 0x00	; 0
 5c2:	e4 e4       	ldi	r30, 0x44	; 68
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	82 60       	ori	r24, 0x02	; 2
 5ca:	8c 93       	st	X, r24

    #ifdef F_CPU_16

    //TCCR0B |= (0<<WGM02)|(0<<CS02)|(1<<CS01)|(0<<CS00); /// TIMER RUNNING
    //TCCR0B |= (0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00); /// TIMER STOPPED
    TCCR0B |= (0<<WGM02)|(0<<CS02)|(1<<CS01)|(0<<CS00); /// TIMER STARTED,  N=8
 5cc:	a5 e4       	ldi	r26, 0x45	; 69
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	e5 e4       	ldi	r30, 0x45	; 69
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	82 60       	ori	r24, 0x02	; 2
 5d8:	8c 93       	st	X, r24
    /// CTC mode, (N = 8)
    OCR0A = 115; /// for bit "1"
 5da:	e7 e4       	ldi	r30, 0x47	; 71
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	83 e7       	ldi	r24, 0x73	; 115
 5e0:	80 83       	st	Z, r24

    #endif // F_CPU_4

    /// T_ISR = 58us for bit "1"
    /// T_ISR = 116us for bit "0"
    TIMSK0 |= (0<<TOIE0)|(1<<OCIE0A)|(0<<OCIE0B); ///OCR0A ISR
 5e2:	ae e6       	ldi	r26, 0x6E	; 110
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	ee e6       	ldi	r30, 0x6E	; 110
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	82 60       	ori	r24, 0x02	; 2
 5ee:	8c 93       	st	X, r24

}
 5f0:	cf 91       	pop	r28
 5f2:	df 91       	pop	r29
 5f4:	08 95       	ret

000005f6 <TIMER1_ENCODER_setup>:

void TIMER1_ENCODER_setup(void)
{
 5f6:	df 93       	push	r29
 5f8:	cf 93       	push	r28
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
  TCCR1A |= (0<<WGM11)|(0<<WGM10);
 5fe:	a0 e8       	ldi	r26, 0x80	; 128
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	e0 e8       	ldi	r30, 0x80	; 128
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	8c 93       	st	X, r24
  TCCR1B |= (0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(1<<CS10);
 60a:	a1 e8       	ldi	r26, 0x81	; 129
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	e1 e8       	ldi	r30, 0x81	; 129
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	8b 60       	ori	r24, 0x0B	; 11
 616:	8c 93       	st	X, r24
  ///   1       0       0       256
  ///   1       0       1       1024
  ///   1       1       0       Extern Falling
  ///   1       1       1       Extern Rising

  TIMSK1 |= (0<<TOIE1)|(1<<OCIE1A);
 618:	af e6       	ldi	r26, 0x6F	; 111
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	ef e6       	ldi	r30, 0x6F	; 111
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	82 60       	ori	r24, 0x02	; 2
 624:	8c 93       	st	X, r24
  /// CTC interrupt Enabled
  OCR1A = 249;  /// 1ms timer
 626:	e8 e8       	ldi	r30, 0x88	; 136
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	89 ef       	ldi	r24, 0xF9	; 249
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	91 83       	std	Z+1, r25	; 0x01
 630:	80 83       	st	Z, r24

}
 632:	cf 91       	pop	r28
 634:	df 91       	pop	r29
 636:	08 95       	ret

00000638 <TIMER0_get_value>:

uint16_t TIMER0_get_value(void)
{
 638:	df 93       	push	r29
 63a:	cf 93       	push	r28
 63c:	00 d0       	rcall	.+0      	; 0x63e <TIMER0_get_value+0x6>
 63e:	cd b7       	in	r28, 0x3d	; 61
 640:	de b7       	in	r29, 0x3e	; 62
   uint16_t val = 0;
 642:	1a 82       	std	Y+2, r1	; 0x02
 644:	19 82       	std	Y+1, r1	; 0x01

   val = timer0_cnt;
 646:	80 91 a9 01 	lds	r24, 0x01A9
 64a:	90 91 aa 01 	lds	r25, 0x01AA
 64e:	9a 83       	std	Y+2, r25	; 0x02
 650:	89 83       	std	Y+1, r24	; 0x01

   return val;
 652:	89 81       	ldd	r24, Y+1	; 0x01
 654:	9a 81       	ldd	r25, Y+2	; 0x02
}
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	cf 91       	pop	r28
 65c:	df 91       	pop	r29
 65e:	08 95       	ret

00000660 <TIMER1_get_value>:

uint16_t TIMER1_get_value(void)
{
 660:	df 93       	push	r29
 662:	cf 93       	push	r28
 664:	00 d0       	rcall	.+0      	; 0x666 <TIMER1_get_value+0x6>
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
   uint16_t val = 0;
 66a:	1a 82       	std	Y+2, r1	; 0x02
 66c:	19 82       	std	Y+1, r1	; 0x01

   val = timer1_cnt;
 66e:	80 91 ab 01 	lds	r24, 0x01AB
 672:	90 91 ac 01 	lds	r25, 0x01AC
 676:	9a 83       	std	Y+2, r25	; 0x02
 678:	89 83       	std	Y+1, r24	; 0x01

   return val;
 67a:	89 81       	ldd	r24, Y+1	; 0x01
 67c:	9a 81       	ldd	r25, Y+2	; 0x02
}
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	cf 91       	pop	r28
 684:	df 91       	pop	r29
 686:	08 95       	ret

00000688 <TIMER1_DECODER_setup>:

}
*/

void TIMER1_DECODER_setup(void)
{
 688:	df 93       	push	r29
 68a:	cf 93       	push	r28
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
  TCCR1A |= (0<<WGM11)|(0<<WGM10);
 690:	a0 e8       	ldi	r26, 0x80	; 128
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	e0 e8       	ldi	r30, 0x80	; 128
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	8c 93       	st	X, r24
  TCCR1B |= (0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
 69c:	a1 e8       	ldi	r26, 0x81	; 129
 69e:	b0 e0       	ldi	r27, 0x00	; 0
 6a0:	e1 e8       	ldi	r30, 0x81	; 129
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	8a 60       	ori	r24, 0x0A	; 10
 6a8:	8c 93       	st	X, r24
  /// CTC mode, N = 8, Timer resolution = 0.5 us, Timer Range = 32768 us

  TIMSK1 |= (0<<TOIE1)|(0<<OCIE1A);
 6aa:	af e6       	ldi	r26, 0x6F	; 111
 6ac:	b0 e0       	ldi	r27, 0x00	; 0
 6ae:	ef e6       	ldi	r30, 0x6F	; 111
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	8c 93       	st	X, r24
  /// CTC interrupt Disabled
  OCR1A = 20010;  /// TIMEOUT for the DCC RX PIN EDGE DETECTION
 6b6:	e8 e8       	ldi	r30, 0x88	; 136
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	8a e2       	ldi	r24, 0x2A	; 42
 6bc:	9e e4       	ldi	r25, 0x4E	; 78
 6be:	91 83       	std	Z+1, r25	; 0x01
 6c0:	80 83       	st	Z, r24

}
 6c2:	cf 91       	pop	r28
 6c4:	df 91       	pop	r29
 6c6:	08 95       	ret

000006c8 <TIMER0_DECODER_setup>:

void TIMER0_DECODER_setup(void)
{
 6c8:	df 93       	push	r29
 6ca:	cf 93       	push	r28
 6cc:	cd b7       	in	r28, 0x3d	; 61
 6ce:	de b7       	in	r29, 0x3e	; 62
    /// Timer0 used for LED blinking

    TCCR0A |= (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(1<<WGM01)|(0<<WGM00);
 6d0:	a4 e4       	ldi	r26, 0x44	; 68
 6d2:	b0 e0       	ldi	r27, 0x00	; 0
 6d4:	e4 e4       	ldi	r30, 0x44	; 68
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	82 60       	ori	r24, 0x02	; 2
 6dc:	8c 93       	st	X, r24
    /// No output pins enabled.
    //TCCR0B |= (0<<WGM02)|(0<<CS02)|(1<<CS01)|(0<<CS00); /// TIMER RUNNING
    TCCR0B |= (0<<WGM02)|(0<<CS02)|(1<<CS01)|(1<<CS00); /// TIMER STARTED
 6de:	a5 e4       	ldi	r26, 0x45	; 69
 6e0:	b0 e0       	ldi	r27, 0x00	; 0
 6e2:	e5 e4       	ldi	r30, 0x45	; 69
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	83 60       	ori	r24, 0x03	; 3
 6ea:	8c 93       	st	X, r24
  ///   1       0       0       256
  ///   1       0       1       1024
  ///   1       1       0       Extern Falling
  ///   1       1       1       Extern Rising

    TIMSK0 |= (0<<TOIE0)|(1<<OCIE0A)|(0<<OCIE0B);/// Output Compare A ISR
 6ec:	ae e6       	ldi	r26, 0x6E	; 110
 6ee:	b0 e0       	ldi	r27, 0x00	; 0
 6f0:	ee e6       	ldi	r30, 0x6E	; 110
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	80 81       	ld	r24, Z
 6f6:	82 60       	ori	r24, 0x02	; 2
 6f8:	8c 93       	st	X, r24
    OCR0A = 249; /// ISR frequency 1.000 kHz
 6fa:	e7 e4       	ldi	r30, 0x47	; 71
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	89 ef       	ldi	r24, 0xF9	; 249
 700:	80 83       	st	Z, r24
    //OCR0A = 231; /// for bit "0"

}
 702:	cf 91       	pop	r28
 704:	df 91       	pop	r29
 706:	08 95       	ret

00000708 <__vector_11>:
/// ================== INTERRUPT SERVICE ROUTINE ===============================


#ifdef ENCODER

ISR(TIMER1_COMPA_vect){
 708:	1f 92       	push	r1
 70a:	0f 92       	push	r0
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	0f 92       	push	r0
 710:	11 24       	eor	r1, r1
 712:	8f 93       	push	r24
 714:	9f 93       	push	r25
 716:	df 93       	push	r29
 718:	cf 93       	push	r28
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
    /// Every 1 ms
    timer1_cnt++;
 71e:	80 91 ab 01 	lds	r24, 0x01AB
 722:	90 91 ac 01 	lds	r25, 0x01AC
 726:	01 96       	adiw	r24, 0x01	; 1
 728:	90 93 ac 01 	sts	0x01AC, r25
 72c:	80 93 ab 01 	sts	0x01AB, r24
}
 730:	cf 91       	pop	r28
 732:	df 91       	pop	r29
 734:	9f 91       	pop	r25
 736:	8f 91       	pop	r24
 738:	0f 90       	pop	r0
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	0f 90       	pop	r0
 73e:	1f 90       	pop	r1
 740:	18 95       	reti

00000742 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 742:	1f 92       	push	r1
 744:	0f 92       	push	r0
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	0f 92       	push	r0
 74a:	11 24       	eor	r1, r1
 74c:	8f 93       	push	r24
 74e:	af 93       	push	r26
 750:	bf 93       	push	r27
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
 756:	df 93       	push	r29
 758:	cf 93       	push	r28
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
    /// Driving the DCC TX Pin (OUT):
    if(dcc_tx_level==0){
 75e:	80 91 a7 01 	lds	r24, 0x01A7
 762:	88 23       	and	r24, r24
 764:	59 f4       	brne	.+22     	; 0x77c <__vector_14+0x3a>
        PORTDCC |= (1<<DCC_TX_PIN); /// Go HIGH
 766:	ab e2       	ldi	r26, 0x2B	; 43
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	eb e2       	ldi	r30, 0x2B	; 43
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
 770:	80 61       	ori	r24, 0x10	; 16
 772:	8c 93       	st	X, r24
        dcc_tx_level = 1;
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	80 93 a7 01 	sts	0x01A7, r24
 77a:	09 c0       	rjmp	.+18     	; 0x78e <__vector_14+0x4c>

    }else{
        PORTDCC &= ~(1<<DCC_TX_PIN); /// Go LOW
 77c:	ab e2       	ldi	r26, 0x2B	; 43
 77e:	b0 e0       	ldi	r27, 0x00	; 0
 780:	eb e2       	ldi	r30, 0x2B	; 43
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	80 81       	ld	r24, Z
 786:	8f 7e       	andi	r24, 0xEF	; 239
 788:	8c 93       	st	X, r24
        dcc_tx_level = 0;
 78a:	10 92 a7 01 	sts	0x01A7, r1
    }/// end if
    timer0_flag++;
 78e:	80 91 a5 01 	lds	r24, 0x01A5
 792:	8f 5f       	subi	r24, 0xFF	; 255
 794:	80 93 a5 01 	sts	0x01A5, r24

}
 798:	cf 91       	pop	r28
 79a:	df 91       	pop	r29
 79c:	ff 91       	pop	r31
 79e:	ef 91       	pop	r30
 7a0:	bf 91       	pop	r27
 7a2:	af 91       	pop	r26
 7a4:	8f 91       	pop	r24
 7a6:	0f 90       	pop	r0
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	0f 90       	pop	r0
 7ac:	1f 90       	pop	r1
 7ae:	18 95       	reti

000007b0 <USART_init>:
#include "uart.h"


void USART_init(void)
{
 7b0:	df 93       	push	r29
 7b2:	cf 93       	push	r28
 7b4:	cd b7       	in	r28, 0x3d	; 61
 7b6:	de b7       	in	r29, 0x3e	; 62
    //UCSR0A |= (0<<U2X0)|(0<<MPCM0);
    //UBRR0H = 0x00;/// has to be written first
    //UBRR0 = 0x67; /// this updates the prescaler.

    /// For 57600 Bd:  (error =-0.8%)
    UCSR0A |= (1<<U2X0);
 7b8:	a0 ec       	ldi	r26, 0xC0	; 192
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	e0 ec       	ldi	r30, 0xC0	; 192
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	82 60       	ori	r24, 0x02	; 2
 7c4:	8c 93       	st	X, r24
    UBRR0 = 34;
 7c6:	e4 ec       	ldi	r30, 0xC4	; 196
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	82 e2       	ldi	r24, 0x22	; 34
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	91 83       	std	Z+1, r25	; 0x01
 7d0:	80 83       	st	Z, r24

    UCSR0B |= (1<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02)|(0<<RXB80)|(0<<TXB80) ;
 7d2:	a1 ec       	ldi	r26, 0xC1	; 193
 7d4:	b0 e0       	ldi	r27, 0x00	; 0
 7d6:	e1 ec       	ldi	r30, 0xC1	; 193
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	88 69       	ori	r24, 0x98	; 152
 7de:	8c 93       	st	X, r24
    UCSR0C |= (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0) ;
 7e0:	a2 ec       	ldi	r26, 0xC2	; 194
 7e2:	b0 e0       	ldi	r27, 0x00	; 0
 7e4:	e2 ec       	ldi	r30, 0xC2	; 194
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	86 60       	ori	r24, 0x06	; 6
 7ec:	8c 93       	st	X, r24
    /// no parity, 8bit data, 1 stop bit, RX complete interrupt, RX enabled, double speed mode DISABLED.
    /// see page 244 of ATMEGA328P datasheet.

    uart_flag = 0;
 7ee:	10 92 5d 01 	sts	0x015D, r1
    uart_idx = 0;
 7f2:	10 92 5e 01 	sts	0x015E, r1

}
 7f6:	cf 91       	pop	r28
 7f8:	df 91       	pop	r29
 7fa:	08 95       	ret

000007fc <USART_RX_WAIT>:


void USART_RX_WAIT(uint8_t *RX_Data)
{
 7fc:	df 93       	push	r29
 7fe:	cf 93       	push	r28
 800:	00 d0       	rcall	.+0      	; 0x802 <USART_RX_WAIT+0x6>
 802:	cd b7       	in	r28, 0x3d	; 61
 804:	de b7       	in	r29, 0x3e	; 62
 806:	9a 83       	std	Y+2, r25	; 0x02
 808:	89 83       	std	Y+1, r24	; 0x01
    while ( (UCSR0A&0x80) != 0x80 ); /// Wait until it receives something
 80a:	e0 ec       	ldi	r30, 0xC0	; 192
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	88 23       	and	r24, r24
 812:	dc f7       	brge	.-10     	; 0x80a <USART_RX_WAIT+0xe>
        *RX_Data = UDR0; /// After that, read the data register
 814:	e6 ec       	ldi	r30, 0xC6	; 198
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	e9 81       	ldd	r30, Y+1	; 0x01
 81c:	fa 81       	ldd	r31, Y+2	; 0x02
 81e:	80 83       	st	Z, r24
}
 820:	0f 90       	pop	r0
 822:	0f 90       	pop	r0
 824:	cf 91       	pop	r28
 826:	df 91       	pop	r29
 828:	08 95       	ret

0000082a <USART_TX_WAIT>:

void USART_TX_WAIT(uint8_t TX_Data)
{
 82a:	df 93       	push	r29
 82c:	cf 93       	push	r28
 82e:	0f 92       	push	r0
 830:	cd b7       	in	r28, 0x3d	; 61
 832:	de b7       	in	r29, 0x3e	; 62
 834:	89 83       	std	Y+1, r24	; 0x01
    while ( (UCSR0A&0x20) != 0x20 ); /// Wait until TX buffer ready.
 836:	e0 ec       	ldi	r30, 0xC0	; 192
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	80 81       	ld	r24, Z
 83c:	88 2f       	mov	r24, r24
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	80 72       	andi	r24, 0x20	; 32
 842:	90 70       	andi	r25, 0x00	; 0
 844:	00 97       	sbiw	r24, 0x00	; 0
 846:	b9 f3       	breq	.-18     	; 0x836 <USART_TX_WAIT+0xc>
    UDR0 = TX_Data;  /// Send data
 848:	e6 ec       	ldi	r30, 0xC6	; 198
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	89 81       	ldd	r24, Y+1	; 0x01
 84e:	80 83       	st	Z, r24
}
 850:	0f 90       	pop	r0
 852:	cf 91       	pop	r28
 854:	df 91       	pop	r29
 856:	08 95       	ret

00000858 <USART_TX_STRING_WAIT>:

void USART_TX_STRING_WAIT(char s[])
{
 858:	df 93       	push	r29
 85a:	cf 93       	push	r28
 85c:	00 d0       	rcall	.+0      	; 0x85e <USART_TX_STRING_WAIT+0x6>
 85e:	00 d0       	rcall	.+0      	; 0x860 <USART_TX_STRING_WAIT+0x8>
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62
 864:	9c 83       	std	Y+4, r25	; 0x04
 866:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int i=0;
 868:	1a 82       	std	Y+2, r1	; 0x02
 86a:	19 82       	std	Y+1, r1	; 0x01
 86c:	0f c0       	rjmp	.+30     	; 0x88c <USART_TX_STRING_WAIT+0x34>
    while( s[i] != '\0'){
        USART_TX_WAIT(s[i]);
 86e:	2b 81       	ldd	r18, Y+3	; 0x03
 870:	3c 81       	ldd	r19, Y+4	; 0x04
 872:	89 81       	ldd	r24, Y+1	; 0x01
 874:	9a 81       	ldd	r25, Y+2	; 0x02
 876:	f9 01       	movw	r30, r18
 878:	e8 0f       	add	r30, r24
 87a:	f9 1f       	adc	r31, r25
 87c:	80 81       	ld	r24, Z
 87e:	0e 94 15 04 	call	0x82a	; 0x82a <USART_TX_WAIT>
        i++;
 882:	89 81       	ldd	r24, Y+1	; 0x01
 884:	9a 81       	ldd	r25, Y+2	; 0x02
 886:	01 96       	adiw	r24, 0x01	; 1
 888:	9a 83       	std	Y+2, r25	; 0x02
 88a:	89 83       	std	Y+1, r24	; 0x01
}

void USART_TX_STRING_WAIT(char s[])
{
    unsigned int i=0;
    while( s[i] != '\0'){
 88c:	2b 81       	ldd	r18, Y+3	; 0x03
 88e:	3c 81       	ldd	r19, Y+4	; 0x04
 890:	89 81       	ldd	r24, Y+1	; 0x01
 892:	9a 81       	ldd	r25, Y+2	; 0x02
 894:	f9 01       	movw	r30, r18
 896:	e8 0f       	add	r30, r24
 898:	f9 1f       	adc	r31, r25
 89a:	80 81       	ld	r24, Z
 89c:	88 23       	and	r24, r24
 89e:	39 f7       	brne	.-50     	; 0x86e <USART_TX_STRING_WAIT+0x16>
        USART_TX_WAIT(s[i]);
        i++;
    }
    //USART_TX_WAIT('\n');
}
 8a0:	0f 90       	pop	r0
 8a2:	0f 90       	pop	r0
 8a4:	0f 90       	pop	r0
 8a6:	0f 90       	pop	r0
 8a8:	cf 91       	pop	r28
 8aa:	df 91       	pop	r29
 8ac:	08 95       	ret

000008ae <USART_get_flag>:

uint8_t USART_get_flag(void)
{
 8ae:	df 93       	push	r29
 8b0:	cf 93       	push	r28
 8b2:	00 d0       	rcall	.+0      	; 0x8b4 <USART_get_flag+0x6>
 8b4:	cd b7       	in	r28, 0x3d	; 61
 8b6:	de b7       	in	r29, 0x3e	; 62
    uint16_t val = 0;
 8b8:	1a 82       	std	Y+2, r1	; 0x02
 8ba:	19 82       	std	Y+1, r1	; 0x01
    UCSR0B &= ~(1<<RXCIE0); // disable USART RX interrupt
 8bc:	a1 ec       	ldi	r26, 0xC1	; 193
 8be:	b0 e0       	ldi	r27, 0x00	; 0
 8c0:	e1 ec       	ldi	r30, 0xC1	; 193
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	80 81       	ld	r24, Z
 8c6:	8f 77       	andi	r24, 0x7F	; 127
 8c8:	8c 93       	st	X, r24
    val = uart_flag;
 8ca:	80 91 5d 01 	lds	r24, 0x015D
 8ce:	88 2f       	mov	r24, r24
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	9a 83       	std	Y+2, r25	; 0x02
 8d4:	89 83       	std	Y+1, r24	; 0x01
    UCSR0B |= (1<<RXCIE0); // enable
 8d6:	a1 ec       	ldi	r26, 0xC1	; 193
 8d8:	b0 e0       	ldi	r27, 0x00	; 0
 8da:	e1 ec       	ldi	r30, 0xC1	; 193
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	80 81       	ld	r24, Z
 8e0:	80 68       	ori	r24, 0x80	; 128
 8e2:	8c 93       	st	X, r24
    return val;
 8e4:	89 81       	ldd	r24, Y+1	; 0x01
}
 8e6:	0f 90       	pop	r0
 8e8:	0f 90       	pop	r0
 8ea:	cf 91       	pop	r28
 8ec:	df 91       	pop	r29
 8ee:	08 95       	ret

000008f0 <CMD_Head_lib>:
    }// end if
}
*/

uint8_t CMD_Head_lib(char CMD_head[5])
{
 8f0:	df 93       	push	r29
 8f2:	cf 93       	push	r28
 8f4:	00 d0       	rcall	.+0      	; 0x8f6 <CMD_Head_lib+0x6>
 8f6:	0f 92       	push	r0
 8f8:	cd b7       	in	r28, 0x3d	; 61
 8fa:	de b7       	in	r29, 0x3e	; 62
 8fc:	9a 83       	std	Y+2, r25	; 0x02
 8fe:	89 83       	std	Y+1, r24	; 0x01

    if(!strcmp(CMD_head,"TRX_")){       /// Send data
 900:	89 81       	ldd	r24, Y+1	; 0x01
 902:	9a 81       	ldd	r25, Y+2	; 0x02
 904:	22 e1       	ldi	r18, 0x12	; 18
 906:	31 e0       	ldi	r19, 0x01	; 1
 908:	b9 01       	movw	r22, r18
 90a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strcmp>
 90e:	00 97       	sbiw	r24, 0x00	; 0
 910:	19 f4       	brne	.+6      	; 0x918 <__stack+0x19>
        return 0x40;
 912:	80 e4       	ldi	r24, 0x40	; 64
 914:	8b 83       	std	Y+3, r24	; 0x03
 916:	64 c0       	rjmp	.+200    	; 0x9e0 <__stack+0xe1>
    }else if(!strcmp(CMD_head,"TXB_")){ /// (CMD invalid)
 918:	89 81       	ldd	r24, Y+1	; 0x01
 91a:	9a 81       	ldd	r25, Y+2	; 0x02
 91c:	27 e1       	ldi	r18, 0x17	; 23
 91e:	31 e0       	ldi	r19, 0x01	; 1
 920:	b9 01       	movw	r22, r18
 922:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strcmp>
 926:	00 97       	sbiw	r24, 0x00	; 0
 928:	11 f4       	brne	.+4      	; 0x92e <__stack+0x2f>
        return 0;
 92a:	1b 82       	std	Y+3, r1	; 0x03
 92c:	59 c0       	rjmp	.+178    	; 0x9e0 <__stack+0xe1>
    }else if(!strcmp(CMD_head,"STOT")){ /// Stop TEST 1
 92e:	89 81       	ldd	r24, Y+1	; 0x01
 930:	9a 81       	ldd	r25, Y+2	; 0x02
 932:	2c e1       	ldi	r18, 0x1C	; 28
 934:	31 e0       	ldi	r19, 0x01	; 1
 936:	b9 01       	movw	r22, r18
 938:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strcmp>
 93c:	00 97       	sbiw	r24, 0x00	; 0
 93e:	11 f4       	brne	.+4      	; 0x944 <__stack+0x45>
        return 0;
 940:	1b 82       	std	Y+3, r1	; 0x03
 942:	4e c0       	rjmp	.+156    	; 0x9e0 <__stack+0xe1>
    }else if(!strcmp(CMD_head,"SIDL")){ /// (CMD invalid)
 944:	89 81       	ldd	r24, Y+1	; 0x01
 946:	9a 81       	ldd	r25, Y+2	; 0x02
 948:	21 e2       	ldi	r18, 0x21	; 33
 94a:	31 e0       	ldi	r19, 0x01	; 1
 94c:	b9 01       	movw	r22, r18
 94e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strcmp>
 952:	00 97       	sbiw	r24, 0x00	; 0
 954:	11 f4       	brne	.+4      	; 0x95a <__stack+0x5b>
        return 0;
 956:	1b 82       	std	Y+3, r1	; 0x03
 958:	43 c0       	rjmp	.+134    	; 0x9e0 <__stack+0xe1>
    }else if(!strcmp(CMD_head,"CONF")){ /// (CMD invalid)
 95a:	89 81       	ldd	r24, Y+1	; 0x01
 95c:	9a 81       	ldd	r25, Y+2	; 0x02
 95e:	26 e2       	ldi	r18, 0x26	; 38
 960:	31 e0       	ldi	r19, 0x01	; 1
 962:	b9 01       	movw	r22, r18
 964:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strcmp>
 968:	00 97       	sbiw	r24, 0x00	; 0
 96a:	11 f4       	brne	.+4      	; 0x970 <__stack+0x71>
        return 0;
 96c:	1b 82       	std	Y+3, r1	; 0x03
 96e:	38 c0       	rjmp	.+112    	; 0x9e0 <__stack+0xe1>
    }else if(!strcmp(CMD_head,"RESA")){ /// (CMD invalid)
 970:	89 81       	ldd	r24, Y+1	; 0x01
 972:	9a 81       	ldd	r25, Y+2	; 0x02
 974:	2b e2       	ldi	r18, 0x2B	; 43
 976:	31 e0       	ldi	r19, 0x01	; 1
 978:	b9 01       	movw	r22, r18
 97a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strcmp>
 97e:	00 97       	sbiw	r24, 0x00	; 0
 980:	11 f4       	brne	.+4      	; 0x986 <__stack+0x87>
        return 0;
 982:	1b 82       	std	Y+3, r1	; 0x03
 984:	2d c0       	rjmp	.+90     	; 0x9e0 <__stack+0xe1>
    }else if(!strcmp(CMD_head,"RESB")){ /// (CMD invalid)
 986:	89 81       	ldd	r24, Y+1	; 0x01
 988:	9a 81       	ldd	r25, Y+2	; 0x02
 98a:	20 e3       	ldi	r18, 0x30	; 48
 98c:	31 e0       	ldi	r19, 0x01	; 1
 98e:	b9 01       	movw	r22, r18
 990:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strcmp>
 994:	00 97       	sbiw	r24, 0x00	; 0
 996:	11 f4       	brne	.+4      	; 0x99c <__stack+0x9d>
        return 0;
 998:	1b 82       	std	Y+3, r1	; 0x03
 99a:	22 c0       	rjmp	.+68     	; 0x9e0 <__stack+0xe1>
    }else if(!strcmp(CMD_head,"RDC_")){ /// (CMD invalid)
 99c:	89 81       	ldd	r24, Y+1	; 0x01
 99e:	9a 81       	ldd	r25, Y+2	; 0x02
 9a0:	25 e3       	ldi	r18, 0x35	; 53
 9a2:	31 e0       	ldi	r19, 0x01	; 1
 9a4:	b9 01       	movw	r22, r18
 9a6:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strcmp>
 9aa:	00 97       	sbiw	r24, 0x00	; 0
 9ac:	11 f4       	brne	.+4      	; 0x9b2 <__stack+0xb3>
        return 0;
 9ae:	1b 82       	std	Y+3, r1	; 0x03
 9b0:	17 c0       	rjmp	.+46     	; 0x9e0 <__stack+0xe1>
    }else if(!strcmp(CMD_head,"SNOP")){ /// (CMD invalid)
 9b2:	89 81       	ldd	r24, Y+1	; 0x01
 9b4:	9a 81       	ldd	r25, Y+2	; 0x02
 9b6:	2a e3       	ldi	r18, 0x3A	; 58
 9b8:	31 e0       	ldi	r19, 0x01	; 1
 9ba:	b9 01       	movw	r22, r18
 9bc:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strcmp>
 9c0:	00 97       	sbiw	r24, 0x00	; 0
 9c2:	11 f4       	brne	.+4      	; 0x9c8 <__stack+0xc9>
        return 0;
 9c4:	1b 82       	std	Y+3, r1	; 0x03
 9c6:	0c c0       	rjmp	.+24     	; 0x9e0 <__stack+0xe1>
    }else if(!strcmp(CMD_head,"FLFF")){ /// (CMD invalid)
 9c8:	89 81       	ldd	r24, Y+1	; 0x01
 9ca:	9a 81       	ldd	r25, Y+2	; 0x02
 9cc:	2f e3       	ldi	r18, 0x3F	; 63
 9ce:	31 e0       	ldi	r19, 0x01	; 1
 9d0:	b9 01       	movw	r22, r18
 9d2:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strcmp>
 9d6:	00 97       	sbiw	r24, 0x00	; 0
 9d8:	11 f4       	brne	.+4      	; 0x9de <__stack+0xdf>
        return 0;
 9da:	1b 82       	std	Y+3, r1	; 0x03
 9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <__stack+0xe1>
        //return 10;
    //}else if(!strcmp(CMD_head,"RDCB")){ /// read back config regs B
    }else{ /// Unknown Command
        return 0x00;
 9de:	1b 82       	std	Y+3, r1	; 0x03
 9e0:	8b 81       	ldd	r24, Y+3	; 0x03
    }// end if
}
 9e2:	0f 90       	pop	r0
 9e4:	0f 90       	pop	r0
 9e6:	0f 90       	pop	r0
 9e8:	cf 91       	pop	r28
 9ea:	df 91       	pop	r29
 9ec:	08 95       	ret

000009ee <UART_data_parser>:
#endif
*/

#ifdef ENCODER
uint8_t UART_data_parser(uint8_t *byte1, uint8_t *byte2)
{
 9ee:	df 93       	push	r29
 9f0:	cf 93       	push	r28
 9f2:	cd b7       	in	r28, 0x3d	; 61
 9f4:	de b7       	in	r29, 0x3e	; 62
 9f6:	60 97       	sbiw	r28, 0x10	; 16
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	f8 94       	cli
 9fc:	de bf       	out	0x3e, r29	; 62
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	cd bf       	out	0x3d, r28	; 61
 a02:	9d 87       	std	Y+13, r25	; 0x0d
 a04:	8c 87       	std	Y+12, r24	; 0x0c
 a06:	7f 87       	std	Y+15, r23	; 0x0f
 a08:	6e 87       	std	Y+14, r22	; 0x0e
    /// UART message comes in format: "AAA_DD", 3 decimal digit address (0 - 511) and 2 decimal digit data (0 - 15)
    /// This function must transfer it into:
    /// BYTE 1: | 1  0   A8  A7 A6 A5 A4 A3 |
    /// BYTE 2: | 1 !A2 !A1 !A0 D3 D2 D1 D0 |

    uint8_t i=0; // char index
 a0a:	1c 82       	std	Y+4, r1	; 0x04
    char buff_1[4];
    char buff_2[3];
    uint16_t aux1 = 0;
 a0c:	1b 82       	std	Y+3, r1	; 0x03
 a0e:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t aux2 = 0;
 a10:	19 82       	std	Y+1, r1	; 0x01
 a12:	2f c0       	rjmp	.+94     	; 0xa72 <UART_data_parser+0x84>

    while(rx_array[i] != '\0'){
        if(i<3) // 0, 1, 2
 a14:	8c 81       	ldd	r24, Y+4	; 0x04
 a16:	83 30       	cpi	r24, 0x03	; 3
 a18:	90 f4       	brcc	.+36     	; 0xa3e <UART_data_parser+0x50>
            buff_1[i] = rx_array[i];
 a1a:	8c 81       	ldd	r24, Y+4	; 0x04
 a1c:	48 2f       	mov	r20, r24
 a1e:	50 e0       	ldi	r21, 0x00	; 0
 a20:	8c 81       	ldd	r24, Y+4	; 0x04
 a22:	88 2f       	mov	r24, r24
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	fc 01       	movw	r30, r24
 a28:	ef 56       	subi	r30, 0x6F	; 111
 a2a:	fe 4f       	sbci	r31, 0xFE	; 254
 a2c:	80 81       	ld	r24, Z
 a2e:	28 2f       	mov	r18, r24
 a30:	ce 01       	movw	r24, r28
 a32:	05 96       	adiw	r24, 0x05	; 5
 a34:	fc 01       	movw	r30, r24
 a36:	e4 0f       	add	r30, r20
 a38:	f5 1f       	adc	r31, r21
 a3a:	20 83       	st	Z, r18
 a3c:	17 c0       	rjmp	.+46     	; 0xa6c <UART_data_parser+0x7e>
        else if(i>3) // 4, 5
 a3e:	8c 81       	ldd	r24, Y+4	; 0x04
 a40:	84 30       	cpi	r24, 0x04	; 4
 a42:	a0 f0       	brcs	.+40     	; 0xa6c <UART_data_parser+0x7e>
             buff_2[i-4] = rx_array[i];
 a44:	8c 81       	ldd	r24, Y+4	; 0x04
 a46:	88 2f       	mov	r24, r24
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	ac 01       	movw	r20, r24
 a4c:	44 50       	subi	r20, 0x04	; 4
 a4e:	50 40       	sbci	r21, 0x00	; 0
 a50:	8c 81       	ldd	r24, Y+4	; 0x04
 a52:	88 2f       	mov	r24, r24
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	fc 01       	movw	r30, r24
 a58:	ef 56       	subi	r30, 0x6F	; 111
 a5a:	fe 4f       	sbci	r31, 0xFE	; 254
 a5c:	80 81       	ld	r24, Z
 a5e:	28 2f       	mov	r18, r24
 a60:	ce 01       	movw	r24, r28
 a62:	09 96       	adiw	r24, 0x09	; 9
 a64:	fc 01       	movw	r30, r24
 a66:	e4 0f       	add	r30, r20
 a68:	f5 1f       	adc	r31, r21
 a6a:	20 83       	st	Z, r18
        i++;
 a6c:	8c 81       	ldd	r24, Y+4	; 0x04
 a6e:	8f 5f       	subi	r24, 0xFF	; 255
 a70:	8c 83       	std	Y+4, r24	; 0x04
    char buff_1[4];
    char buff_2[3];
    uint16_t aux1 = 0;
    uint8_t aux2 = 0;

    while(rx_array[i] != '\0'){
 a72:	8c 81       	ldd	r24, Y+4	; 0x04
 a74:	88 2f       	mov	r24, r24
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	fc 01       	movw	r30, r24
 a7a:	ef 56       	subi	r30, 0x6F	; 111
 a7c:	fe 4f       	sbci	r31, 0xFE	; 254
 a7e:	80 81       	ld	r24, Z
 a80:	88 23       	and	r24, r24
 a82:	41 f6       	brne	.-112    	; 0xa14 <UART_data_parser+0x26>
        else if(i>3) // 4, 5
             buff_2[i-4] = rx_array[i];
        i++;
    }

    if(i == 6){ /// Correct num. of chars in the message
 a84:	8c 81       	ldd	r24, Y+4	; 0x04
 a86:	86 30       	cpi	r24, 0x06	; 6
 a88:	59 f5       	brne	.+86     	; 0xae0 <UART_data_parser+0xf2>
        aux1 = atoi(buff_1); /// | 0 0 0 0 0 0 0 A8 A7 A6 A5 A4 A3 A2 A1 A0 |
 a8a:	ce 01       	movw	r24, r28
 a8c:	05 96       	adiw	r24, 0x05	; 5
 a8e:	0e 94 81 05 	call	0xb02	; 0xb02 <atoi>
 a92:	9b 83       	std	Y+3, r25	; 0x03
 a94:	8a 83       	std	Y+2, r24	; 0x02
        aux2 = atoi(buff_2); /// | 0 0 0 0 D3 D2 D1 D0 |
 a96:	ce 01       	movw	r24, r28
 a98:	09 96       	adiw	r24, 0x09	; 9
 a9a:	0e 94 81 05 	call	0xb02	; 0xb02 <atoi>
 a9e:	89 83       	std	Y+1, r24	; 0x01
        aux2 |= ( ~((aux1&0x0007)<<4) )&0x00F0; /// | 1 !A2 !A1 !A0 D3 D2 D1 D0 |
 aa0:	8a 81       	ldd	r24, Y+2	; 0x02
 aa2:	87 70       	andi	r24, 0x07	; 7
 aa4:	82 95       	swap	r24
 aa6:	80 7f       	andi	r24, 0xF0	; 240
 aa8:	80 95       	com	r24
 aaa:	98 2f       	mov	r25, r24
 aac:	90 7f       	andi	r25, 0xF0	; 240
 aae:	89 81       	ldd	r24, Y+1	; 0x01
 ab0:	89 2b       	or	r24, r25
 ab2:	89 83       	std	Y+1, r24	; 0x01
        *byte2 = aux2; ///  2nd BYTE DONE
 ab4:	ee 85       	ldd	r30, Y+14	; 0x0e
 ab6:	ff 85       	ldd	r31, Y+15	; 0x0f
 ab8:	89 81       	ldd	r24, Y+1	; 0x01
 aba:	80 83       	st	Z, r24
        aux2 = ((aux1>>3)&0x3F)|0x80; /// | 1  0  A8 A7 A6 A5 A4 A3 |
 abc:	8a 81       	ldd	r24, Y+2	; 0x02
 abe:	9b 81       	ldd	r25, Y+3	; 0x03
 ac0:	96 95       	lsr	r25
 ac2:	87 95       	ror	r24
 ac4:	96 95       	lsr	r25
 ac6:	87 95       	ror	r24
 ac8:	96 95       	lsr	r25
 aca:	87 95       	ror	r24
 acc:	8f 73       	andi	r24, 0x3F	; 63
 ace:	80 68       	ori	r24, 0x80	; 128
 ad0:	89 83       	std	Y+1, r24	; 0x01
        *byte1 = aux2; ///  1st BYTE DONE
 ad2:	ec 85       	ldd	r30, Y+12	; 0x0c
 ad4:	fd 85       	ldd	r31, Y+13	; 0x0d
 ad6:	89 81       	ldd	r24, Y+1	; 0x01
 ad8:	80 83       	st	Z, r24

        return 0x01;
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	88 8b       	std	Y+16, r24	; 0x10
 ade:	07 c0       	rjmp	.+14     	; 0xaee <UART_data_parser+0x100>
    }else{
        *byte1 = 0;
 ae0:	ec 85       	ldd	r30, Y+12	; 0x0c
 ae2:	fd 85       	ldd	r31, Y+13	; 0x0d
 ae4:	10 82       	st	Z, r1
        *byte2 = 0;
 ae6:	ee 85       	ldd	r30, Y+14	; 0x0e
 ae8:	ff 85       	ldd	r31, Y+15	; 0x0f
 aea:	10 82       	st	Z, r1
        return 0x00;
 aec:	18 8a       	std	Y+16, r1	; 0x10
 aee:	88 89       	ldd	r24, Y+16	; 0x10
    }

}
 af0:	60 96       	adiw	r28, 0x10	; 16
 af2:	0f b6       	in	r0, 0x3f	; 63
 af4:	f8 94       	cli
 af6:	de bf       	out	0x3e, r29	; 62
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	cd bf       	out	0x3d, r28	; 61
 afc:	cf 91       	pop	r28
 afe:	df 91       	pop	r29
 b00:	08 95       	ret

00000b02 <atoi>:
 b02:	fc 01       	movw	r30, r24
 b04:	88 27       	eor	r24, r24
 b06:	99 27       	eor	r25, r25
 b08:	e8 94       	clt
 b0a:	21 91       	ld	r18, Z+
 b0c:	20 32       	cpi	r18, 0x20	; 32
 b0e:	e9 f3       	breq	.-6      	; 0xb0a <atoi+0x8>
 b10:	29 30       	cpi	r18, 0x09	; 9
 b12:	10 f0       	brcs	.+4      	; 0xb18 <atoi+0x16>
 b14:	2e 30       	cpi	r18, 0x0E	; 14
 b16:	c8 f3       	brcs	.-14     	; 0xb0a <atoi+0x8>
 b18:	2b 32       	cpi	r18, 0x2B	; 43
 b1a:	41 f0       	breq	.+16     	; 0xb2c <atoi+0x2a>
 b1c:	2d 32       	cpi	r18, 0x2D	; 45
 b1e:	39 f4       	brne	.+14     	; 0xb2e <atoi+0x2c>
 b20:	68 94       	set
 b22:	04 c0       	rjmp	.+8      	; 0xb2c <atoi+0x2a>
 b24:	0e 94 af 05 	call	0xb5e	; 0xb5e <__mulhi_const_10>
 b28:	82 0f       	add	r24, r18
 b2a:	91 1d       	adc	r25, r1
 b2c:	21 91       	ld	r18, Z+
 b2e:	20 53       	subi	r18, 0x30	; 48
 b30:	2a 30       	cpi	r18, 0x0A	; 10
 b32:	c0 f3       	brcs	.-16     	; 0xb24 <atoi+0x22>
 b34:	1e f4       	brtc	.+6      	; 0xb3c <atoi+0x3a>
 b36:	90 95       	com	r25
 b38:	81 95       	neg	r24
 b3a:	9f 4f       	sbci	r25, 0xFF	; 255
 b3c:	08 95       	ret

00000b3e <memset>:
 b3e:	dc 01       	movw	r26, r24
 b40:	01 c0       	rjmp	.+2      	; 0xb44 <memset+0x6>
 b42:	6d 93       	st	X+, r22
 b44:	41 50       	subi	r20, 0x01	; 1
 b46:	50 40       	sbci	r21, 0x00	; 0
 b48:	e0 f7       	brcc	.-8      	; 0xb42 <memset+0x4>
 b4a:	08 95       	ret

00000b4c <strcmp>:
 b4c:	fb 01       	movw	r30, r22
 b4e:	dc 01       	movw	r26, r24
 b50:	8d 91       	ld	r24, X+
 b52:	01 90       	ld	r0, Z+
 b54:	80 19       	sub	r24, r0
 b56:	01 10       	cpse	r0, r1
 b58:	d9 f3       	breq	.-10     	; 0xb50 <strcmp+0x4>
 b5a:	99 0b       	sbc	r25, r25
 b5c:	08 95       	ret

00000b5e <__mulhi_const_10>:
 b5e:	7a e0       	ldi	r23, 0x0A	; 10
 b60:	97 9f       	mul	r25, r23
 b62:	90 2d       	mov	r25, r0
 b64:	87 9f       	mul	r24, r23
 b66:	80 2d       	mov	r24, r0
 b68:	91 0d       	add	r25, r1
 b6a:	11 24       	eor	r1, r1
 b6c:	08 95       	ret

00000b6e <_exit>:
 b6e:	f8 94       	cli

00000b70 <__stop_program>:
 b70:	ff cf       	rjmp	.-2      	; 0xb70 <__stop_program>
