
bin\Debug\ArdNano_DCC_project_v4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00001a52  00001b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a52  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800190  00800190  00001b96  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001b96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000c0  00000000  00000000  00001b99  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000033f  00000000  00000000  00001c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009eb  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004c0  00000000  00000000  00002983  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011e4  00000000  00000000  00002e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00004028  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040c  00000000  00000000  00004248  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e5       	ldi	r30, 0x52	; 82
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 39       	cpi	r26, 0x90	; 144
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e9       	ldi	r26, 0x90	; 144
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 3d       	cpi	r26, 0xDD	; 221
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <main>
      9e:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DCC_DECODER_Pin_Setup>:
#endif // ENCODER

#ifdef DECODER

void DCC_DECODER_Pin_Setup(void)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
    /// DCC Interface Pins:
    DDRDCC &= ~(1<<DCC_RX_PIN); /// EXT interrupt pin (is overriden into the INT0 function)
      ae:	aa e2       	ldi	r26, 0x2A	; 42
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	ea e2       	ldi	r30, 0x2A	; 42
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	8b 7f       	andi	r24, 0xFB	; 251
      ba:	8c 93       	st	X, r24
    /// Decoder control jumpers:
    DDR_CTRL &= ~((1<<CTRL_PIN0)|(1<<CTRL_PIN1)); /// Input pins
      bc:	aa e2       	ldi	r26, 0x2A	; 42
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	ea e2       	ldi	r30, 0x2A	; 42
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	87 7e       	andi	r24, 0xE7	; 231
      c8:	8c 93       	st	X, r24
    PORT_CTRL &= ~((1<<CTRL_PIN0)|(1<<CTRL_PIN1)); /// No pullup
      ca:	ab e2       	ldi	r26, 0x2B	; 43
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	eb e2       	ldi	r30, 0x2B	; 43
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	87 7e       	andi	r24, 0xE7	; 231
      d6:	8c 93       	st	X, r24
    //DDRB |= (1<<PIN5);
    //PORTB &= ~(1<<PIN5);//debug pin
    DDRB |= (1<<LEDx_PIN); /// IDLE Blink Led OUT
      d8:	a4 e2       	ldi	r26, 0x24	; 36
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e4 e2       	ldi	r30, 0x24	; 36
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	80 62       	ori	r24, 0x20	; 32
      e4:	8c 93       	st	X, r24
    PORTB &= ~(1<<LEDx_PIN);
      e6:	a5 e2       	ldi	r26, 0x25	; 37
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e5 e2       	ldi	r30, 0x25	; 37
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	8f 7d       	andi	r24, 0xDF	; 223
      f2:	8c 93       	st	X, r24
}
      f4:	cf 91       	pop	r28
      f6:	df 91       	pop	r29
      f8:	08 95       	ret

000000fa <DCC_ModeSetup>:

uint8_t DCC_ModeSetup(void)
{
      fa:	df 93       	push	r29
      fc:	cf 93       	push	r28
      fe:	00 d0       	rcall	.+0      	; 0x100 <DCC_ModeSetup+0x6>
     100:	0f 92       	push	r0
     102:	cd b7       	in	r28, 0x3d	; 61
     104:	de b7       	in	r29, 0x3e	; 62
    /// DCC decoder mode selection (jumpers):
    if( (PIN_CTRL&(1<<CTRL_PIN0))&&(PIN_CTRL&(1<<CTRL_PIN1)) ){ /// both jumpers == 1
     106:	e9 e2       	ldi	r30, 0x29	; 41
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	88 2f       	mov	r24, r24
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	88 70       	andi	r24, 0x08	; 8
     112:	90 70       	andi	r25, 0x00	; 0
     114:	00 97       	sbiw	r24, 0x00	; 0
     116:	81 f0       	breq	.+32     	; 0x138 <DCC_ModeSetup+0x3e>
     118:	e9 e2       	ldi	r30, 0x29	; 41
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	80 81       	ld	r24, Z
     11e:	88 2f       	mov	r24, r24
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	80 71       	andi	r24, 0x10	; 16
     124:	90 70       	andi	r25, 0x00	; 0
     126:	00 97       	sbiw	r24, 0x00	; 0
     128:	39 f0       	breq	.+14     	; 0x138 <DCC_ModeSetup+0x3e>
        /// Entrance mode enabled:

        #ifdef UART_TERM
        USART_TX_STRING_WAIT("DCC DECODER - Entrance\n");
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	0e 94 0e 0c 	call	0x181c	; 0x181c <USART_TX_STRING_WAIT>
        #endif // UART_TERM
        return 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	8b 83       	std	Y+3, r24	; 0x03
     136:	28 c0       	rjmp	.+80     	; 0x188 <DCC_ModeSetup+0x8e>

    }else if( ((PIN_CTRL&(1<<CTRL_PIN0))||(PIN_CTRL&(1<<CTRL_PIN1))) == 0 ){ /// both jumpers == 0
     138:	e9 e2       	ldi	r30, 0x29	; 41
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	88 2f       	mov	r24, r24
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	88 70       	andi	r24, 0x08	; 8
     144:	90 70       	andi	r25, 0x00	; 0
     146:	00 97       	sbiw	r24, 0x00	; 0
     148:	49 f4       	brne	.+18     	; 0x15c <DCC_ModeSetup+0x62>
     14a:	e9 e2       	ldi	r30, 0x29	; 41
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	80 81       	ld	r24, Z
     150:	88 2f       	mov	r24, r24
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	80 71       	andi	r24, 0x10	; 16
     156:	90 70       	andi	r25, 0x00	; 0
     158:	00 97       	sbiw	r24, 0x00	; 0
     15a:	29 f0       	breq	.+10     	; 0x166 <DCC_ModeSetup+0x6c>
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	9a 83       	std	Y+2, r25	; 0x02
     162:	89 83       	std	Y+1, r24	; 0x01
     164:	02 c0       	rjmp	.+4      	; 0x16a <DCC_ModeSetup+0x70>
     166:	1a 82       	std	Y+2, r1	; 0x02
     168:	19 82       	std	Y+1, r1	; 0x01
     16a:	89 81       	ldd	r24, Y+1	; 0x01
     16c:	9a 81       	ldd	r25, Y+2	; 0x02
     16e:	00 97       	sbiw	r24, 0x00	; 0
     170:	31 f4       	brne	.+12     	; 0x17e <DCC_ModeSetup+0x84>
        /// Station mode enabled:
        #ifdef UART_TERM
        USART_TX_STRING_WAIT("DCC DECODER - Station\n");
     172:	88 e1       	ldi	r24, 0x18	; 24
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	0e 94 0e 0c 	call	0x181c	; 0x181c <USART_TX_STRING_WAIT>
        #endif // UART_TERM
        return 0;
     17a:	1b 82       	std	Y+3, r1	; 0x03
     17c:	05 c0       	rjmp	.+10     	; 0x188 <DCC_ModeSetup+0x8e>

    }else{
        /// Station mode enabled:
        #ifdef UART_TERM
        USART_TX_STRING_WAIT("DCC DECODER - Undefined mode\n");
     17e:	8f e2       	ldi	r24, 0x2F	; 47
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	0e 94 0e 0c 	call	0x181c	; 0x181c <USART_TX_STRING_WAIT>
        #endif // UART_TERM
        return 0;
     186:	1b 82       	std	Y+3, r1	; 0x03
     188:	8b 81       	ldd	r24, Y+3	; 0x03
    }

}
     18a:	0f 90       	pop	r0
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	cf 91       	pop	r28
     192:	df 91       	pop	r29
     194:	08 95       	ret

00000196 <DCC_DECODER_LED_Pin_Setup>:

void DCC_DECODER_LED_Pin_Setup(uint8_t mode)
{
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	0f 92       	push	r0
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
     1a0:	89 83       	std	Y+1, r24	; 0x01
    if(mode ==0){
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	88 23       	and	r24, r24
     1a6:	71 f4       	brne	.+28     	; 0x1c4 <DCC_DECODER_LED_Pin_Setup+0x2e>
        /// Station mode:
        DDRLED0 |= (1<<LED0_PIN)|(1<<LED1_PIN)|(1<<LED2_PIN)|(1<<LED3_PIN);   // output
     1a8:	a7 e2       	ldi	r26, 0x27	; 39
     1aa:	b0 e0       	ldi	r27, 0x00	; 0
     1ac:	e7 e2       	ldi	r30, 0x27	; 39
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	80 81       	ld	r24, Z
     1b2:	8f 60       	ori	r24, 0x0F	; 15
     1b4:	8c 93       	st	X, r24
        PORTLED0 |=((1<<LED0_PIN)|(1<<LED1_PIN)|(1<<LED2_PIN)|(1<<LED3_PIN)); // LEDs OFF (common anode)
     1b6:	a8 e2       	ldi	r26, 0x28	; 40
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	e8 e2       	ldi	r30, 0x28	; 40
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	8f 60       	ori	r24, 0x0F	; 15
     1c2:	8c 93       	st	X, r24
    }

    DDRLED0 |= (1<<LED4_PIN)|(1<<LED5_PIN);   // output
     1c4:	a7 e2       	ldi	r26, 0x27	; 39
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	e7 e2       	ldi	r30, 0x27	; 39
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 63       	ori	r24, 0x30	; 48
     1d0:	8c 93       	st	X, r24
    PORTLED0 |=((1<<LED4_PIN)|(1<<LED5_PIN)); // LEDs OFF (common anode)
     1d2:	a8 e2       	ldi	r26, 0x28	; 40
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	e8 e2       	ldi	r30, 0x28	; 40
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	80 63       	ori	r24, 0x30	; 48
     1de:	8c 93       	st	X, r24

    DDRLED1 |= (1<<LED6_PIN)|(1<<LED7_PIN)|(1<<LED8_PIN);   // output
     1e0:	a4 e2       	ldi	r26, 0x24	; 36
     1e2:	b0 e0       	ldi	r27, 0x00	; 0
     1e4:	e4 e2       	ldi	r30, 0x24	; 36
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	8c 61       	ori	r24, 0x1C	; 28
     1ec:	8c 93       	st	X, r24
    PORTLED1 |=((1<<LED6_PIN)|(1<<LED7_PIN)|(1<<LED8_PIN)); // LEDs OFF (common anode)
     1ee:	a5 e2       	ldi	r26, 0x25	; 37
     1f0:	b0 e0       	ldi	r27, 0x00	; 0
     1f2:	e5 e2       	ldi	r30, 0x25	; 37
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	8c 61       	ori	r24, 0x1C	; 28
     1fa:	8c 93       	st	X, r24
    DDRLED1 |= (1<<LED9_PIN)|(1<<LED10_PIN);   // output
     1fc:	a4 e2       	ldi	r26, 0x24	; 36
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	e4 e2       	ldi	r30, 0x24	; 36
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	83 60       	ori	r24, 0x03	; 3
     208:	8c 93       	st	X, r24
    PORTLED1 |=((1<<LED9_PIN)|(1<<LED10_PIN)); // LEDs OFF (common anode)
     20a:	a5 e2       	ldi	r26, 0x25	; 37
     20c:	b0 e0       	ldi	r27, 0x00	; 0
     20e:	e5 e2       	ldi	r30, 0x25	; 37
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	83 60       	ori	r24, 0x03	; 3
     216:	8c 93       	st	X, r24

    DDRLED2 |= (1<<LED11_PIN)|(1<<LED12_PIN);   // output
     218:	aa e2       	ldi	r26, 0x2A	; 42
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	ea e2       	ldi	r30, 0x2A	; 42
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	80 6c       	ori	r24, 0xC0	; 192
     224:	8c 93       	st	X, r24
    PORTLED2 |=((1<<LED11_PIN)|(1<<LED12_PIN)); // LEDs OFF (common anode)
     226:	ab e2       	ldi	r26, 0x2B	; 43
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	eb e2       	ldi	r30, 0x2B	; 43
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	80 6c       	ori	r24, 0xC0	; 192
     232:	8c 93       	st	X, r24
}
     234:	0f 90       	pop	r0
     236:	cf 91       	pop	r28
     238:	df 91       	pop	r29
     23a:	08 95       	ret

0000023c <INT0_get_value>:

uint8_t INT0_get_value(void)
{
     23c:	df 93       	push	r29
     23e:	cf 93       	push	r28
     240:	00 d0       	rcall	.+0      	; 0x242 <INT0_get_value+0x6>
     242:	cd b7       	in	r28, 0x3d	; 61
     244:	de b7       	in	r29, 0x3e	; 62
    uint16_t val = 0;
     246:	1a 82       	std	Y+2, r1	; 0x02
     248:	19 82       	std	Y+1, r1	; 0x01
    /* Disable interrupt for correct
    reading of the sys_tick 32-bit value*/
    EIMSK &= ~(1<< INT0); //disable ext INT0
     24a:	ad e3       	ldi	r26, 0x3D	; 61
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	ed e3       	ldi	r30, 0x3D	; 61
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	8e 7f       	andi	r24, 0xFE	; 254
     256:	8c 93       	st	X, r24
    val = int0_flag; // read global variable
     258:	80 91 9c 01 	lds	r24, 0x019C
     25c:	88 2f       	mov	r24, r24
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	9a 83       	std	Y+2, r25	; 0x02
     262:	89 83       	std	Y+1, r24	; 0x01
    /* Enable the timer interrupt */
    EIMSK |= (1<< INT0);  //enable ext INT0
     264:	ad e3       	ldi	r26, 0x3D	; 61
     266:	b0 e0       	ldi	r27, 0x00	; 0
     268:	ed e3       	ldi	r30, 0x3D	; 61
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	81 60       	ori	r24, 0x01	; 1
     270:	8c 93       	st	X, r24
    return val;
     272:	89 81       	ldd	r24, Y+1	; 0x01
}
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	cf 91       	pop	r28
     27a:	df 91       	pop	r29
     27c:	08 95       	ret

0000027e <DCC_DECODER_MainFCN>:

void DCC_DECODER_MainFCN(uint8_t dcc_decoder_mode)
{
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	2e 97       	sbiw	r28, 0x0e	; 14
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61
     292:	8e 87       	std	Y+14, r24	; 0x0e
    static uint8_t dcc_preamble_valid = 0; ///
    static uint8_t dcc_AddressByte = 0;
    static uint8_t dcc_DataByte = 0;
    static uint8_t dcc_ErrDetByte = 0;
    static uint8_t light_addr = 0;
    uint16_t dcc_addr16 = 0x0000;
     294:	1b 82       	std	Y+3, r1	; 0x03
     296:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t dcc_addr_aux = 0;
     298:	19 82       	std	Y+1, r1	; 0x01
    /// THe ERRCHECK equals bitwise XOR of DATABYTE and ADDRBYTE.


/// ================================= RX BIT TIMING RECOGNITION =================================================
    /// Check if the bit timing corresponds to the DCC standard.
    if(int0_flag_f != INT0_get_value()){
     29a:	0e 94 1e 01 	call	0x23c	; 0x23c <INT0_get_value>
     29e:	98 2f       	mov	r25, r24
     2a0:	80 91 99 01 	lds	r24, 0x0199
     2a4:	98 17       	cp	r25, r24
     2a6:	09 f4       	brne	.+2      	; 0x2aa <DCC_DECODER_MainFCN+0x2c>
     2a8:	b4 c1       	rjmp	.+872    	; 0x612 <DCC_DECODER_MainFCN+0x394>
        int0_flag_f = INT0_get_value();
     2aa:	0e 94 1e 01 	call	0x23c	; 0x23c <INT0_get_value>
     2ae:	80 93 99 01 	sts	0x0199, r24

        if(odd_edge==1){/// DCC_RX pin ODD edge event
     2b2:	80 91 9d 01 	lds	r24, 0x019D
     2b6:	81 30       	cpi	r24, 0x01	; 1
     2b8:	09 f0       	breq	.+2      	; 0x2bc <DCC_DECODER_MainFCN+0x3e>
     2ba:	ab c1       	rjmp	.+854    	; 0x612 <DCC_DECODER_MainFCN+0x394>
            timer1_stamp[1] = timer1_stamp[1] - timer1_stamp[0]; /// The result is POSITIVE. = Second half of the RX bit
     2bc:	20 91 d4 01 	lds	r18, 0x01D4
     2c0:	30 91 d5 01 	lds	r19, 0x01D5
     2c4:	80 91 d2 01 	lds	r24, 0x01D2
     2c8:	90 91 d3 01 	lds	r25, 0x01D3
     2cc:	a9 01       	movw	r20, r18
     2ce:	48 1b       	sub	r20, r24
     2d0:	59 0b       	sbc	r21, r25
     2d2:	ca 01       	movw	r24, r20
     2d4:	90 93 d5 01 	sts	0x01D5, r25
     2d8:	80 93 d4 01 	sts	0x01D4, r24

            /// ========== Impulse duration measurements ( BIT CLASSIFICATION ) =============================
            if(DCC_BitLength() == 0x81){
     2dc:	0e 94 bc 03 	call	0x778	; 0x778 <DCC_BitLength>
     2e0:	81 38       	cpi	r24, 0x81	; 129
     2e2:	21 f4       	brne	.+8      	; 0x2ec <DCC_DECODER_MainFCN+0x6e>
                /// RX BIT is the "ONE" bit
                dcc_rx_bit = 0x01;
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	80 93 98 01 	sts	0x0198, r24
     2ea:	1c c0       	rjmp	.+56     	; 0x324 <DCC_DECODER_MainFCN+0xa6>
            }else if(DCC_BitLength() == 0x80){
     2ec:	0e 94 bc 03 	call	0x778	; 0x778 <DCC_BitLength>
     2f0:	80 38       	cpi	r24, 0x80	; 128
     2f2:	19 f4       	brne	.+6      	; 0x2fa <DCC_DECODER_MainFCN+0x7c>
                /// RX BIT is the "ZERO" bit
                dcc_rx_bit = 0x00;
     2f4:	10 92 98 01 	sts	0x0198, r1
     2f8:	15 c0       	rjmp	.+42     	; 0x324 <DCC_DECODER_MainFCN+0xa6>
            }else if(DCC_BitLength() == 0x88){
     2fa:	0e 94 bc 03 	call	0x778	; 0x778 <DCC_BitLength>
     2fe:	88 38       	cpi	r24, 0x88	; 136
     300:	71 f4       	brne	.+28     	; 0x31e <DCC_DECODER_MainFCN+0xa0>
                /// "EVEN" EDGE DETECTION
                odd_edge = 0; /// The decoder becomes sensitive to the other pulse edge from now on.
     302:	10 92 9d 01 	sts	0x019D, r1
                timer1_stamp[0] = timer1_stamp[1];
     306:	80 91 d4 01 	lds	r24, 0x01D4
     30a:	90 91 d5 01 	lds	r25, 0x01D5
     30e:	90 93 d3 01 	sts	0x01D3, r25
     312:	80 93 d2 01 	sts	0x01D2, r24
                dcc_rx_bit = 0x01;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	80 93 98 01 	sts	0x0198, r24
     31c:	03 c0       	rjmp	.+6      	; 0x324 <DCC_DECODER_MainFCN+0xa6>
            }else{
                /// Bit INVALID (too short or too long)
                dcc_rx_bit = 0x80;
     31e:	80 e8       	ldi	r24, 0x80	; 128
     320:	80 93 98 01 	sts	0x0198, r24
            }/// endif

            ///  =============== DCC Finite State Machine ==========================
            if(dcc_state == 1){ /// ================= PREAMBLE ======================
     324:	80 91 4d 01 	lds	r24, 0x014D
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	91 f5       	brne	.+100    	; 0x390 <DCC_DECODER_MainFCN+0x112>

                if(dcc_preamble_valid == 0){
     32c:	80 91 96 01 	lds	r24, 0x0196
     330:	88 23       	and	r24, r24
     332:	c1 f4       	brne	.+48     	; 0x364 <DCC_DECODER_MainFCN+0xe6>
                    if(dcc_rx_bit_cnt >= DCC_PREAMB_MIN){
     334:	80 91 97 01 	lds	r24, 0x0197
     338:	8a 30       	cpi	r24, 0x0A	; 10
     33a:	20 f0       	brcs	.+8      	; 0x344 <DCC_DECODER_MainFCN+0xc6>
                        dcc_preamble_valid = 1;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 96 01 	sts	0x0196, r24
     342:	67 c1       	rjmp	.+718    	; 0x612 <DCC_DECODER_MainFCN+0x394>
                        //PORTB |= (1<<PIN5);
                    }else{
                        //PORTB &= ~(1<<PIN5);
                        if(dcc_rx_bit == 1){
     344:	80 91 98 01 	lds	r24, 0x0198
     348:	81 30       	cpi	r24, 0x01	; 1
     34a:	31 f4       	brne	.+12     	; 0x358 <DCC_DECODER_MainFCN+0xda>
                            dcc_rx_bit_cnt++;
     34c:	80 91 97 01 	lds	r24, 0x0197
     350:	8f 5f       	subi	r24, 0xFF	; 255
     352:	80 93 97 01 	sts	0x0197, r24
     356:	5d c1       	rjmp	.+698    	; 0x612 <DCC_DECODER_MainFCN+0x394>
                        }else{
                            /// ERROR, PREAMBLE TERMINATED BUT NOT COMPLETED!
                            dcc_rx_bit_cnt = 0; ///
     358:	10 92 97 01 	sts	0x0197, r1
                            dcc_state =1;/// Go back to Preamble state
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	80 93 4d 01 	sts	0x014D, r24
     362:	57 c1       	rjmp	.+686    	; 0x612 <DCC_DECODER_MainFCN+0x394>
                        }
                    }
                }else{
                    /// Preamble > minimal length. Wait for the PKT Start Bit.
                    if(dcc_rx_bit == 0){ /// PREAMBLE TERMINATED
     364:	80 91 98 01 	lds	r24, 0x0198
     368:	88 23       	and	r24, r24
     36a:	41 f4       	brne	.+16     	; 0x37c <DCC_DECODER_MainFCN+0xfe>
                        dcc_state = 2; /// Go to Address Byte reception state
     36c:	82 e0       	ldi	r24, 0x02	; 2
     36e:	80 93 4d 01 	sts	0x014D, r24
                        dcc_rx_bit_cnt = 0;
     372:	10 92 97 01 	sts	0x0197, r1
                        dcc_preamble_valid = 0;
     376:	10 92 96 01 	sts	0x0196, r1
     37a:	4b c1       	rjmp	.+662    	; 0x612 <DCC_DECODER_MainFCN+0x394>
                    }else if(dcc_rx_bit == 1){
     37c:	80 91 98 01 	lds	r24, 0x0198
     380:	81 30       	cpi	r24, 0x01	; 1
     382:	09 f4       	brne	.+2      	; 0x386 <DCC_DECODER_MainFCN+0x108>
     384:	46 c1       	rjmp	.+652    	; 0x612 <DCC_DECODER_MainFCN+0x394>
                        /// PREAMBLE duration is > Minimum, but still running... wait for the PKT Start Bit.
                    }else{
                        /// Invalid Bit timing (the pulse duration doesn't correspond to the DCC standard)
                        dcc_rx_bit_cnt = 0;
     386:	10 92 97 01 	sts	0x0197, r1
                        dcc_preamble_valid = 0;
     38a:	10 92 96 01 	sts	0x0196, r1
     38e:	41 c1       	rjmp	.+642    	; 0x612 <DCC_DECODER_MainFCN+0x394>
                    }
                }

            }else if(dcc_state == 2){ /// =================== Address Byte ======================
     390:	80 91 4d 01 	lds	r24, 0x014D
     394:	82 30       	cpi	r24, 0x02	; 2
     396:	b1 f5       	brne	.+108    	; 0x404 <DCC_DECODER_MainFCN+0x186>
                if(dcc_rx_bit_cnt < 8){
     398:	80 91 97 01 	lds	r24, 0x0197
     39c:	88 30       	cpi	r24, 0x08	; 8
     39e:	10 f5       	brcc	.+68     	; 0x3e4 <DCC_DECODER_MainFCN+0x166>
                    if(dcc_rx_bit == 1)
     3a0:	80 91 98 01 	lds	r24, 0x0198
     3a4:	81 30       	cpi	r24, 0x01	; 1
     3a6:	c1 f4       	brne	.+48     	; 0x3d8 <DCC_DECODER_MainFCN+0x15a>
                        dcc_AddressByte |= (1 << (7-dcc_rx_bit_cnt));
     3a8:	80 91 97 01 	lds	r24, 0x0197
     3ac:	28 2f       	mov	r18, r24
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	87 e0       	ldi	r24, 0x07	; 7
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	ac 01       	movw	r20, r24
     3b6:	42 1b       	sub	r20, r18
     3b8:	53 0b       	sbc	r21, r19
     3ba:	9a 01       	movw	r18, r20
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	02 2e       	mov	r0, r18
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DCC_DECODER_MainFCN+0x14a>
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	0a 94       	dec	r0
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DCC_DECODER_MainFCN+0x146>
     3cc:	98 2f       	mov	r25, r24
     3ce:	80 91 95 01 	lds	r24, 0x0195
     3d2:	89 2b       	or	r24, r25
     3d4:	80 93 95 01 	sts	0x0195, r24
                    dcc_rx_bit_cnt++;
     3d8:	80 91 97 01 	lds	r24, 0x0197
     3dc:	8f 5f       	subi	r24, 0xFF	; 255
     3de:	80 93 97 01 	sts	0x0197, r24
     3e2:	17 c1       	rjmp	.+558    	; 0x612 <DCC_DECODER_MainFCN+0x394>
                    //PORTB &= ~(1<<PIN5);
                }else{
                    ///the whole address byte has been received. Wait for the addr termination ZERO bit.
                    if(dcc_rx_bit == 0){
     3e4:	80 91 98 01 	lds	r24, 0x0198
     3e8:	88 23       	and	r24, r24
     3ea:	31 f4       	brne	.+12     	; 0x3f8 <DCC_DECODER_MainFCN+0x17a>
                        /// Data Start bit
                        dcc_state = 3; /// Go to Data byte state
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	80 93 4d 01 	sts	0x014D, r24
                        dcc_rx_bit_cnt = 0;
     3f2:	10 92 97 01 	sts	0x0197, r1
     3f6:	0d c1       	rjmp	.+538    	; 0x612 <DCC_DECODER_MainFCN+0x394>
                        //PORTB |= (1<<PIN5);
                    }else{
                        /// ERROR!!! It received "ONE" instead of "ZERO" bit
                        dcc_state = 1; /// Go back to preamble state
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 93 4d 01 	sts	0x014D, r24
                        dcc_rx_bit_cnt = 0;
     3fe:	10 92 97 01 	sts	0x0197, r1
     402:	07 c1       	rjmp	.+526    	; 0x612 <DCC_DECODER_MainFCN+0x394>
                    }
                }

            }else if(dcc_state == 3){ ///==================== Data Byte ========================
     404:	80 91 4d 01 	lds	r24, 0x014D
     408:	83 30       	cpi	r24, 0x03	; 3
     40a:	b1 f5       	brne	.+108    	; 0x478 <DCC_DECODER_MainFCN+0x1fa>
                if(dcc_rx_bit_cnt < 8){
     40c:	80 91 97 01 	lds	r24, 0x0197
     410:	88 30       	cpi	r24, 0x08	; 8
     412:	10 f5       	brcc	.+68     	; 0x458 <DCC_DECODER_MainFCN+0x1da>
                    if(dcc_rx_bit == 1)
     414:	80 91 98 01 	lds	r24, 0x0198
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	c1 f4       	brne	.+48     	; 0x44c <DCC_DECODER_MainFCN+0x1ce>
                        dcc_DataByte |= (1 << (7-dcc_rx_bit_cnt));
     41c:	80 91 97 01 	lds	r24, 0x0197
     420:	28 2f       	mov	r18, r24
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	87 e0       	ldi	r24, 0x07	; 7
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	ac 01       	movw	r20, r24
     42a:	42 1b       	sub	r20, r18
     42c:	53 0b       	sbc	r21, r19
     42e:	9a 01       	movw	r18, r20
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	02 2e       	mov	r0, r18
     436:	02 c0       	rjmp	.+4      	; 0x43c <DCC_DECODER_MainFCN+0x1be>
     438:	88 0f       	add	r24, r24
     43a:	99 1f       	adc	r25, r25
     43c:	0a 94       	dec	r0
     43e:	e2 f7       	brpl	.-8      	; 0x438 <DCC_DECODER_MainFCN+0x1ba>
     440:	98 2f       	mov	r25, r24
     442:	80 91 94 01 	lds	r24, 0x0194
     446:	89 2b       	or	r24, r25
     448:	80 93 94 01 	sts	0x0194, r24
                    dcc_rx_bit_cnt++;
     44c:	80 91 97 01 	lds	r24, 0x0197
     450:	8f 5f       	subi	r24, 0xFF	; 255
     452:	80 93 97 01 	sts	0x0197, r24
     456:	dd c0       	rjmp	.+442    	; 0x612 <DCC_DECODER_MainFCN+0x394>
                }else{
                    ///the whole Data byte has been received. Wait for the Data termination ZERO bit.
                    if(dcc_rx_bit == 0){
     458:	80 91 98 01 	lds	r24, 0x0198
     45c:	88 23       	and	r24, r24
     45e:	31 f4       	brne	.+12     	; 0x46c <DCC_DECODER_MainFCN+0x1ee>
                        /// Data Start bit
                        dcc_state = 4; /// Go to Error Detection byte state
     460:	84 e0       	ldi	r24, 0x04	; 4
     462:	80 93 4d 01 	sts	0x014D, r24
                        dcc_rx_bit_cnt = 0;
     466:	10 92 97 01 	sts	0x0197, r1
     46a:	d3 c0       	rjmp	.+422    	; 0x612 <DCC_DECODER_MainFCN+0x394>
                    }else{
                        /// ERROR!!! It received "ONE" instead of "ZERO" bit
                        dcc_state = 1; /// Go back to preamble state
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	80 93 4d 01 	sts	0x014D, r24
                        dcc_rx_bit_cnt = 0;
     472:	10 92 97 01 	sts	0x0197, r1
     476:	cd c0       	rjmp	.+410    	; 0x612 <DCC_DECODER_MainFCN+0x394>
                    }
                }

            }else if(dcc_state == 4){ ///=================== Error Detection Byte ===========
     478:	80 91 4d 01 	lds	r24, 0x014D
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	09 f0       	breq	.+2      	; 0x482 <DCC_DECODER_MainFCN+0x204>
     480:	bd c0       	rjmp	.+378    	; 0x5fc <DCC_DECODER_MainFCN+0x37e>
                if(dcc_rx_bit_cnt < 8){
     482:	80 91 97 01 	lds	r24, 0x0197
     486:	88 30       	cpi	r24, 0x08	; 8
     488:	10 f5       	brcc	.+68     	; 0x4ce <DCC_DECODER_MainFCN+0x250>
                    if(dcc_rx_bit == 1)
     48a:	80 91 98 01 	lds	r24, 0x0198
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	c1 f4       	brne	.+48     	; 0x4c2 <DCC_DECODER_MainFCN+0x244>
                        dcc_ErrDetByte |= (1 << (7-dcc_rx_bit_cnt));
     492:	80 91 97 01 	lds	r24, 0x0197
     496:	28 2f       	mov	r18, r24
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	87 e0       	ldi	r24, 0x07	; 7
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	ac 01       	movw	r20, r24
     4a0:	42 1b       	sub	r20, r18
     4a2:	53 0b       	sbc	r21, r19
     4a4:	9a 01       	movw	r18, r20
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	02 2e       	mov	r0, r18
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DCC_DECODER_MainFCN+0x234>
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	0a 94       	dec	r0
     4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DCC_DECODER_MainFCN+0x230>
     4b6:	98 2f       	mov	r25, r24
     4b8:	80 91 93 01 	lds	r24, 0x0193
     4bc:	89 2b       	or	r24, r25
     4be:	80 93 93 01 	sts	0x0193, r24
                    dcc_rx_bit_cnt++;
     4c2:	80 91 97 01 	lds	r24, 0x0197
     4c6:	8f 5f       	subi	r24, 0xFF	; 255
     4c8:	80 93 97 01 	sts	0x0197, r24
     4cc:	a2 c0       	rjmp	.+324    	; 0x612 <DCC_DECODER_MainFCN+0x394>
                   // PORTB &= ~(1<<PIN5);
                }else{
                    ///the whole Error Det. byte has been received. Wait for the Packet End Bit.
                    if(dcc_rx_bit == 1){
     4ce:	80 91 98 01 	lds	r24, 0x0198
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	09 f0       	breq	.+2      	; 0x4d8 <DCC_DECODER_MainFCN+0x25a>
     4d6:	86 c0       	rjmp	.+268    	; 0x5e4 <DCC_DECODER_MainFCN+0x366>
                        /// Packet End Bit
                        if(dcc_ErrDetByte == (dcc_AddressByte^dcc_DataByte)){
     4d8:	90 91 95 01 	lds	r25, 0x0195
     4dc:	80 91 94 01 	lds	r24, 0x0194
     4e0:	98 27       	eor	r25, r24
     4e2:	80 91 93 01 	lds	r24, 0x0193
     4e6:	98 17       	cp	r25, r24
     4e8:	09 f0       	breq	.+2      	; 0x4ec <DCC_DECODER_MainFCN+0x26e>
     4ea:	70 c0       	rjmp	.+224    	; 0x5cc <DCC_DECODER_MainFCN+0x34e>
                            /// Address & Data Correction Test Passed

                            /// Address recognition function & Appropriate LED driving:
                            light_addr = DCC_Address_Recogniton(dcc_AddressByte, dcc_DataByte, dcc_decoder_mode);
     4ec:	80 91 95 01 	lds	r24, 0x0195
     4f0:	90 91 94 01 	lds	r25, 0x0194
     4f4:	69 2f       	mov	r22, r25
     4f6:	4e 85       	ldd	r20, Y+14	; 0x0e
     4f8:	0e 94 12 03 	call	0x624	; 0x624 <DCC_Address_Recogniton>
     4fc:	80 93 92 01 	sts	0x0192, r24
                            DCC_LED_Driver(dcc_DataByte, light_addr, &led_blink_flag );
     500:	80 91 94 01 	lds	r24, 0x0194
     504:	90 91 92 01 	lds	r25, 0x0192
     508:	20 e9       	ldi	r18, 0x90	; 144
     50a:	31 e0       	ldi	r19, 0x01	; 1
     50c:	69 2f       	mov	r22, r25
     50e:	a9 01       	movw	r20, r18
     510:	0e 94 1d 04 	call	0x83a	; 0x83a <DCC_LED_Driver>

                            DCC_LED_Blinker(led_blink_flag);
     514:	80 91 90 01 	lds	r24, 0x0190
     518:	90 91 91 01 	lds	r25, 0x0191
     51c:	0e 94 de 08 	call	0x11bc	; 0x11bc <DCC_LED_Blinker>

                            if(dcc_AddressByte != 0xFF){
     520:	80 91 95 01 	lds	r24, 0x0195
     524:	8f 3f       	cpi	r24, 0xFF	; 255
     526:	09 f4       	brne	.+2      	; 0x52a <DCC_DECODER_MainFCN+0x2ac>
     528:	51 c0       	rjmp	.+162    	; 0x5cc <DCC_DECODER_MainFCN+0x34e>
                                /// If it receives anything else than the IDLE packet:
                                dcc_addr16 = 0x0000;
     52a:	1b 82       	std	Y+3, r1	; 0x03
     52c:	1a 82       	std	Y+2, r1	; 0x02
                                dcc_addr16 |= ~((dcc_DataByte>>4)|0xFFF8); /// first 3 LSBits contained in the DCC DataByte
     52e:	80 91 94 01 	lds	r24, 0x0194
     532:	82 95       	swap	r24
     534:	8f 70       	andi	r24, 0x0F	; 15
     536:	88 2f       	mov	r24, r24
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	88 6f       	ori	r24, 0xF8	; 248
     53c:	9f 6f       	ori	r25, 0xFF	; 255
     53e:	9c 01       	movw	r18, r24
     540:	20 95       	com	r18
     542:	30 95       	com	r19
     544:	8a 81       	ldd	r24, Y+2	; 0x02
     546:	9b 81       	ldd	r25, Y+3	; 0x03
     548:	82 2b       	or	r24, r18
     54a:	93 2b       	or	r25, r19
     54c:	9b 83       	std	Y+3, r25	; 0x03
     54e:	8a 83       	std	Y+2, r24	; 0x02
                                dcc_addr_aux = dcc_AddressByte&0x3F; // bitmask
     550:	80 91 95 01 	lds	r24, 0x0195
     554:	8f 73       	andi	r24, 0x3F	; 63
     556:	89 83       	std	Y+1, r24	; 0x01
                                dcc_addr16 |= (dcc_addr_aux<<3)&0x01F8; /// == |0 0 0 0 0 0 0 A8 A7 A6 A5 A4 A3 A2 A1 A0 |
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	88 2f       	mov	r24, r24
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	9c 01       	movw	r18, r24
     56c:	28 7f       	andi	r18, 0xF8	; 248
     56e:	31 70       	andi	r19, 0x01	; 1
     570:	8a 81       	ldd	r24, Y+2	; 0x02
     572:	9b 81       	ldd	r25, Y+3	; 0x03
     574:	82 2b       	or	r24, r18
     576:	93 2b       	or	r25, r19
     578:	9b 83       	std	Y+3, r25	; 0x03
     57a:	8a 83       	std	Y+2, r24	; 0x02
                                /// divide the address by 2 so it fits into 8-bit register:
                                //dcc_addr_aux = (dcc_addr16>>1); //
                                #ifdef UART_TERM
                                    /// Send both address and data byte to UART;
                                    itoa(dcc_addr16,buffer,10);
     57c:	8a 81       	ldd	r24, Y+2	; 0x02
     57e:	9b 81       	ldd	r25, Y+3	; 0x03
     580:	9e 01       	movw	r18, r28
     582:	2c 5f       	subi	r18, 0xFC	; 252
     584:	3f 4f       	sbci	r19, 0xFF	; 255
     586:	b9 01       	movw	r22, r18
     588:	4a e0       	ldi	r20, 0x0A	; 10
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <itoa>
                                    USART_TX_STRING_WAIT("\nADDR =");
     590:	8e e4       	ldi	r24, 0x4E	; 78
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 0e 0c 	call	0x181c	; 0x181c <USART_TX_STRING_WAIT>
                                    USART_TX_STRING_WAIT(buffer);
     598:	ce 01       	movw	r24, r28
     59a:	04 96       	adiw	r24, 0x04	; 4
     59c:	0e 94 0e 0c 	call	0x181c	; 0x181c <USART_TX_STRING_WAIT>
                                    //USART_TX_WAIT('\n');
                                    itoa((dcc_DataByte&0x0f),buffer,10);
     5a0:	80 91 94 01 	lds	r24, 0x0194
     5a4:	88 2f       	mov	r24, r24
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	8f 70       	andi	r24, 0x0F	; 15
     5aa:	90 70       	andi	r25, 0x00	; 0
     5ac:	9e 01       	movw	r18, r28
     5ae:	2c 5f       	subi	r18, 0xFC	; 252
     5b0:	3f 4f       	sbci	r19, 0xFF	; 255
     5b2:	b9 01       	movw	r22, r18
     5b4:	4a e0       	ldi	r20, 0x0A	; 10
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <itoa>
                                    USART_TX_STRING_WAIT("\nDATA =");
     5bc:	86 e5       	ldi	r24, 0x56	; 86
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 0e 0c 	call	0x181c	; 0x181c <USART_TX_STRING_WAIT>
                                    USART_TX_STRING_WAIT(buffer);
     5c4:	ce 01       	movw	r24, r28
     5c6:	04 96       	adiw	r24, 0x04	; 4
     5c8:	0e 94 0e 0c 	call	0x181c	; 0x181c <USART_TX_STRING_WAIT>
                            }
                        }else{
                            ///ERROR !! The correction test failed
                            /// Do nothing. Ignore the packet
                        }
                        dcc_AddressByte = 0;
     5cc:	10 92 95 01 	sts	0x0195, r1
                        dcc_DataByte = 0;
     5d0:	10 92 94 01 	sts	0x0194, r1
                        dcc_ErrDetByte = 0;
     5d4:	10 92 93 01 	sts	0x0193, r1
                        dcc_state = 1; /// Go to Preamble state
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	80 93 4d 01 	sts	0x014D, r24
                        dcc_rx_bit_cnt = 0;
     5de:	10 92 97 01 	sts	0x0197, r1
     5e2:	17 c0       	rjmp	.+46     	; 0x612 <DCC_DECODER_MainFCN+0x394>
                    }else{
                        /// ERROR!!! It received "Zero" instead of "ONE" bit
                        dcc_AddressByte = 0;
     5e4:	10 92 95 01 	sts	0x0195, r1
                        dcc_DataByte = 0;
     5e8:	10 92 94 01 	sts	0x0194, r1
                        dcc_ErrDetByte = 0;
     5ec:	10 92 93 01 	sts	0x0193, r1
                        dcc_state = 1;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	80 93 4d 01 	sts	0x014D, r24
                        dcc_rx_bit_cnt = 0;
     5f6:	10 92 97 01 	sts	0x0197, r1
     5fa:	0b c0       	rjmp	.+22     	; 0x612 <DCC_DECODER_MainFCN+0x394>
                    }
                }/// endif dcc_rx_bit_cnt

            }else{
                /// UNKNOWN FSM state
                dcc_AddressByte = 0;
     5fc:	10 92 95 01 	sts	0x0195, r1
                dcc_DataByte = 0;
     600:	10 92 94 01 	sts	0x0194, r1
                dcc_ErrDetByte = 0;
     604:	10 92 93 01 	sts	0x0193, r1
                dcc_state = 1; /// Go to Preamble state
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 4d 01 	sts	0x014D, r24
                dcc_rx_bit_cnt = 0;
     60e:	10 92 97 01 	sts	0x0197, r1
        }/// endif ODD edge
    }else{
        // nothing
    }/// END if int0_flag

}
     612:	2e 96       	adiw	r28, 0x0e	; 14
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	de bf       	out	0x3e, r29	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	cd bf       	out	0x3d, r28	; 61
     61e:	cf 91       	pop	r28
     620:	df 91       	pop	r29
     622:	08 95       	ret

00000624 <DCC_Address_Recogniton>:

uint8_t DCC_Address_Recogniton(uint8_t byte1, uint8_t byte2, uint8_t dcc_decoder_mode)
{
     624:	df 93       	push	r29
     626:	cf 93       	push	r28
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	28 97       	sbiw	r28, 0x08	; 8
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
     638:	8d 83       	std	Y+5, r24	; 0x05
     63a:	6e 83       	std	Y+6, r22	; 0x06
     63c:	4f 83       	std	Y+7, r20	; 0x07
    /// This FCN returns only the 8 MSBits of the 9-bit DCC address word.

    /// BYTE 1 : | 1 0 A8 A7 A6 A5 A4 A3|
    /// BYTE 2 : | 1 !A2 !A1 !A0 D3 D2 D1 D0 |

    uint16_t dcc_addr16 = 0;
     63e:	1c 82       	std	Y+4, r1	; 0x04
     640:	1b 82       	std	Y+3, r1	; 0x03
    //uint8_t dcc_addr = 0;
    //uint8_t dcc_data = 0;
    uint16_t dcc_aux = 0;
     642:	1a 82       	std	Y+2, r1	; 0x02
     644:	19 82       	std	Y+1, r1	; 0x01

    dcc_addr16 |= ~((byte2>>4)|0xFFF8); /// |0 0 0 0 0 0 0 0 0 0 0 0 0 A2 A1 A0 |
     646:	8e 81       	ldd	r24, Y+6	; 0x06
     648:	82 95       	swap	r24
     64a:	8f 70       	andi	r24, 0x0F	; 15
     64c:	88 2f       	mov	r24, r24
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	88 6f       	ori	r24, 0xF8	; 248
     652:	9f 6f       	ori	r25, 0xFF	; 255
     654:	9c 01       	movw	r18, r24
     656:	20 95       	com	r18
     658:	30 95       	com	r19
     65a:	8b 81       	ldd	r24, Y+3	; 0x03
     65c:	9c 81       	ldd	r25, Y+4	; 0x04
     65e:	82 2b       	or	r24, r18
     660:	93 2b       	or	r25, r19
     662:	9c 83       	std	Y+4, r25	; 0x04
     664:	8b 83       	std	Y+3, r24	; 0x03
    dcc_aux = byte1&0x003F; // bitmask
     666:	8d 81       	ldd	r24, Y+5	; 0x05
     668:	88 2f       	mov	r24, r24
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	8f 73       	andi	r24, 0x3F	; 63
     66e:	90 70       	andi	r25, 0x00	; 0
     670:	9a 83       	std	Y+2, r25	; 0x02
     672:	89 83       	std	Y+1, r24	; 0x01
    dcc_addr16 |= (dcc_aux<<3)&0x01F8; /// == |0 0 0 0 0 0 0 A8 A7 A6 A5 A4 A3 A2 A1 A0 |
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	9a 81       	ldd	r25, Y+2	; 0x02
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	88 0f       	add	r24, r24
     67e:	99 1f       	adc	r25, r25
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	9c 01       	movw	r18, r24
     686:	28 7f       	andi	r18, 0xF8	; 248
     688:	31 70       	andi	r19, 0x01	; 1
     68a:	8b 81       	ldd	r24, Y+3	; 0x03
     68c:	9c 81       	ldd	r25, Y+4	; 0x04
     68e:	82 2b       	or	r24, r18
     690:	93 2b       	or	r25, r19
     692:	9c 83       	std	Y+4, r25	; 0x04
     694:	8b 83       	std	Y+3, r24	; 0x03
    /// divide the address by 2 so it fits into 8-bit register:
    //dcc_addr = (dcc_addr16>>1);
    //dcc_data = byte2&0x0F;

    if(dcc_decoder_mode == 0){
     696:	8f 81       	ldd	r24, Y+7	; 0x07
     698:	88 23       	and	r24, r24
     69a:	09 f0       	breq	.+2      	; 0x69e <DCC_Address_Recogniton+0x7a>
     69c:	40 c0       	rjmp	.+128    	; 0x71e <DCC_Address_Recogniton+0xfa>
        /// Station mode enabled: (STANICNI NAVESTIDLA)
        if( (dcc_addr16==104)||(dcc_addr16==108)||(dcc_addr16==112)||(dcc_addr16==116) ){
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	9c 81       	ldd	r25, Y+4	; 0x04
     6a2:	88 36       	cpi	r24, 0x68	; 104
     6a4:	91 05       	cpc	r25, r1
     6a6:	79 f0       	breq	.+30     	; 0x6c6 <DCC_Address_Recogniton+0xa2>
     6a8:	8b 81       	ldd	r24, Y+3	; 0x03
     6aa:	9c 81       	ldd	r25, Y+4	; 0x04
     6ac:	8c 36       	cpi	r24, 0x6C	; 108
     6ae:	91 05       	cpc	r25, r1
     6b0:	51 f0       	breq	.+20     	; 0x6c6 <DCC_Address_Recogniton+0xa2>
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	9c 81       	ldd	r25, Y+4	; 0x04
     6b6:	80 37       	cpi	r24, 0x70	; 112
     6b8:	91 05       	cpc	r25, r1
     6ba:	29 f0       	breq	.+10     	; 0x6c6 <DCC_Address_Recogniton+0xa2>
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
     6c0:	84 37       	cpi	r24, 0x74	; 116
     6c2:	91 05       	cpc	r25, r1
     6c4:	19 f4       	brne	.+6      	; 0x6cc <DCC_Address_Recogniton+0xa8>
            return 0x01; // First 4-light (mode 0)
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	88 87       	std	Y+8, r24	; 0x08
     6ca:	4c c0       	rjmp	.+152    	; 0x764 <DCC_Address_Recogniton+0x140>
        }else if( (dcc_addr16==160)||(dcc_addr16==224)){/// Address 160 used for both 2-light and 4-light !!!
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	9c 81       	ldd	r25, Y+4	; 0x04
     6d0:	80 3a       	cpi	r24, 0xA0	; 160
     6d2:	91 05       	cpc	r25, r1
     6d4:	29 f0       	breq	.+10     	; 0x6e0 <DCC_Address_Recogniton+0xbc>
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	9c 81       	ldd	r25, Y+4	; 0x04
     6da:	80 3e       	cpi	r24, 0xE0	; 224
     6dc:	91 05       	cpc	r25, r1
     6de:	19 f4       	brne	.+6      	; 0x6e6 <DCC_Address_Recogniton+0xc2>
            return 0x02; // Second 4-light (mode 0)
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	88 87       	std	Y+8, r24	; 0x08
     6e4:	3f c0       	rjmp	.+126    	; 0x764 <DCC_Address_Recogniton+0x140>
        }else if((dcc_addr16==120)||(dcc_addr16==124)){
     6e6:	8b 81       	ldd	r24, Y+3	; 0x03
     6e8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ea:	88 37       	cpi	r24, 0x78	; 120
     6ec:	91 05       	cpc	r25, r1
     6ee:	29 f0       	breq	.+10     	; 0x6fa <DCC_Address_Recogniton+0xd6>
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	8c 37       	cpi	r24, 0x7C	; 124
     6f6:	91 05       	cpc	r25, r1
     6f8:	19 f4       	brne	.+6      	; 0x700 <DCC_Address_Recogniton+0xdc>
            return 0x03; // 3-light (mode 0)
     6fa:	83 e0       	ldi	r24, 0x03	; 3
     6fc:	88 87       	std	Y+8, r24	; 0x08
     6fe:	32 c0       	rjmp	.+100    	; 0x764 <DCC_Address_Recogniton+0x140>
        }else if((dcc_addr16==164)||(dcc_addr16==164)){
     700:	8b 81       	ldd	r24, Y+3	; 0x03
     702:	9c 81       	ldd	r25, Y+4	; 0x04
     704:	84 3a       	cpi	r24, 0xA4	; 164
     706:	91 05       	cpc	r25, r1
     708:	29 f0       	breq	.+10     	; 0x714 <DCC_Address_Recogniton+0xf0>
     70a:	8b 81       	ldd	r24, Y+3	; 0x03
     70c:	9c 81       	ldd	r25, Y+4	; 0x04
     70e:	84 3a       	cpi	r24, 0xA4	; 164
     710:	91 05       	cpc	r25, r1
     712:	19 f4       	brne	.+6      	; 0x71a <DCC_Address_Recogniton+0xf6>
            return 0x04; // 2-light (mode 0)
     714:	84 e0       	ldi	r24, 0x04	; 4
     716:	88 87       	std	Y+8, r24	; 0x08
     718:	25 c0       	rjmp	.+74     	; 0x764 <DCC_Address_Recogniton+0x140>
            /// ----------------------- There is some problem with addressing both of them... I chose the 1st one
        }else{
            /// Undefined
            return 0x00;
     71a:	18 86       	std	Y+8, r1	; 0x08
     71c:	23 c0       	rjmp	.+70     	; 0x764 <DCC_Address_Recogniton+0x140>
        }

    }else if(dcc_decoder_mode == 1){
     71e:	8f 81       	ldd	r24, Y+7	; 0x07
     720:	81 30       	cpi	r24, 0x01	; 1
     722:	f9 f4       	brne	.+62     	; 0x762 <DCC_Address_Recogniton+0x13e>
        /// Entrance mode enabled: (VJEZDOVA NAVESTIDLA)
        if( dcc_addr16==160 ){
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	9c 81       	ldd	r25, Y+4	; 0x04
     728:	80 3a       	cpi	r24, 0xA0	; 160
     72a:	91 05       	cpc	r25, r1
     72c:	19 f4       	brne	.+6      	; 0x734 <DCC_Address_Recogniton+0x110>
            return 0x11; // the first 2-light (mode 1)
     72e:	81 e1       	ldi	r24, 0x11	; 17
     730:	88 87       	std	Y+8, r24	; 0x08
     732:	18 c0       	rjmp	.+48     	; 0x764 <DCC_Address_Recogniton+0x140>
        }else if(dcc_addr16==164){
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	9c 81       	ldd	r25, Y+4	; 0x04
     738:	84 3a       	cpi	r24, 0xA4	; 164
     73a:	91 05       	cpc	r25, r1
     73c:	19 f4       	brne	.+6      	; 0x744 <DCC_Address_Recogniton+0x120>
            return 0x12; // the second 2-light(mode 1)
     73e:	82 e1       	ldi	r24, 0x12	; 18
     740:	88 87       	std	Y+8, r24	; 0x08
     742:	10 c0       	rjmp	.+32     	; 0x764 <DCC_Address_Recogniton+0x140>
        }else if((dcc_addr16==81)||(dcc_addr16==100)){
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	9c 81       	ldd	r25, Y+4	; 0x04
     748:	81 35       	cpi	r24, 0x51	; 81
     74a:	91 05       	cpc	r25, r1
     74c:	29 f0       	breq	.+10     	; 0x758 <DCC_Address_Recogniton+0x134>
     74e:	8b 81       	ldd	r24, Y+3	; 0x03
     750:	9c 81       	ldd	r25, Y+4	; 0x04
     752:	84 36       	cpi	r24, 0x64	; 100
     754:	91 05       	cpc	r25, r1
     756:	19 f4       	brne	.+6      	; 0x75e <DCC_Address_Recogniton+0x13a>
            return 0x15; // the 5-light(mode 1)
     758:	85 e1       	ldi	r24, 0x15	; 21
     75a:	88 87       	std	Y+8, r24	; 0x08
     75c:	03 c0       	rjmp	.+6      	; 0x764 <DCC_Address_Recogniton+0x140>
        }else{
            /// Add the 5-light one ------------------------------------------
            /// Undefined
            return 0x00;
     75e:	18 86       	std	Y+8, r1	; 0x08
     760:	01 c0       	rjmp	.+2      	; 0x764 <DCC_Address_Recogniton+0x140>
        }

    }else{
        /// Undefined
        return 0x00;
     762:	18 86       	std	Y+8, r1	; 0x08
     764:	88 85       	ldd	r24, Y+8	; 0x08
    }
}
     766:	28 96       	adiw	r28, 0x08	; 8
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	cf 91       	pop	r28
     774:	df 91       	pop	r29
     776:	08 95       	ret

00000778 <DCC_BitLength>:

uint8_t DCC_BitLength(void)
{
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	0f 92       	push	r0
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62

/// ====================== Bit ONE Recognition =====================================================
    if( (timer1_stamp[0] >= T_BitOne_Half_Min)&&(timer1_stamp[0] <= T_BitOne_Half_Max) ){
     782:	80 91 d2 01 	lds	r24, 0x01D2
     786:	90 91 d3 01 	lds	r25, 0x01D3
     78a:	88 36       	cpi	r24, 0x68	; 104
     78c:	91 05       	cpc	r25, r1
     78e:	60 f1       	brcs	.+88     	; 0x7e8 <DCC_BitLength+0x70>
     790:	80 91 d2 01 	lds	r24, 0x01D2
     794:	90 91 d3 01 	lds	r25, 0x01D3
     798:	81 38       	cpi	r24, 0x81	; 129
     79a:	91 05       	cpc	r25, r1
     79c:	28 f5       	brcc	.+74     	; 0x7e8 <DCC_BitLength+0x70>
        /// The first half of the bit is in the timing range of Bit "ONE".
        if( (timer1_stamp[1] >= T_BitOne_Half_Min)&&(timer1_stamp[1] <= T_BitOne_Half_Max) ){
     79e:	80 91 d4 01 	lds	r24, 0x01D4
     7a2:	90 91 d5 01 	lds	r25, 0x01D5
     7a6:	88 36       	cpi	r24, 0x68	; 104
     7a8:	91 05       	cpc	r25, r1
     7aa:	50 f0       	brcs	.+20     	; 0x7c0 <DCC_BitLength+0x48>
     7ac:	80 91 d4 01 	lds	r24, 0x01D4
     7b0:	90 91 d5 01 	lds	r25, 0x01D5
     7b4:	81 38       	cpi	r24, 0x81	; 129
     7b6:	91 05       	cpc	r25, r1
     7b8:	18 f4       	brcc	.+6      	; 0x7c0 <DCC_BitLength+0x48>
            /// A valid Bit "ONE" has been received.
            return 0x81;
     7ba:	21 e8       	ldi	r18, 0x81	; 129
     7bc:	29 83       	std	Y+1, r18	; 0x01
     7be:	38 c0       	rjmp	.+112    	; 0x830 <DCC_BitLength+0xb8>
        }else if( (timer1_stamp[1] >= T_BitZero_Half_Min)&&(timer1_stamp[1] <= T_BitZero_Half_Max) ){
     7c0:	80 91 d4 01 	lds	r24, 0x01D4
     7c4:	90 91 d5 01 	lds	r25, 0x01D5
     7c8:	84 3b       	cpi	r24, 0xB4	; 180
     7ca:	91 05       	cpc	r25, r1
     7cc:	58 f0       	brcs	.+22     	; 0x7e4 <DCC_BitLength+0x6c>
     7ce:	80 91 d4 01 	lds	r24, 0x01D4
     7d2:	90 91 d5 01 	lds	r25, 0x01D5
     7d6:	2e e4       	ldi	r18, 0x4E	; 78
     7d8:	81 32       	cpi	r24, 0x21	; 33
     7da:	92 07       	cpc	r25, r18
     7dc:	18 f4       	brcc	.+6      	; 0x7e4 <DCC_BitLength+0x6c>
            /// First half = ONE and Second Half = ZERO...
            /// ====== INT0 EDGE SYNC EVENT =====
            return 0x88;
     7de:	88 e8       	ldi	r24, 0x88	; 136
     7e0:	89 83       	std	Y+1, r24	; 0x01
     7e2:	26 c0       	rjmp	.+76     	; 0x830 <DCC_BitLength+0xb8>
        }else{
            /// Invalid bit reception... Packet LOST...
            /// Do nothing....
            return 0x00;
     7e4:	19 82       	std	Y+1, r1	; 0x01
     7e6:	24 c0       	rjmp	.+72     	; 0x830 <DCC_BitLength+0xb8>
        }

    /// ====================== Bit ZERO Recognition =====================================================
    }else if ((timer1_stamp[0] >= T_BitZero_Half_Min)&&(timer1_stamp[0] <= T_BitZero_Half_Max)){
     7e8:	80 91 d2 01 	lds	r24, 0x01D2
     7ec:	90 91 d3 01 	lds	r25, 0x01D3
     7f0:	84 3b       	cpi	r24, 0xB4	; 180
     7f2:	91 05       	cpc	r25, r1
     7f4:	e0 f0       	brcs	.+56     	; 0x82e <DCC_BitLength+0xb6>
     7f6:	80 91 d2 01 	lds	r24, 0x01D2
     7fa:	90 91 d3 01 	lds	r25, 0x01D3
     7fe:	2e e4       	ldi	r18, 0x4E	; 78
     800:	81 32       	cpi	r24, 0x21	; 33
     802:	92 07       	cpc	r25, r18
     804:	a0 f4       	brcc	.+40     	; 0x82e <DCC_BitLength+0xb6>
        /// The first half of the bit is in the timing range of the Bit "ONE".
        if((timer1_stamp[1] >= T_BitZero_Half_Min)&&(timer1_stamp[1] <= T_BitZero_Half_Max)){
     806:	80 91 d4 01 	lds	r24, 0x01D4
     80a:	90 91 d5 01 	lds	r25, 0x01D5
     80e:	84 3b       	cpi	r24, 0xB4	; 180
     810:	91 05       	cpc	r25, r1
     812:	58 f0       	brcs	.+22     	; 0x82a <DCC_BitLength+0xb2>
     814:	80 91 d4 01 	lds	r24, 0x01D4
     818:	90 91 d5 01 	lds	r25, 0x01D5
     81c:	2e e4       	ldi	r18, 0x4E	; 78
     81e:	81 32       	cpi	r24, 0x21	; 33
     820:	92 07       	cpc	r25, r18
     822:	18 f4       	brcc	.+6      	; 0x82a <DCC_BitLength+0xb2>
            /// A valid Bit "ZERO" has been received.
            return 0x80;
     824:	80 e8       	ldi	r24, 0x80	; 128
     826:	89 83       	std	Y+1, r24	; 0x01
     828:	03 c0       	rjmp	.+6      	; 0x830 <DCC_BitLength+0xb8>
        }else{
            /// Invalid bit reception... Packet LOST...
            /// Do nothing...
            return 0x00;
     82a:	19 82       	std	Y+1, r1	; 0x01
     82c:	01 c0       	rjmp	.+2      	; 0x830 <DCC_BitLength+0xb8>
        }
    /// ===================== Special Events ===========================================================
    }else{

        return 0x00;
     82e:	19 82       	std	Y+1, r1	; 0x01
     830:	89 81       	ldd	r24, Y+1	; 0x01

    }/// end if

}
     832:	0f 90       	pop	r0
     834:	cf 91       	pop	r28
     836:	df 91       	pop	r29
     838:	08 95       	ret

0000083a <DCC_LED_Driver>:

void DCC_LED_Driver(uint8_t byte2, uint8_t light_addr, uint16_t *led_blink_flag )
{
     83a:	df 93       	push	r29
     83c:	cf 93       	push	r28
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	62 97       	sbiw	r28, 0x12	; 18
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	89 83       	std	Y+1, r24	; 0x01
     850:	6a 83       	std	Y+2, r22	; 0x02
     852:	5c 83       	std	Y+4, r21	; 0x04
     854:	4b 83       	std	Y+3, r20	; 0x03
    /// Designed for Common Anode LEDs.
    /// All the switch cases are exclusive ( either one or the other is active for the same light_addr)
    if(light_addr == 0x01){
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	09 f0       	breq	.+2      	; 0x85e <DCC_LED_Driver+0x24>
     85c:	de c0       	rjmp	.+444    	; 0xa1a <__stack+0x11b>
        /// Controls LED0  - LED3 (First 4-lighted)
        PORTLED0 |=(1<<LED0_PIN); // Green  OFF
     85e:	a8 e2       	ldi	r26, 0x28	; 40
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e8 e2       	ldi	r30, 0x28	; 40
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	81 60       	ori	r24, 0x01	; 1
     86a:	8c 93       	st	X, r24
        PORTLED0 |=(1<<LED1_PIN); // White  OFF
     86c:	a8 e2       	ldi	r26, 0x28	; 40
     86e:	b0 e0       	ldi	r27, 0x00	; 0
     870:	e8 e2       	ldi	r30, 0x28	; 40
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	82 60       	ori	r24, 0x02	; 2
     878:	8c 93       	st	X, r24
        PORTLED0 |=(1<<LED2_PIN); // Yellow  OFF
     87a:	a8 e2       	ldi	r26, 0x28	; 40
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	e8 e2       	ldi	r30, 0x28	; 40
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	84 60       	ori	r24, 0x04	; 4
     886:	8c 93       	st	X, r24
        PORTLED0 |=(1<<LED3_PIN); // Red  OFF
     888:	a8 e2       	ldi	r26, 0x28	; 40
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	e8 e2       	ldi	r30, 0x28	; 40
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	88 60       	ori	r24, 0x08	; 8
     894:	8c 93       	st	X, r24
        *led_blink_flag &= ~0x000F;// DEactivate blinking LEDs
     896:	eb 81       	ldd	r30, Y+3	; 0x03
     898:	fc 81       	ldd	r31, Y+4	; 0x04
     89a:	80 81       	ld	r24, Z
     89c:	91 81       	ldd	r25, Z+1	; 0x01
     89e:	80 7f       	andi	r24, 0xF0	; 240
     8a0:	eb 81       	ldd	r30, Y+3	; 0x03
     8a2:	fc 81       	ldd	r31, Y+4	; 0x04
     8a4:	91 83       	std	Z+1, r25	; 0x01
     8a6:	80 83       	st	Z, r24

        switch (byte2&0x0F){
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	88 2f       	mov	r24, r24
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	9c 01       	movw	r18, r24
     8b0:	2f 70       	andi	r18, 0x0F	; 15
     8b2:	30 70       	andi	r19, 0x00	; 0
     8b4:	3a 8b       	std	Y+18, r19	; 0x12
     8b6:	29 8b       	std	Y+17, r18	; 0x11
     8b8:	89 89       	ldd	r24, Y+17	; 0x11
     8ba:	9a 89       	ldd	r25, Y+18	; 0x12
     8bc:	84 30       	cpi	r24, 0x04	; 4
     8be:	91 05       	cpc	r25, r1
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <DCC_LED_Driver+0x8a>
     8c2:	58 c0       	rjmp	.+176    	; 0x974 <__stack+0x75>
     8c4:	29 89       	ldd	r18, Y+17	; 0x11
     8c6:	3a 89       	ldd	r19, Y+18	; 0x12
     8c8:	25 30       	cpi	r18, 0x05	; 5
     8ca:	31 05       	cpc	r19, r1
     8cc:	b4 f4       	brge	.+44     	; 0x8fa <DCC_LED_Driver+0xc0>
     8ce:	89 89       	ldd	r24, Y+17	; 0x11
     8d0:	9a 89       	ldd	r25, Y+18	; 0x12
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	91 05       	cpc	r25, r1
     8d6:	79 f1       	breq	.+94     	; 0x936 <__stack+0x37>
     8d8:	29 89       	ldd	r18, Y+17	; 0x11
     8da:	3a 89       	ldd	r19, Y+18	; 0x12
     8dc:	22 30       	cpi	r18, 0x02	; 2
     8de:	31 05       	cpc	r19, r1
     8e0:	0c f4       	brge	.+2      	; 0x8e4 <DCC_LED_Driver+0xaa>
     8e2:	63 c4       	rjmp	.+2246   	; 0x11aa <__stack+0x8ab>
     8e4:	89 89       	ldd	r24, Y+17	; 0x11
     8e6:	9a 89       	ldd	r25, Y+18	; 0x12
     8e8:	82 30       	cpi	r24, 0x02	; 2
     8ea:	91 05       	cpc	r25, r1
     8ec:	61 f1       	breq	.+88     	; 0x946 <__stack+0x47>
     8ee:	29 89       	ldd	r18, Y+17	; 0x11
     8f0:	3a 89       	ldd	r19, Y+18	; 0x12
     8f2:	23 30       	cpi	r18, 0x03	; 3
     8f4:	31 05       	cpc	r19, r1
     8f6:	79 f1       	breq	.+94     	; 0x956 <__stack+0x57>
     8f8:	58 c4       	rjmp	.+2224   	; 0x11aa <__stack+0x8ab>
     8fa:	89 89       	ldd	r24, Y+17	; 0x11
     8fc:	9a 89       	ldd	r25, Y+18	; 0x12
     8fe:	8a 30       	cpi	r24, 0x0A	; 10
     900:	91 05       	cpc	r25, r1
     902:	09 f4       	brne	.+2      	; 0x906 <__stack+0x7>
     904:	50 c0       	rjmp	.+160    	; 0x9a6 <__stack+0xa7>
     906:	29 89       	ldd	r18, Y+17	; 0x11
     908:	3a 89       	ldd	r19, Y+18	; 0x12
     90a:	2b 30       	cpi	r18, 0x0B	; 11
     90c:	31 05       	cpc	r19, r1
     90e:	34 f4       	brge	.+12     	; 0x91c <__stack+0x1d>
     910:	89 89       	ldd	r24, Y+17	; 0x11
     912:	9a 89       	ldd	r25, Y+18	; 0x12
     914:	89 30       	cpi	r24, 0x09	; 9
     916:	91 05       	cpc	r25, r1
     918:	a9 f1       	breq	.+106    	; 0x984 <__stack+0x85>
     91a:	47 c4       	rjmp	.+2190   	; 0x11aa <__stack+0x8ab>
     91c:	29 89       	ldd	r18, Y+17	; 0x11
     91e:	3a 89       	ldd	r19, Y+18	; 0x12
     920:	2b 30       	cpi	r18, 0x0B	; 11
     922:	31 05       	cpc	r19, r1
     924:	09 f4       	brne	.+2      	; 0x928 <__stack+0x29>
     926:	50 c0       	rjmp	.+160    	; 0x9c8 <__stack+0xc9>
     928:	89 89       	ldd	r24, Y+17	; 0x11
     92a:	9a 89       	ldd	r25, Y+18	; 0x12
     92c:	8c 30       	cpi	r24, 0x0C	; 12
     92e:	91 05       	cpc	r25, r1
     930:	09 f4       	brne	.+2      	; 0x934 <__stack+0x35>
     932:	62 c0       	rjmp	.+196    	; 0x9f8 <__stack+0xf9>
     934:	3a c4       	rjmp	.+2164   	; 0x11aa <__stack+0x8ab>

            case 0x00:  // All LEDs OFF
                break;

            case 0x01: PORTLED0 &= ~(1<<LED3_PIN); // Red
     936:	a8 e2       	ldi	r26, 0x28	; 40
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	e8 e2       	ldi	r30, 0x28	; 40
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	87 7f       	andi	r24, 0xF7	; 247
     942:	8c 93       	st	X, r24
     944:	32 c4       	rjmp	.+2148   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x02: PORTLED0 &= ~(1<<LED0_PIN); // Green
     946:	a8 e2       	ldi	r26, 0x28	; 40
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	e8 e2       	ldi	r30, 0x28	; 40
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	8e 7f       	andi	r24, 0xFE	; 254
     952:	8c 93       	st	X, r24
     954:	2a c4       	rjmp	.+2132   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x03: PORTLED0 &= ~(1<<LED0_PIN); // Green
     956:	a8 e2       	ldi	r26, 0x28	; 40
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e8 e2       	ldi	r30, 0x28	; 40
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	8e 7f       	andi	r24, 0xFE	; 254
     962:	8c 93       	st	X, r24
                       PORTLED0 &= ~(1<<LED2_PIN); // Yellow
     964:	a8 e2       	ldi	r26, 0x28	; 40
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 e2       	ldi	r30, 0x28	; 40
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	8b 7f       	andi	r24, 0xFB	; 251
     970:	8c 93       	st	X, r24
     972:	1b c4       	rjmp	.+2102   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x04: PORTLED0 &= ~(1<<LED1_PIN); // White
     974:	a8 e2       	ldi	r26, 0x28	; 40
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 e2       	ldi	r30, 0x28	; 40
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	8d 7f       	andi	r24, 0xFD	; 253
     980:	8c 93       	st	X, r24
     982:	13 c4       	rjmp	.+2086   	; 0x11aa <__stack+0x8ab>
                break;


            /// --------- BLINK options -------------------------------
            case 0x09: PORTLED0 &= ~(1<<LED3_PIN); // Red
     984:	a8 e2       	ldi	r26, 0x28	; 40
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	e8 e2       	ldi	r30, 0x28	; 40
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	87 7f       	andi	r24, 0xF7	; 247
     990:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0008;// Activate RED blinking
     992:	eb 81       	ldd	r30, Y+3	; 0x03
     994:	fc 81       	ldd	r31, Y+4	; 0x04
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	88 60       	ori	r24, 0x08	; 8
     99c:	eb 81       	ldd	r30, Y+3	; 0x03
     99e:	fc 81       	ldd	r31, Y+4	; 0x04
     9a0:	91 83       	std	Z+1, r25	; 0x01
     9a2:	80 83       	st	Z, r24
     9a4:	02 c4       	rjmp	.+2052   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0A: PORTLED0 &= ~(1<<LED0_PIN); // GREEN
     9a6:	a8 e2       	ldi	r26, 0x28	; 40
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	e8 e2       	ldi	r30, 0x28	; 40
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	80 81       	ld	r24, Z
     9b0:	8e 7f       	andi	r24, 0xFE	; 254
     9b2:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0001;// Activate GREEN blinking
     9b4:	eb 81       	ldd	r30, Y+3	; 0x03
     9b6:	fc 81       	ldd	r31, Y+4	; 0x04
     9b8:	80 81       	ld	r24, Z
     9ba:	91 81       	ldd	r25, Z+1	; 0x01
     9bc:	81 60       	ori	r24, 0x01	; 1
     9be:	eb 81       	ldd	r30, Y+3	; 0x03
     9c0:	fc 81       	ldd	r31, Y+4	; 0x04
     9c2:	91 83       	std	Z+1, r25	; 0x01
     9c4:	80 83       	st	Z, r24
     9c6:	f1 c3       	rjmp	.+2018   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0B: PORTLED0 &= ~(1<<LED0_PIN); // Green
     9c8:	a8 e2       	ldi	r26, 0x28	; 40
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	e8 e2       	ldi	r30, 0x28	; 40
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	8e 7f       	andi	r24, 0xFE	; 254
     9d4:	8c 93       	st	X, r24
                       PORTLED0 &= ~(1<<LED2_PIN); // Yellow
     9d6:	a8 e2       	ldi	r26, 0x28	; 40
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e8 e2       	ldi	r30, 0x28	; 40
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	8b 7f       	andi	r24, 0xFB	; 251
     9e2:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0005;// Activate GREEN & YELLOW blinking
     9e4:	eb 81       	ldd	r30, Y+3	; 0x03
     9e6:	fc 81       	ldd	r31, Y+4	; 0x04
     9e8:	80 81       	ld	r24, Z
     9ea:	91 81       	ldd	r25, Z+1	; 0x01
     9ec:	85 60       	ori	r24, 0x05	; 5
     9ee:	eb 81       	ldd	r30, Y+3	; 0x03
     9f0:	fc 81       	ldd	r31, Y+4	; 0x04
     9f2:	91 83       	std	Z+1, r25	; 0x01
     9f4:	80 83       	st	Z, r24
     9f6:	d9 c3       	rjmp	.+1970   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0C: PORTLED0 &= ~(1<<LED1_PIN); // WHITE
     9f8:	a8 e2       	ldi	r26, 0x28	; 40
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	e8 e2       	ldi	r30, 0x28	; 40
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	8d 7f       	andi	r24, 0xFD	; 253
     a04:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0002;// Activate WHITE blinking
     a06:	eb 81       	ldd	r30, Y+3	; 0x03
     a08:	fc 81       	ldd	r31, Y+4	; 0x04
     a0a:	80 81       	ld	r24, Z
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	82 60       	ori	r24, 0x02	; 2
     a10:	eb 81       	ldd	r30, Y+3	; 0x03
     a12:	fc 81       	ldd	r31, Y+4	; 0x04
     a14:	91 83       	std	Z+1, r25	; 0x01
     a16:	80 83       	st	Z, r24
     a18:	c8 c3       	rjmp	.+1936   	; 0x11aa <__stack+0x8ab>
                break;
            default :
            ;
        }

    }else if (light_addr == 0x02 ){
     a1a:	8a 81       	ldd	r24, Y+2	; 0x02
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	09 f0       	breq	.+2      	; 0xa22 <__stack+0x123>
     a20:	e0 c0       	rjmp	.+448    	; 0xbe2 <__stack+0x2e3>
         /// Controls LED6  - LED9 ( 2nd 4-lighted)
        PORTLED1 |=(1<<LED6_PIN); // Green OFF
     a22:	a5 e2       	ldi	r26, 0x25	; 37
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e5 e2       	ldi	r30, 0x25	; 37
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	80 61       	ori	r24, 0x10	; 16
     a2e:	8c 93       	st	X, r24
        PORTLED1 |=(1<<LED7_PIN); // White OFF
     a30:	a5 e2       	ldi	r26, 0x25	; 37
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	e5 e2       	ldi	r30, 0x25	; 37
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	80 81       	ld	r24, Z
     a3a:	88 60       	ori	r24, 0x08	; 8
     a3c:	8c 93       	st	X, r24
        PORTLED1 |=(1<<LED8_PIN); // Yellow OFF
     a3e:	a5 e2       	ldi	r26, 0x25	; 37
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	e5 e2       	ldi	r30, 0x25	; 37
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	80 81       	ld	r24, Z
     a48:	84 60       	ori	r24, 0x04	; 4
     a4a:	8c 93       	st	X, r24
        PORTLED1 |=(1<<LED9_PIN); // Red OFF
     a4c:	a5 e2       	ldi	r26, 0x25	; 37
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	e5 e2       	ldi	r30, 0x25	; 37
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	82 60       	ori	r24, 0x02	; 2
     a58:	8c 93       	st	X, r24
        *led_blink_flag &= ~0x03C0;// DEactivate blinking LEDs
     a5a:	eb 81       	ldd	r30, Y+3	; 0x03
     a5c:	fc 81       	ldd	r31, Y+4	; 0x04
     a5e:	80 81       	ld	r24, Z
     a60:	91 81       	ldd	r25, Z+1	; 0x01
     a62:	8f 73       	andi	r24, 0x3F	; 63
     a64:	9c 7f       	andi	r25, 0xFC	; 252
     a66:	eb 81       	ldd	r30, Y+3	; 0x03
     a68:	fc 81       	ldd	r31, Y+4	; 0x04
     a6a:	91 83       	std	Z+1, r25	; 0x01
     a6c:	80 83       	st	Z, r24

        switch (byte2&0x0F){
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	88 2f       	mov	r24, r24
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	9c 01       	movw	r18, r24
     a76:	2f 70       	andi	r18, 0x0F	; 15
     a78:	30 70       	andi	r19, 0x00	; 0
     a7a:	38 8b       	std	Y+16, r19	; 0x10
     a7c:	2f 87       	std	Y+15, r18	; 0x0f
     a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     a80:	98 89       	ldd	r25, Y+16	; 0x10
     a82:	84 30       	cpi	r24, 0x04	; 4
     a84:	91 05       	cpc	r25, r1
     a86:	09 f4       	brne	.+2      	; 0xa8a <__stack+0x18b>
     a88:	58 c0       	rjmp	.+176    	; 0xb3a <__stack+0x23b>
     a8a:	2f 85       	ldd	r18, Y+15	; 0x0f
     a8c:	38 89       	ldd	r19, Y+16	; 0x10
     a8e:	25 30       	cpi	r18, 0x05	; 5
     a90:	31 05       	cpc	r19, r1
     a92:	b4 f4       	brge	.+44     	; 0xac0 <__stack+0x1c1>
     a94:	8f 85       	ldd	r24, Y+15	; 0x0f
     a96:	98 89       	ldd	r25, Y+16	; 0x10
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	91 05       	cpc	r25, r1
     a9c:	79 f1       	breq	.+94     	; 0xafc <__stack+0x1fd>
     a9e:	2f 85       	ldd	r18, Y+15	; 0x0f
     aa0:	38 89       	ldd	r19, Y+16	; 0x10
     aa2:	22 30       	cpi	r18, 0x02	; 2
     aa4:	31 05       	cpc	r19, r1
     aa6:	0c f4       	brge	.+2      	; 0xaaa <__stack+0x1ab>
     aa8:	80 c3       	rjmp	.+1792   	; 0x11aa <__stack+0x8ab>
     aaa:	8f 85       	ldd	r24, Y+15	; 0x0f
     aac:	98 89       	ldd	r25, Y+16	; 0x10
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	91 05       	cpc	r25, r1
     ab2:	61 f1       	breq	.+88     	; 0xb0c <__stack+0x20d>
     ab4:	2f 85       	ldd	r18, Y+15	; 0x0f
     ab6:	38 89       	ldd	r19, Y+16	; 0x10
     ab8:	23 30       	cpi	r18, 0x03	; 3
     aba:	31 05       	cpc	r19, r1
     abc:	79 f1       	breq	.+94     	; 0xb1c <__stack+0x21d>
     abe:	75 c3       	rjmp	.+1770   	; 0x11aa <__stack+0x8ab>
     ac0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ac2:	98 89       	ldd	r25, Y+16	; 0x10
     ac4:	8a 30       	cpi	r24, 0x0A	; 10
     ac6:	91 05       	cpc	r25, r1
     ac8:	09 f4       	brne	.+2      	; 0xacc <__stack+0x1cd>
     aca:	50 c0       	rjmp	.+160    	; 0xb6c <__stack+0x26d>
     acc:	2f 85       	ldd	r18, Y+15	; 0x0f
     ace:	38 89       	ldd	r19, Y+16	; 0x10
     ad0:	2b 30       	cpi	r18, 0x0B	; 11
     ad2:	31 05       	cpc	r19, r1
     ad4:	34 f4       	brge	.+12     	; 0xae2 <__stack+0x1e3>
     ad6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ad8:	98 89       	ldd	r25, Y+16	; 0x10
     ada:	89 30       	cpi	r24, 0x09	; 9
     adc:	91 05       	cpc	r25, r1
     ade:	a9 f1       	breq	.+106    	; 0xb4a <__stack+0x24b>
     ae0:	64 c3       	rjmp	.+1736   	; 0x11aa <__stack+0x8ab>
     ae2:	2f 85       	ldd	r18, Y+15	; 0x0f
     ae4:	38 89       	ldd	r19, Y+16	; 0x10
     ae6:	2b 30       	cpi	r18, 0x0B	; 11
     ae8:	31 05       	cpc	r19, r1
     aea:	09 f4       	brne	.+2      	; 0xaee <__stack+0x1ef>
     aec:	50 c0       	rjmp	.+160    	; 0xb8e <__stack+0x28f>
     aee:	8f 85       	ldd	r24, Y+15	; 0x0f
     af0:	98 89       	ldd	r25, Y+16	; 0x10
     af2:	8c 30       	cpi	r24, 0x0C	; 12
     af4:	91 05       	cpc	r25, r1
     af6:	09 f4       	brne	.+2      	; 0xafa <__stack+0x1fb>
     af8:	63 c0       	rjmp	.+198    	; 0xbc0 <__stack+0x2c1>
     afa:	57 c3       	rjmp	.+1710   	; 0x11aa <__stack+0x8ab>
            case 0x00: // All LEDs OFF
                break;
            case 0x01: PORTLED1 &= ~(1<<LED9_PIN); // Red
     afc:	a5 e2       	ldi	r26, 0x25	; 37
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	e5 e2       	ldi	r30, 0x25	; 37
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	8d 7f       	andi	r24, 0xFD	; 253
     b08:	8c 93       	st	X, r24
     b0a:	4f c3       	rjmp	.+1694   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x02: PORTLED1 &= ~(1<<LED8_PIN); // Green
     b0c:	a5 e2       	ldi	r26, 0x25	; 37
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	e5 e2       	ldi	r30, 0x25	; 37
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	8b 7f       	andi	r24, 0xFB	; 251
     b18:	8c 93       	st	X, r24
     b1a:	47 c3       	rjmp	.+1678   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x03: PORTLED1 &= ~(1<<LED6_PIN); // Green
     b1c:	a5 e2       	ldi	r26, 0x25	; 37
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e5 e2       	ldi	r30, 0x25	; 37
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	8f 7e       	andi	r24, 0xEF	; 239
     b28:	8c 93       	st	X, r24
                       PORTLED1 &= ~(1<<LED8_PIN); // Yellow
     b2a:	a5 e2       	ldi	r26, 0x25	; 37
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	e5 e2       	ldi	r30, 0x25	; 37
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	8b 7f       	andi	r24, 0xFB	; 251
     b36:	8c 93       	st	X, r24
     b38:	38 c3       	rjmp	.+1648   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x04: PORTLED1 &= ~(1<<LED7_PIN); // White
     b3a:	a5 e2       	ldi	r26, 0x25	; 37
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	e5 e2       	ldi	r30, 0x25	; 37
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	87 7f       	andi	r24, 0xF7	; 247
     b46:	8c 93       	st	X, r24
     b48:	30 c3       	rjmp	.+1632   	; 0x11aa <__stack+0x8ab>
                break;

            /// --------- BLINK options -------------------------------
            case 0x09: PORTLED1 &= ~(1<<LED9_PIN); // Red
     b4a:	a5 e2       	ldi	r26, 0x25	; 37
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
     b4e:	e5 e2       	ldi	r30, 0x25	; 37
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8d 7f       	andi	r24, 0xFD	; 253
     b56:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0200;// Activate RED blinking
     b58:	eb 81       	ldd	r30, Y+3	; 0x03
     b5a:	fc 81       	ldd	r31, Y+4	; 0x04
     b5c:	80 81       	ld	r24, Z
     b5e:	91 81       	ldd	r25, Z+1	; 0x01
     b60:	92 60       	ori	r25, 0x02	; 2
     b62:	eb 81       	ldd	r30, Y+3	; 0x03
     b64:	fc 81       	ldd	r31, Y+4	; 0x04
     b66:	91 83       	std	Z+1, r25	; 0x01
     b68:	80 83       	st	Z, r24
     b6a:	1f c3       	rjmp	.+1598   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0A: PORTLED1 &= ~(1<<LED8_PIN); // GREEN
     b6c:	a5 e2       	ldi	r26, 0x25	; 37
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	e5 e2       	ldi	r30, 0x25	; 37
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	8b 7f       	andi	r24, 0xFB	; 251
     b78:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0100;// Activate GREEN blinking
     b7a:	eb 81       	ldd	r30, Y+3	; 0x03
     b7c:	fc 81       	ldd	r31, Y+4	; 0x04
     b7e:	80 81       	ld	r24, Z
     b80:	91 81       	ldd	r25, Z+1	; 0x01
     b82:	91 60       	ori	r25, 0x01	; 1
     b84:	eb 81       	ldd	r30, Y+3	; 0x03
     b86:	fc 81       	ldd	r31, Y+4	; 0x04
     b88:	91 83       	std	Z+1, r25	; 0x01
     b8a:	80 83       	st	Z, r24
     b8c:	0e c3       	rjmp	.+1564   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0B: PORTLED1 &= ~(1<<LED6_PIN); // Green
     b8e:	a5 e2       	ldi	r26, 0x25	; 37
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e5 e2       	ldi	r30, 0x25	; 37
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	8f 7e       	andi	r24, 0xEF	; 239
     b9a:	8c 93       	st	X, r24
                       PORTLED1 &= ~(1<<LED8_PIN); // Yellow
     b9c:	a5 e2       	ldi	r26, 0x25	; 37
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e5 e2       	ldi	r30, 0x25	; 37
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8b 7f       	andi	r24, 0xFB	; 251
     ba8:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0140; // Activate GREEN & YELLOW blinking
     baa:	eb 81       	ldd	r30, Y+3	; 0x03
     bac:	fc 81       	ldd	r31, Y+4	; 0x04
     bae:	80 81       	ld	r24, Z
     bb0:	91 81       	ldd	r25, Z+1	; 0x01
     bb2:	80 64       	ori	r24, 0x40	; 64
     bb4:	91 60       	ori	r25, 0x01	; 1
     bb6:	eb 81       	ldd	r30, Y+3	; 0x03
     bb8:	fc 81       	ldd	r31, Y+4	; 0x04
     bba:	91 83       	std	Z+1, r25	; 0x01
     bbc:	80 83       	st	Z, r24
     bbe:	f5 c2       	rjmp	.+1514   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0C: PORTLED1 &= ~(1<<LED7_PIN); // WHITE
     bc0:	a5 e2       	ldi	r26, 0x25	; 37
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e5 e2       	ldi	r30, 0x25	; 37
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	87 7f       	andi	r24, 0xF7	; 247
     bcc:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0080; // Activate WHITE blinking
     bce:	eb 81       	ldd	r30, Y+3	; 0x03
     bd0:	fc 81       	ldd	r31, Y+4	; 0x04
     bd2:	80 81       	ld	r24, Z
     bd4:	91 81       	ldd	r25, Z+1	; 0x01
     bd6:	80 68       	ori	r24, 0x80	; 128
     bd8:	eb 81       	ldd	r30, Y+3	; 0x03
     bda:	fc 81       	ldd	r31, Y+4	; 0x04
     bdc:	91 83       	std	Z+1, r25	; 0x01
     bde:	80 83       	st	Z, r24
     be0:	e4 c2       	rjmp	.+1480   	; 0x11aa <__stack+0x8ab>
                break;

            default :
            ;
        }
    }else if (light_addr == 0x03 ){
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	83 30       	cpi	r24, 0x03	; 3
     be6:	09 f0       	breq	.+2      	; 0xbea <__stack+0x2eb>
     be8:	97 c0       	rjmp	.+302    	; 0xd18 <__stack+0x419>
        /// Controls LED6  - LED9 ( 3-lighted )
        PORTLED1 |=(1<<LED10_PIN); // White
     bea:	a5 e2       	ldi	r26, 0x25	; 37
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e5 e2       	ldi	r30, 0x25	; 37
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	81 60       	ori	r24, 0x01	; 1
     bf6:	8c 93       	st	X, r24
        PORTLED2 |=(1<<LED11_PIN); // Green
     bf8:	ab e2       	ldi	r26, 0x2B	; 43
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	eb e2       	ldi	r30, 0x2B	; 43
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	8c 93       	st	X, r24
        PORTLED2 |=(1<<LED12_PIN); // Red
     c06:	ab e2       	ldi	r26, 0x2B	; 43
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	eb e2       	ldi	r30, 0x2B	; 43
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	80 64       	ori	r24, 0x40	; 64
     c12:	8c 93       	st	X, r24
        *led_blink_flag &= ~0x1C00;// DEactivate blinking LEDs
     c14:	eb 81       	ldd	r30, Y+3	; 0x03
     c16:	fc 81       	ldd	r31, Y+4	; 0x04
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01
     c1c:	93 7e       	andi	r25, 0xE3	; 227
     c1e:	eb 81       	ldd	r30, Y+3	; 0x03
     c20:	fc 81       	ldd	r31, Y+4	; 0x04
     c22:	91 83       	std	Z+1, r25	; 0x01
     c24:	80 83       	st	Z, r24

        switch (byte2&0x0F){
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	9c 01       	movw	r18, r24
     c2e:	2f 70       	andi	r18, 0x0F	; 15
     c30:	30 70       	andi	r19, 0x00	; 0
     c32:	3e 87       	std	Y+14, r19	; 0x0e
     c34:	2d 87       	std	Y+13, r18	; 0x0d
     c36:	8d 85       	ldd	r24, Y+13	; 0x0d
     c38:	9e 85       	ldd	r25, Y+14	; 0x0e
     c3a:	83 30       	cpi	r24, 0x03	; 3
     c3c:	91 05       	cpc	r25, r1
     c3e:	89 f1       	breq	.+98     	; 0xca2 <__stack+0x3a3>
     c40:	2d 85       	ldd	r18, Y+13	; 0x0d
     c42:	3e 85       	ldd	r19, Y+14	; 0x0e
     c44:	24 30       	cpi	r18, 0x04	; 4
     c46:	31 05       	cpc	r19, r1
     c48:	5c f4       	brge	.+22     	; 0xc60 <__stack+0x361>
     c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	91 05       	cpc	r25, r1
     c52:	b9 f0       	breq	.+46     	; 0xc82 <__stack+0x383>
     c54:	2d 85       	ldd	r18, Y+13	; 0x0d
     c56:	3e 85       	ldd	r19, Y+14	; 0x0e
     c58:	22 30       	cpi	r18, 0x02	; 2
     c5a:	31 05       	cpc	r19, r1
     c5c:	d4 f4       	brge	.+52     	; 0xc92 <__stack+0x393>
     c5e:	a5 c2       	rjmp	.+1354   	; 0x11aa <__stack+0x8ab>
     c60:	8d 85       	ldd	r24, Y+13	; 0x0d
     c62:	9e 85       	ldd	r25, Y+14	; 0x0e
     c64:	8a 30       	cpi	r24, 0x0A	; 10
     c66:	91 05       	cpc	r25, r1
     c68:	a9 f1       	breq	.+106    	; 0xcd4 <__stack+0x3d5>
     c6a:	2d 85       	ldd	r18, Y+13	; 0x0d
     c6c:	3e 85       	ldd	r19, Y+14	; 0x0e
     c6e:	2b 30       	cpi	r18, 0x0B	; 11
     c70:	31 05       	cpc	r19, r1
     c72:	09 f4       	brne	.+2      	; 0xc76 <__stack+0x377>
     c74:	40 c0       	rjmp	.+128    	; 0xcf6 <__stack+0x3f7>
     c76:	8d 85       	ldd	r24, Y+13	; 0x0d
     c78:	9e 85       	ldd	r25, Y+14	; 0x0e
     c7a:	89 30       	cpi	r24, 0x09	; 9
     c7c:	91 05       	cpc	r25, r1
     c7e:	c9 f0       	breq	.+50     	; 0xcb2 <__stack+0x3b3>
     c80:	94 c2       	rjmp	.+1320   	; 0x11aa <__stack+0x8ab>
            case 0x00: // All LEDs OFF
                break;
            case 0x01: PORTLED2 &= ~(1<<LED12_PIN); // Red
     c82:	ab e2       	ldi	r26, 0x2B	; 43
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	eb e2       	ldi	r30, 0x2B	; 43
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	8f 7b       	andi	r24, 0xBF	; 191
     c8e:	8c 93       	st	X, r24
     c90:	8c c2       	rjmp	.+1304   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x02: PORTLED2 &= ~(1<<LED11_PIN); // Green
     c92:	ab e2       	ldi	r26, 0x2B	; 43
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	eb e2       	ldi	r30, 0x2B	; 43
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8f 77       	andi	r24, 0x7F	; 127
     c9e:	8c 93       	st	X, r24
     ca0:	84 c2       	rjmp	.+1288   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x03: PORTLED1 &= ~(1<<LED10_PIN); // White
     ca2:	a5 e2       	ldi	r26, 0x25	; 37
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e5 e2       	ldi	r30, 0x25	; 37
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8e 7f       	andi	r24, 0xFE	; 254
     cae:	8c 93       	st	X, r24
     cb0:	7c c2       	rjmp	.+1272   	; 0x11aa <__stack+0x8ab>
                break;
            /// --------- BLINK options -------------------------------
            case 0x09: PORTLED2 &= ~(1<<LED12_PIN); // Red
     cb2:	ab e2       	ldi	r26, 0x2B	; 43
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	eb e2       	ldi	r30, 0x2B	; 43
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8f 7b       	andi	r24, 0xBF	; 191
     cbe:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x1000;// Activate RED blinking
     cc0:	eb 81       	ldd	r30, Y+3	; 0x03
     cc2:	fc 81       	ldd	r31, Y+4	; 0x04
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	90 61       	ori	r25, 0x10	; 16
     cca:	eb 81       	ldd	r30, Y+3	; 0x03
     ccc:	fc 81       	ldd	r31, Y+4	; 0x04
     cce:	91 83       	std	Z+1, r25	; 0x01
     cd0:	80 83       	st	Z, r24
     cd2:	6b c2       	rjmp	.+1238   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0A: PORTLED2 &= ~(1<<LED11_PIN); // Green
     cd4:	ab e2       	ldi	r26, 0x2B	; 43
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	eb e2       	ldi	r30, 0x2B	; 43
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8f 77       	andi	r24, 0x7F	; 127
     ce0:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0800;// Activate Green blinking
     ce2:	eb 81       	ldd	r30, Y+3	; 0x03
     ce4:	fc 81       	ldd	r31, Y+4	; 0x04
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	98 60       	ori	r25, 0x08	; 8
     cec:	eb 81       	ldd	r30, Y+3	; 0x03
     cee:	fc 81       	ldd	r31, Y+4	; 0x04
     cf0:	91 83       	std	Z+1, r25	; 0x01
     cf2:	80 83       	st	Z, r24
     cf4:	5a c2       	rjmp	.+1204   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0B: PORTLED1 &= ~(1<<LED10_PIN); // White
     cf6:	a5 e2       	ldi	r26, 0x25	; 37
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e5 e2       	ldi	r30, 0x25	; 37
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	8e 7f       	andi	r24, 0xFE	; 254
     d02:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0400;// Activate White blinking
     d04:	eb 81       	ldd	r30, Y+3	; 0x03
     d06:	fc 81       	ldd	r31, Y+4	; 0x04
     d08:	80 81       	ld	r24, Z
     d0a:	91 81       	ldd	r25, Z+1	; 0x01
     d0c:	94 60       	ori	r25, 0x04	; 4
     d0e:	eb 81       	ldd	r30, Y+3	; 0x03
     d10:	fc 81       	ldd	r31, Y+4	; 0x04
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	80 83       	st	Z, r24
     d16:	49 c2       	rjmp	.+1170   	; 0x11aa <__stack+0x8ab>
                break;
            default :
            ;
        }
    }else if (light_addr == 0x04 ){
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	84 30       	cpi	r24, 0x04	; 4
     d1c:	09 f0       	breq	.+2      	; 0xd20 <__stack+0x421>
     d1e:	71 c0       	rjmp	.+226    	; 0xe02 <__stack+0x503>
        /// Controls LED4  - LED5 ( 2-lighted )
        PORTLED0 |=(1<<LED4_PIN); // white
     d20:	a8 e2       	ldi	r26, 0x28	; 40
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e8 e2       	ldi	r30, 0x28	; 40
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 61       	ori	r24, 0x10	; 16
     d2c:	8c 93       	st	X, r24
        PORTLED0 |=(1<<LED5_PIN); // blue
     d2e:	a8 e2       	ldi	r26, 0x28	; 40
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e8 e2       	ldi	r30, 0x28	; 40
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	80 62       	ori	r24, 0x20	; 32
     d3a:	8c 93       	st	X, r24
        *led_blink_flag &= ~0x0030;// DEactivate blinking LEDs
     d3c:	eb 81       	ldd	r30, Y+3	; 0x03
     d3e:	fc 81       	ldd	r31, Y+4	; 0x04
     d40:	80 81       	ld	r24, Z
     d42:	91 81       	ldd	r25, Z+1	; 0x01
     d44:	8f 7c       	andi	r24, 0xCF	; 207
     d46:	eb 81       	ldd	r30, Y+3	; 0x03
     d48:	fc 81       	ldd	r31, Y+4	; 0x04
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	80 83       	st	Z, r24

        switch (byte2&0x0F){
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	9c 01       	movw	r18, r24
     d56:	2f 70       	andi	r18, 0x0F	; 15
     d58:	30 70       	andi	r19, 0x00	; 0
     d5a:	3c 87       	std	Y+12, r19	; 0x0c
     d5c:	2b 87       	std	Y+11, r18	; 0x0b
     d5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d60:	9c 85       	ldd	r25, Y+12	; 0x0c
     d62:	82 30       	cpi	r24, 0x02	; 2
     d64:	91 05       	cpc	r25, r1
     d66:	19 f1       	breq	.+70     	; 0xdae <__stack+0x4af>
     d68:	2b 85       	ldd	r18, Y+11	; 0x0b
     d6a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d6c:	23 30       	cpi	r18, 0x03	; 3
     d6e:	31 05       	cpc	r19, r1
     d70:	5c f4       	brge	.+22     	; 0xd88 <__stack+0x489>
     d72:	8b 85       	ldd	r24, Y+11	; 0x0b
     d74:	9c 85       	ldd	r25, Y+12	; 0x0c
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	09 f4       	brne	.+2      	; 0xd7c <__stack+0x47d>
     d7a:	17 c2       	rjmp	.+1070   	; 0x11aa <__stack+0x8ab>
     d7c:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7e:	3c 85       	ldd	r19, Y+12	; 0x0c
     d80:	21 30       	cpi	r18, 0x01	; 1
     d82:	31 05       	cpc	r19, r1
     d84:	61 f0       	breq	.+24     	; 0xd9e <__stack+0x49f>
     d86:	11 c2       	rjmp	.+1058   	; 0x11aa <__stack+0x8ab>
     d88:	8b 85       	ldd	r24, Y+11	; 0x0b
     d8a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d8c:	89 30       	cpi	r24, 0x09	; 9
     d8e:	91 05       	cpc	r25, r1
     d90:	b1 f0       	breq	.+44     	; 0xdbe <__stack+0x4bf>
     d92:	2b 85       	ldd	r18, Y+11	; 0x0b
     d94:	3c 85       	ldd	r19, Y+12	; 0x0c
     d96:	2a 30       	cpi	r18, 0x0A	; 10
     d98:	31 05       	cpc	r19, r1
     d9a:	11 f1       	breq	.+68     	; 0xde0 <__stack+0x4e1>
     d9c:	06 c2       	rjmp	.+1036   	; 0x11aa <__stack+0x8ab>
            case 0x00: // All LEDs OFF
                break;
            case 0x01: PORTLED0 &= ~(1<<LED5_PIN); // blue
     d9e:	a8 e2       	ldi	r26, 0x28	; 40
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e8 e2       	ldi	r30, 0x28	; 40
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	8f 7d       	andi	r24, 0xDF	; 223
     daa:	8c 93       	st	X, r24
     dac:	fe c1       	rjmp	.+1020   	; 0x11aa <__stack+0x8ab>
                break;
            case 0x02: PORTLED0 &= ~(1<<LED4_PIN); // white
     dae:	a8 e2       	ldi	r26, 0x28	; 40
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e8 e2       	ldi	r30, 0x28	; 40
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8f 7e       	andi	r24, 0xEF	; 239
     dba:	8c 93       	st	X, r24
     dbc:	f6 c1       	rjmp	.+1004   	; 0x11aa <__stack+0x8ab>
                break;
            /// --------- BLINK options -------------------------------
            case 0x09: PORTLED0 &= ~(1<<LED5_PIN); // blue
     dbe:	a8 e2       	ldi	r26, 0x28	; 40
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e8 e2       	ldi	r30, 0x28	; 40
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8f 7d       	andi	r24, 0xDF	; 223
     dca:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0020;// Activate blue blinking
     dcc:	eb 81       	ldd	r30, Y+3	; 0x03
     dce:	fc 81       	ldd	r31, Y+4	; 0x04
     dd0:	80 81       	ld	r24, Z
     dd2:	91 81       	ldd	r25, Z+1	; 0x01
     dd4:	80 62       	ori	r24, 0x20	; 32
     dd6:	eb 81       	ldd	r30, Y+3	; 0x03
     dd8:	fc 81       	ldd	r31, Y+4	; 0x04
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
     dde:	e5 c1       	rjmp	.+970    	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0A: PORTLED0 &= ~(1<<LED4_PIN); // white
     de0:	a8 e2       	ldi	r26, 0x28	; 40
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 e2       	ldi	r30, 0x28	; 40
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8f 7e       	andi	r24, 0xEF	; 239
     dec:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0010;// Activate white blinking
     dee:	eb 81       	ldd	r30, Y+3	; 0x03
     df0:	fc 81       	ldd	r31, Y+4	; 0x04
     df2:	80 81       	ld	r24, Z
     df4:	91 81       	ldd	r25, Z+1	; 0x01
     df6:	80 61       	ori	r24, 0x10	; 16
     df8:	eb 81       	ldd	r30, Y+3	; 0x03
     dfa:	fc 81       	ldd	r31, Y+4	; 0x04
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	80 83       	st	Z, r24
     e00:	d4 c1       	rjmp	.+936    	; 0x11aa <__stack+0x8ab>
                break;

            default :
            ;
        }
        }else if (light_addr == 0x11 ){
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	81 31       	cpi	r24, 0x11	; 17
     e06:	09 f0       	breq	.+2      	; 0xe0a <__stack+0x50b>
     e08:	71 c0       	rjmp	.+226    	; 0xeec <__stack+0x5ed>
            /// Controls LED11  - LED12 ( 2-lighted )
            /// entrance mode
            /// ==================== MUST be revised !! =========================
            PORTLED2 |=(1<<LED12_PIN); // blue
     e0a:	ab e2       	ldi	r26, 0x2B	; 43
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	eb e2       	ldi	r30, 0x2B	; 43
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 64       	ori	r24, 0x40	; 64
     e16:	8c 93       	st	X, r24
            PORTLED2 |=(1<<LED11_PIN); // white
     e18:	ab e2       	ldi	r26, 0x2B	; 43
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	eb e2       	ldi	r30, 0x2B	; 43
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	80 68       	ori	r24, 0x80	; 128
     e24:	8c 93       	st	X, r24
            *led_blink_flag &= ~0x1800;// DEactivate blinking LEDs
     e26:	eb 81       	ldd	r30, Y+3	; 0x03
     e28:	fc 81       	ldd	r31, Y+4	; 0x04
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	97 7e       	andi	r25, 0xE7	; 231
     e30:	eb 81       	ldd	r30, Y+3	; 0x03
     e32:	fc 81       	ldd	r31, Y+4	; 0x04
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	80 83       	st	Z, r24
            switch (byte2&0x0F){
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	9c 01       	movw	r18, r24
     e40:	2f 70       	andi	r18, 0x0F	; 15
     e42:	30 70       	andi	r19, 0x00	; 0
     e44:	3a 87       	std	Y+10, r19	; 0x0a
     e46:	29 87       	std	Y+9, r18	; 0x09
     e48:	89 85       	ldd	r24, Y+9	; 0x09
     e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	91 05       	cpc	r25, r1
     e50:	19 f1       	breq	.+70     	; 0xe98 <__stack+0x599>
     e52:	29 85       	ldd	r18, Y+9	; 0x09
     e54:	3a 85       	ldd	r19, Y+10	; 0x0a
     e56:	23 30       	cpi	r18, 0x03	; 3
     e58:	31 05       	cpc	r19, r1
     e5a:	5c f4       	brge	.+22     	; 0xe72 <__stack+0x573>
     e5c:	89 85       	ldd	r24, Y+9	; 0x09
     e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	09 f4       	brne	.+2      	; 0xe66 <__stack+0x567>
     e64:	a2 c1       	rjmp	.+836    	; 0x11aa <__stack+0x8ab>
     e66:	29 85       	ldd	r18, Y+9	; 0x09
     e68:	3a 85       	ldd	r19, Y+10	; 0x0a
     e6a:	21 30       	cpi	r18, 0x01	; 1
     e6c:	31 05       	cpc	r19, r1
     e6e:	61 f0       	breq	.+24     	; 0xe88 <__stack+0x589>
     e70:	9c c1       	rjmp	.+824    	; 0x11aa <__stack+0x8ab>
     e72:	89 85       	ldd	r24, Y+9	; 0x09
     e74:	9a 85       	ldd	r25, Y+10	; 0x0a
     e76:	89 30       	cpi	r24, 0x09	; 9
     e78:	91 05       	cpc	r25, r1
     e7a:	b1 f0       	breq	.+44     	; 0xea8 <__stack+0x5a9>
     e7c:	29 85       	ldd	r18, Y+9	; 0x09
     e7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e80:	2a 30       	cpi	r18, 0x0A	; 10
     e82:	31 05       	cpc	r19, r1
     e84:	11 f1       	breq	.+68     	; 0xeca <__stack+0x5cb>
     e86:	91 c1       	rjmp	.+802    	; 0x11aa <__stack+0x8ab>
            case 0x00: // All LEDs OFF
                break;
            case 0x01: PORTLED2 &= ~(1<<LED12_PIN); // blue
     e88:	ab e2       	ldi	r26, 0x2B	; 43
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	eb e2       	ldi	r30, 0x2B	; 43
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 7b       	andi	r24, 0xBF	; 191
     e94:	8c 93       	st	X, r24
     e96:	89 c1       	rjmp	.+786    	; 0x11aa <__stack+0x8ab>
                break;
            case 0x02: PORTLED2 &= ~(1<<LED11_PIN); // white
     e98:	ab e2       	ldi	r26, 0x2B	; 43
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	eb e2       	ldi	r30, 0x2B	; 43
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 77       	andi	r24, 0x7F	; 127
     ea4:	8c 93       	st	X, r24
     ea6:	81 c1       	rjmp	.+770    	; 0x11aa <__stack+0x8ab>
                break;
            /// --------- BLINK options -------------------------------
            case 0x09: PORTLED2 &= ~(1<<LED12_PIN); // blue
     ea8:	ab e2       	ldi	r26, 0x2B	; 43
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	eb e2       	ldi	r30, 0x2B	; 43
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	8f 7b       	andi	r24, 0xBF	; 191
     eb4:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x1000;// Activate blue blinking
     eb6:	eb 81       	ldd	r30, Y+3	; 0x03
     eb8:	fc 81       	ldd	r31, Y+4	; 0x04
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	90 61       	ori	r25, 0x10	; 16
     ec0:	eb 81       	ldd	r30, Y+3	; 0x03
     ec2:	fc 81       	ldd	r31, Y+4	; 0x04
     ec4:	91 83       	std	Z+1, r25	; 0x01
     ec6:	80 83       	st	Z, r24
     ec8:	70 c1       	rjmp	.+736    	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0A: PORTLED2 &= ~(1<<LED11_PIN); // white
     eca:	ab e2       	ldi	r26, 0x2B	; 43
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e2       	ldi	r30, 0x2B	; 43
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	8f 77       	andi	r24, 0x7F	; 127
     ed6:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0800;// Activate white blinking
     ed8:	eb 81       	ldd	r30, Y+3	; 0x03
     eda:	fc 81       	ldd	r31, Y+4	; 0x04
     edc:	80 81       	ld	r24, Z
     ede:	91 81       	ldd	r25, Z+1	; 0x01
     ee0:	98 60       	ori	r25, 0x08	; 8
     ee2:	eb 81       	ldd	r30, Y+3	; 0x03
     ee4:	fc 81       	ldd	r31, Y+4	; 0x04
     ee6:	91 83       	std	Z+1, r25	; 0x01
     ee8:	80 83       	st	Z, r24
     eea:	5f c1       	rjmp	.+702    	; 0x11aa <__stack+0x8ab>
                break;
            default :
            ;
        }
        }else if (light_addr == 0x12 ){
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	82 31       	cpi	r24, 0x12	; 18
     ef0:	09 f0       	breq	.+2      	; 0xef4 <__stack+0x5f5>
     ef2:	71 c0       	rjmp	.+226    	; 0xfd6 <__stack+0x6d7>
            /// Controls LED4  - LED5 ( 2-lighted )
            /// entrance mode
            /// ==================== MUST be revised !! =========================
            PORTLED0 |=(1<<LED4_PIN); // white
     ef4:	a8 e2       	ldi	r26, 0x28	; 40
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 e2       	ldi	r30, 0x28	; 40
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	80 61       	ori	r24, 0x10	; 16
     f00:	8c 93       	st	X, r24
            PORTLED0 |=(1<<LED5_PIN); // blue
     f02:	a8 e2       	ldi	r26, 0x28	; 40
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e8 e2       	ldi	r30, 0x28	; 40
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 62       	ori	r24, 0x20	; 32
     f0e:	8c 93       	st	X, r24
            *led_blink_flag &= ~0x0030;// DEactivate blinking LEDs
     f10:	eb 81       	ldd	r30, Y+3	; 0x03
     f12:	fc 81       	ldd	r31, Y+4	; 0x04
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	8f 7c       	andi	r24, 0xCF	; 207
     f1a:	eb 81       	ldd	r30, Y+3	; 0x03
     f1c:	fc 81       	ldd	r31, Y+4	; 0x04
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
            switch (byte2&0x0F){
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	9c 01       	movw	r18, r24
     f2a:	2f 70       	andi	r18, 0x0F	; 15
     f2c:	30 70       	andi	r19, 0x00	; 0
     f2e:	38 87       	std	Y+8, r19	; 0x08
     f30:	2f 83       	std	Y+7, r18	; 0x07
     f32:	8f 81       	ldd	r24, Y+7	; 0x07
     f34:	98 85       	ldd	r25, Y+8	; 0x08
     f36:	82 30       	cpi	r24, 0x02	; 2
     f38:	91 05       	cpc	r25, r1
     f3a:	19 f1       	breq	.+70     	; 0xf82 <__stack+0x683>
     f3c:	2f 81       	ldd	r18, Y+7	; 0x07
     f3e:	38 85       	ldd	r19, Y+8	; 0x08
     f40:	23 30       	cpi	r18, 0x03	; 3
     f42:	31 05       	cpc	r19, r1
     f44:	5c f4       	brge	.+22     	; 0xf5c <__stack+0x65d>
     f46:	8f 81       	ldd	r24, Y+7	; 0x07
     f48:	98 85       	ldd	r25, Y+8	; 0x08
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	09 f4       	brne	.+2      	; 0xf50 <__stack+0x651>
     f4e:	2d c1       	rjmp	.+602    	; 0x11aa <__stack+0x8ab>
     f50:	2f 81       	ldd	r18, Y+7	; 0x07
     f52:	38 85       	ldd	r19, Y+8	; 0x08
     f54:	21 30       	cpi	r18, 0x01	; 1
     f56:	31 05       	cpc	r19, r1
     f58:	61 f0       	breq	.+24     	; 0xf72 <__stack+0x673>
     f5a:	27 c1       	rjmp	.+590    	; 0x11aa <__stack+0x8ab>
     f5c:	8f 81       	ldd	r24, Y+7	; 0x07
     f5e:	98 85       	ldd	r25, Y+8	; 0x08
     f60:	89 30       	cpi	r24, 0x09	; 9
     f62:	91 05       	cpc	r25, r1
     f64:	b1 f0       	breq	.+44     	; 0xf92 <__stack+0x693>
     f66:	2f 81       	ldd	r18, Y+7	; 0x07
     f68:	38 85       	ldd	r19, Y+8	; 0x08
     f6a:	2a 30       	cpi	r18, 0x0A	; 10
     f6c:	31 05       	cpc	r19, r1
     f6e:	11 f1       	breq	.+68     	; 0xfb4 <__stack+0x6b5>
     f70:	1c c1       	rjmp	.+568    	; 0x11aa <__stack+0x8ab>
            case 0x00: // All LEDs OFF
                break;
            case 0x01: PORTLED0 &= ~(1<<LED5_PIN); // blue
     f72:	a8 e2       	ldi	r26, 0x28	; 40
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e8 e2       	ldi	r30, 0x28	; 40
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	8f 7d       	andi	r24, 0xDF	; 223
     f7e:	8c 93       	st	X, r24
     f80:	14 c1       	rjmp	.+552    	; 0x11aa <__stack+0x8ab>
                break;
            case 0x02: PORTLED0 &= ~(1<<LED4_PIN); // white
     f82:	a8 e2       	ldi	r26, 0x28	; 40
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e8 e2       	ldi	r30, 0x28	; 40
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8f 7e       	andi	r24, 0xEF	; 239
     f8e:	8c 93       	st	X, r24
     f90:	0c c1       	rjmp	.+536    	; 0x11aa <__stack+0x8ab>
                break;
            /// --------- BLINK options -------------------------------
            case 0x09: PORTLED0 &= ~(1<<LED5_PIN); // blue
     f92:	a8 e2       	ldi	r26, 0x28	; 40
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e8 e2       	ldi	r30, 0x28	; 40
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8f 7d       	andi	r24, 0xDF	; 223
     f9e:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0020;// Activate blue blinking
     fa0:	eb 81       	ldd	r30, Y+3	; 0x03
     fa2:	fc 81       	ldd	r31, Y+4	; 0x04
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	80 62       	ori	r24, 0x20	; 32
     faa:	eb 81       	ldd	r30, Y+3	; 0x03
     fac:	fc 81       	ldd	r31, Y+4	; 0x04
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	80 83       	st	Z, r24
     fb2:	fb c0       	rjmp	.+502    	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0A: PORTLED0 &= ~(1<<LED4_PIN); // white
     fb4:	a8 e2       	ldi	r26, 0x28	; 40
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e8 e2       	ldi	r30, 0x28	; 40
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8f 7e       	andi	r24, 0xEF	; 239
     fc0:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0010;// Activate white blinking
     fc2:	eb 81       	ldd	r30, Y+3	; 0x03
     fc4:	fc 81       	ldd	r31, Y+4	; 0x04
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	80 61       	ori	r24, 0x10	; 16
     fcc:	eb 81       	ldd	r30, Y+3	; 0x03
     fce:	fc 81       	ldd	r31, Y+4	; 0x04
     fd0:	91 83       	std	Z+1, r25	; 0x01
     fd2:	80 83       	st	Z, r24
     fd4:	ea c0       	rjmp	.+468    	; 0x11aa <__stack+0x8ab>
                break;
            default :
            ;
        }
        }else if (light_addr == 0x15 ){
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	85 31       	cpi	r24, 0x15	; 21
     fda:	09 f0       	breq	.+2      	; 0xfde <__stack+0x6df>
     fdc:	e6 c0       	rjmp	.+460    	; 0x11aa <__stack+0x8ab>
            /// Controls LED6  - LED10 ( 5-lighted )
            /// entrance mode only
            ///
            PORTLED1 |=(1<<LED6_PIN); // yellow 1
     fde:	a5 e2       	ldi	r26, 0x25	; 37
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e5 e2       	ldi	r30, 0x25	; 37
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	80 61       	ori	r24, 0x10	; 16
     fea:	8c 93       	st	X, r24
            PORTLED1 |=(1<<LED7_PIN); // green
     fec:	a5 e2       	ldi	r26, 0x25	; 37
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e5 e2       	ldi	r30, 0x25	; 37
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	88 60       	ori	r24, 0x08	; 8
     ff8:	8c 93       	st	X, r24
            PORTLED1 |=(1<<LED8_PIN); // red
     ffa:	a5 e2       	ldi	r26, 0x25	; 37
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e5 e2       	ldi	r30, 0x25	; 37
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	84 60       	ori	r24, 0x04	; 4
    1006:	8c 93       	st	X, r24
            PORTLED1 |=(1<<LED9_PIN); // white
    1008:	a5 e2       	ldi	r26, 0x25	; 37
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e5 e2       	ldi	r30, 0x25	; 37
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	82 60       	ori	r24, 0x02	; 2
    1014:	8c 93       	st	X, r24
            PORTLED1 |=(1<<LED10_PIN); // yellow 2
    1016:	a5 e2       	ldi	r26, 0x25	; 37
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e5 e2       	ldi	r30, 0x25	; 37
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	81 60       	ori	r24, 0x01	; 1
    1022:	8c 93       	st	X, r24
            *led_blink_flag &= ~0x07C0;// DEactivate blinking LEDs
    1024:	eb 81       	ldd	r30, Y+3	; 0x03
    1026:	fc 81       	ldd	r31, Y+4	; 0x04
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	8f 73       	andi	r24, 0x3F	; 63
    102e:	98 7f       	andi	r25, 0xF8	; 248
    1030:	eb 81       	ldd	r30, Y+3	; 0x03
    1032:	fc 81       	ldd	r31, Y+4	; 0x04
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	80 83       	st	Z, r24
            switch (byte2&0x0F){
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9c 01       	movw	r18, r24
    1040:	2f 70       	andi	r18, 0x0F	; 15
    1042:	30 70       	andi	r19, 0x00	; 0
    1044:	3e 83       	std	Y+6, r19	; 0x06
    1046:	2d 83       	std	Y+5, r18	; 0x05
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	84 30       	cpi	r24, 0x04	; 4
    104e:	91 05       	cpc	r25, r1
    1050:	09 f4       	brne	.+2      	; 0x1054 <__stack+0x755>
    1052:	58 c0       	rjmp	.+176    	; 0x1104 <__stack+0x805>
    1054:	2d 81       	ldd	r18, Y+5	; 0x05
    1056:	3e 81       	ldd	r19, Y+6	; 0x06
    1058:	25 30       	cpi	r18, 0x05	; 5
    105a:	31 05       	cpc	r19, r1
    105c:	b4 f4       	brge	.+44     	; 0x108a <__stack+0x78b>
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	91 05       	cpc	r25, r1
    1066:	79 f1       	breq	.+94     	; 0x10c6 <__stack+0x7c7>
    1068:	2d 81       	ldd	r18, Y+5	; 0x05
    106a:	3e 81       	ldd	r19, Y+6	; 0x06
    106c:	22 30       	cpi	r18, 0x02	; 2
    106e:	31 05       	cpc	r19, r1
    1070:	0c f4       	brge	.+2      	; 0x1074 <__stack+0x775>
    1072:	9b c0       	rjmp	.+310    	; 0x11aa <__stack+0x8ab>
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	91 05       	cpc	r25, r1
    107c:	61 f1       	breq	.+88     	; 0x10d6 <__stack+0x7d7>
    107e:	2d 81       	ldd	r18, Y+5	; 0x05
    1080:	3e 81       	ldd	r19, Y+6	; 0x06
    1082:	23 30       	cpi	r18, 0x03	; 3
    1084:	31 05       	cpc	r19, r1
    1086:	b1 f1       	breq	.+108    	; 0x10f4 <__stack+0x7f5>
    1088:	90 c0       	rjmp	.+288    	; 0x11aa <__stack+0x8ab>
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	8a 30       	cpi	r24, 0x0A	; 10
    1090:	91 05       	cpc	r25, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <__stack+0x797>
    1094:	50 c0       	rjmp	.+160    	; 0x1136 <__stack+0x837>
    1096:	2d 81       	ldd	r18, Y+5	; 0x05
    1098:	3e 81       	ldd	r19, Y+6	; 0x06
    109a:	2b 30       	cpi	r18, 0x0B	; 11
    109c:	31 05       	cpc	r19, r1
    109e:	34 f4       	brge	.+12     	; 0x10ac <__stack+0x7ad>
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
    10a2:	9e 81       	ldd	r25, Y+6	; 0x06
    10a4:	89 30       	cpi	r24, 0x09	; 9
    10a6:	91 05       	cpc	r25, r1
    10a8:	a9 f1       	breq	.+106    	; 0x1114 <__stack+0x815>
    10aa:	7f c0       	rjmp	.+254    	; 0x11aa <__stack+0x8ab>
    10ac:	2d 81       	ldd	r18, Y+5	; 0x05
    10ae:	3e 81       	ldd	r19, Y+6	; 0x06
    10b0:	2b 30       	cpi	r18, 0x0B	; 11
    10b2:	31 05       	cpc	r19, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <__stack+0x7b9>
    10b6:	58 c0       	rjmp	.+176    	; 0x1168 <__stack+0x869>
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	9e 81       	ldd	r25, Y+6	; 0x06
    10bc:	8c 30       	cpi	r24, 0x0C	; 12
    10be:	91 05       	cpc	r25, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <__stack+0x7c5>
    10c2:	63 c0       	rjmp	.+198    	; 0x118a <__stack+0x88b>
    10c4:	72 c0       	rjmp	.+228    	; 0x11aa <__stack+0x8ab>
            case 0x00: // All LEDs OFF
                break;
            case 0x01: PORTLED1 &= ~(1<<LED8_PIN); // red
    10c6:	a5 e2       	ldi	r26, 0x25	; 37
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e5 e2       	ldi	r30, 0x25	; 37
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8b 7f       	andi	r24, 0xFB	; 251
    10d2:	8c 93       	st	X, r24
    10d4:	6a c0       	rjmp	.+212    	; 0x11aa <__stack+0x8ab>
                break;
            case 0x02: PORTLED1 &= ~(1<<LED6_PIN); // yellow 1
    10d6:	a5 e2       	ldi	r26, 0x25	; 37
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e2       	ldi	r30, 0x25	; 37
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	8f 7e       	andi	r24, 0xEF	; 239
    10e2:	8c 93       	st	X, r24
                       PORTLED1 &= ~(1<<LED10_PIN); // yellow 2
    10e4:	a5 e2       	ldi	r26, 0x25	; 37
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e5 e2       	ldi	r30, 0x25	; 37
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8e 7f       	andi	r24, 0xFE	; 254
    10f0:	8c 93       	st	X, r24
    10f2:	5b c0       	rjmp	.+182    	; 0x11aa <__stack+0x8ab>
                break;
            case 0x03: PORTLED1 &= ~(1<<LED9_PIN); // white
    10f4:	a5 e2       	ldi	r26, 0x25	; 37
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e2       	ldi	r30, 0x25	; 37
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8d 7f       	andi	r24, 0xFD	; 253
    1100:	8c 93       	st	X, r24
    1102:	53 c0       	rjmp	.+166    	; 0x11aa <__stack+0x8ab>
                break;
            case 0x04: PORTLED1 &= ~(1<<LED7_PIN); // green
    1104:	a5 e2       	ldi	r26, 0x25	; 37
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e5 e2       	ldi	r30, 0x25	; 37
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	87 7f       	andi	r24, 0xF7	; 247
    1110:	8c 93       	st	X, r24
    1112:	4b c0       	rjmp	.+150    	; 0x11aa <__stack+0x8ab>
                break;
            /// --------- BLINK options -------------------------------
            case 0x09: PORTLED1 &= ~(1<<LED8_PIN); // red
    1114:	a5 e2       	ldi	r26, 0x25	; 37
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e5 e2       	ldi	r30, 0x25	; 37
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8b 7f       	andi	r24, 0xFB	; 251
    1120:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0100;// Activate RED blinking
    1122:	eb 81       	ldd	r30, Y+3	; 0x03
    1124:	fc 81       	ldd	r31, Y+4	; 0x04
    1126:	80 81       	ld	r24, Z
    1128:	91 81       	ldd	r25, Z+1	; 0x01
    112a:	91 60       	ori	r25, 0x01	; 1
    112c:	eb 81       	ldd	r30, Y+3	; 0x03
    112e:	fc 81       	ldd	r31, Y+4	; 0x04
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	80 83       	st	Z, r24
    1134:	3a c0       	rjmp	.+116    	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0A: PORTLED1 &= ~(1<<LED6_PIN); // yellow 1
    1136:	a5 e2       	ldi	r26, 0x25	; 37
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e5 e2       	ldi	r30, 0x25	; 37
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	8f 7e       	andi	r24, 0xEF	; 239
    1142:	8c 93       	st	X, r24
                       PORTLED1 &= ~(1<<LED10_PIN); // yellow 2
    1144:	a5 e2       	ldi	r26, 0x25	; 37
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e5 e2       	ldi	r30, 0x25	; 37
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8e 7f       	andi	r24, 0xFE	; 254
    1150:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0440;// Activate YELLOWs blinking
    1152:	eb 81       	ldd	r30, Y+3	; 0x03
    1154:	fc 81       	ldd	r31, Y+4	; 0x04
    1156:	80 81       	ld	r24, Z
    1158:	91 81       	ldd	r25, Z+1	; 0x01
    115a:	80 64       	ori	r24, 0x40	; 64
    115c:	94 60       	ori	r25, 0x04	; 4
    115e:	eb 81       	ldd	r30, Y+3	; 0x03
    1160:	fc 81       	ldd	r31, Y+4	; 0x04
    1162:	91 83       	std	Z+1, r25	; 0x01
    1164:	80 83       	st	Z, r24
    1166:	21 c0       	rjmp	.+66     	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0B: PORTLED1 &= ~(1<<LED9_PIN); // white
    1168:	a5 e2       	ldi	r26, 0x25	; 37
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e5 e2       	ldi	r30, 0x25	; 37
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	8d 7f       	andi	r24, 0xFD	; 253
    1174:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0200;// Activate WHITE blinking
    1176:	eb 81       	ldd	r30, Y+3	; 0x03
    1178:	fc 81       	ldd	r31, Y+4	; 0x04
    117a:	80 81       	ld	r24, Z
    117c:	91 81       	ldd	r25, Z+1	; 0x01
    117e:	92 60       	ori	r25, 0x02	; 2
    1180:	eb 81       	ldd	r30, Y+3	; 0x03
    1182:	fc 81       	ldd	r31, Y+4	; 0x04
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	80 83       	st	Z, r24
    1188:	10 c0       	rjmp	.+32     	; 0x11aa <__stack+0x8ab>
                break;
            case 0x0C: PORTLED1 &= ~(1<<LED7_PIN); // green
    118a:	a5 e2       	ldi	r26, 0x25	; 37
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e5 e2       	ldi	r30, 0x25	; 37
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	87 7f       	andi	r24, 0xF7	; 247
    1196:	8c 93       	st	X, r24
                        *led_blink_flag |= 0x0080;// Activate GREEN blinking
    1198:	eb 81       	ldd	r30, Y+3	; 0x03
    119a:	fc 81       	ldd	r31, Y+4	; 0x04
    119c:	80 81       	ld	r24, Z
    119e:	91 81       	ldd	r25, Z+1	; 0x01
    11a0:	80 68       	ori	r24, 0x80	; 128
    11a2:	eb 81       	ldd	r30, Y+3	; 0x03
    11a4:	fc 81       	ldd	r31, Y+4	; 0x04
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	80 83       	st	Z, r24
        }
    }else{
        /// Do nothing
    }

}
    11aa:	62 96       	adiw	r28, 0x12	; 18
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <DCC_LED_Blinker>:


void DCC_LED_Blinker(uint16_t led_blink_flag)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <DCC_LED_Blinker+0x6>
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	9a 83       	std	Y+2, r25	; 0x02
    11c8:	89 83       	std	Y+1, r24	; 0x01
    static uint16_t ref_time = 0;
    #ifdef UART_TERM
    //char buffer[10];
    #endif // UART_TERM

    if( (TIMER0_get_value()-ref_time) > T_BLINK ){/// Time to blink LEDs
    11ca:	0e 94 35 0b 	call	0x166a	; 0x166a <TIMER0_get_value>
    11ce:	20 91 9a 01 	lds	r18, 0x019A
    11d2:	30 91 9b 01 	lds	r19, 0x019B
    11d6:	82 1b       	sub	r24, r18
    11d8:	93 0b       	sbc	r25, r19
    11da:	21 e0       	ldi	r18, 0x01	; 1
    11dc:	85 3f       	cpi	r24, 0xF5	; 245
    11de:	92 07       	cpc	r25, r18
    11e0:	08 f4       	brcc	.+2      	; 0x11e4 <DCC_LED_Blinker+0x28>
    11e2:	bc c0       	rjmp	.+376    	; 0x135c <DCC_LED_Blinker+0x1a0>
        ref_time = TIMER0_get_value();
    11e4:	0e 94 35 0b 	call	0x166a	; 0x166a <TIMER0_get_value>
    11e8:	90 93 9b 01 	sts	0x019B, r25
    11ec:	80 93 9a 01 	sts	0x019A, r24
           // USART_TX_STRING_WAIT("\nBlinkFlag =");
          //  USART_TX_STRING_WAIT(buffer);

         #endif // UART_TERM

        if(led_blink_flag&0x0001)//
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	81 70       	andi	r24, 0x01	; 1
    11f6:	90 70       	andi	r25, 0x00	; 0
    11f8:	88 23       	and	r24, r24
    11fa:	41 f0       	breq	.+16     	; 0x120c <DCC_LED_Blinker+0x50>
            PORTLED0 ^=(1<<LED0_PIN);//toggle LED
    11fc:	a8 e2       	ldi	r26, 0x28	; 40
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e8 e2       	ldi	r30, 0x28	; 40
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	90 81       	ld	r25, Z
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	89 27       	eor	r24, r25
    120a:	8c 93       	st	X, r24
        if(led_blink_flag&0x0002)
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	82 70       	andi	r24, 0x02	; 2
    1212:	90 70       	andi	r25, 0x00	; 0
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	41 f0       	breq	.+16     	; 0x1228 <DCC_LED_Blinker+0x6c>
            PORTLED0 ^=(1<<LED1_PIN);
    1218:	a8 e2       	ldi	r26, 0x28	; 40
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e8 e2       	ldi	r30, 0x28	; 40
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	90 81       	ld	r25, Z
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	89 27       	eor	r24, r25
    1226:	8c 93       	st	X, r24
        if(led_blink_flag&0x0004)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	84 70       	andi	r24, 0x04	; 4
    122e:	90 70       	andi	r25, 0x00	; 0
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	41 f0       	breq	.+16     	; 0x1244 <DCC_LED_Blinker+0x88>
            PORTLED0 ^=(1<<LED2_PIN);
    1234:	a8 e2       	ldi	r26, 0x28	; 40
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e8 e2       	ldi	r30, 0x28	; 40
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	90 81       	ld	r25, Z
    123e:	84 e0       	ldi	r24, 0x04	; 4
    1240:	89 27       	eor	r24, r25
    1242:	8c 93       	st	X, r24
        if(led_blink_flag&0x0008)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	88 70       	andi	r24, 0x08	; 8
    124a:	90 70       	andi	r25, 0x00	; 0
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	41 f0       	breq	.+16     	; 0x1260 <DCC_LED_Blinker+0xa4>
            PORTLED0 ^=(1<<LED3_PIN);
    1250:	a8 e2       	ldi	r26, 0x28	; 40
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e8 e2       	ldi	r30, 0x28	; 40
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	90 81       	ld	r25, Z
    125a:	88 e0       	ldi	r24, 0x08	; 8
    125c:	89 27       	eor	r24, r25
    125e:	8c 93       	st	X, r24
        if(led_blink_flag&0x0010) //
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	9a 81       	ldd	r25, Y+2	; 0x02
    1264:	80 71       	andi	r24, 0x10	; 16
    1266:	90 70       	andi	r25, 0x00	; 0
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	41 f0       	breq	.+16     	; 0x127c <DCC_LED_Blinker+0xc0>
            PORTLED0 ^=(1<<LED4_PIN);
    126c:	a8 e2       	ldi	r26, 0x28	; 40
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e8 e2       	ldi	r30, 0x28	; 40
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	90 81       	ld	r25, Z
    1276:	80 e1       	ldi	r24, 0x10	; 16
    1278:	89 27       	eor	r24, r25
    127a:	8c 93       	st	X, r24
        if(led_blink_flag&0x0020)
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	80 72       	andi	r24, 0x20	; 32
    1282:	90 70       	andi	r25, 0x00	; 0
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	41 f0       	breq	.+16     	; 0x1298 <DCC_LED_Blinker+0xdc>
            PORTLED0 ^=(1<<LED5_PIN);
    1288:	a8 e2       	ldi	r26, 0x28	; 40
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e8 e2       	ldi	r30, 0x28	; 40
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	90 81       	ld	r25, Z
    1292:	80 e2       	ldi	r24, 0x20	; 32
    1294:	89 27       	eor	r24, r25
    1296:	8c 93       	st	X, r24

        if(led_blink_flag&0x0040)
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	80 74       	andi	r24, 0x40	; 64
    129e:	90 70       	andi	r25, 0x00	; 0
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	41 f0       	breq	.+16     	; 0x12b4 <DCC_LED_Blinker+0xf8>
            PORTLED1 ^=(1<<LED6_PIN);
    12a4:	a5 e2       	ldi	r26, 0x25	; 37
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e2       	ldi	r30, 0x25	; 37
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	90 81       	ld	r25, Z
    12ae:	80 e1       	ldi	r24, 0x10	; 16
    12b0:	89 27       	eor	r24, r25
    12b2:	8c 93       	st	X, r24
        if(led_blink_flag&0x0080)
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	9a 81       	ldd	r25, Y+2	; 0x02
    12b8:	80 78       	andi	r24, 0x80	; 128
    12ba:	90 70       	andi	r25, 0x00	; 0
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	41 f0       	breq	.+16     	; 0x12d0 <DCC_LED_Blinker+0x114>
            PORTLED1 ^=(1<<LED7_PIN);
    12c0:	a5 e2       	ldi	r26, 0x25	; 37
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e5 e2       	ldi	r30, 0x25	; 37
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	90 81       	ld	r25, Z
    12ca:	88 e0       	ldi	r24, 0x08	; 8
    12cc:	89 27       	eor	r24, r25
    12ce:	8c 93       	st	X, r24
        if(led_blink_flag&0x0100) //
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	80 70       	andi	r24, 0x00	; 0
    12d6:	91 70       	andi	r25, 0x01	; 1
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	41 f0       	breq	.+16     	; 0x12ec <DCC_LED_Blinker+0x130>
            PORTLED1 ^=(1<<LED8_PIN);
    12dc:	a5 e2       	ldi	r26, 0x25	; 37
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e2       	ldi	r30, 0x25	; 37
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	90 81       	ld	r25, Z
    12e6:	84 e0       	ldi	r24, 0x04	; 4
    12e8:	89 27       	eor	r24, r25
    12ea:	8c 93       	st	X, r24
        if(led_blink_flag&0x0200)
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	80 70       	andi	r24, 0x00	; 0
    12f2:	92 70       	andi	r25, 0x02	; 2
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	41 f0       	breq	.+16     	; 0x1308 <DCC_LED_Blinker+0x14c>
            PORTLED1 ^=(1<<LED9_PIN);
    12f8:	a5 e2       	ldi	r26, 0x25	; 37
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e5 e2       	ldi	r30, 0x25	; 37
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	90 81       	ld	r25, Z
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	89 27       	eor	r24, r25
    1306:	8c 93       	st	X, r24
        if(led_blink_flag&0x0400)
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	9a 81       	ldd	r25, Y+2	; 0x02
    130c:	80 70       	andi	r24, 0x00	; 0
    130e:	94 70       	andi	r25, 0x04	; 4
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	41 f0       	breq	.+16     	; 0x1324 <DCC_LED_Blinker+0x168>
            PORTLED1 ^=(1<<LED10_PIN);
    1314:	a5 e2       	ldi	r26, 0x25	; 37
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e5 e2       	ldi	r30, 0x25	; 37
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	90 81       	ld	r25, Z
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	89 27       	eor	r24, r25
    1322:	8c 93       	st	X, r24

        if(led_blink_flag&0x0800)
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	9a 81       	ldd	r25, Y+2	; 0x02
    1328:	80 70       	andi	r24, 0x00	; 0
    132a:	98 70       	andi	r25, 0x08	; 8
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	41 f0       	breq	.+16     	; 0x1340 <DCC_LED_Blinker+0x184>
            PORTLED2 ^=(1<<LED11_PIN);
    1330:	ab e2       	ldi	r26, 0x2B	; 43
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	eb e2       	ldi	r30, 0x2B	; 43
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	90 81       	ld	r25, Z
    133a:	80 e8       	ldi	r24, 0x80	; 128
    133c:	89 27       	eor	r24, r25
    133e:	8c 93       	st	X, r24
        if(led_blink_flag&0x1000) //
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	80 70       	andi	r24, 0x00	; 0
    1346:	90 71       	andi	r25, 0x10	; 16
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	41 f0       	breq	.+16     	; 0x135c <DCC_LED_Blinker+0x1a0>
            PORTLED2 ^=(1<<LED12_PIN);
    134c:	ab e2       	ldi	r26, 0x2B	; 43
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	eb e2       	ldi	r30, 0x2B	; 43
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	90 81       	ld	r25, Z
    1356:	80 e4       	ldi	r24, 0x40	; 64
    1358:	89 27       	eor	r24, r25
    135a:	8c 93       	st	X, r24

    }

}
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <__vector_1>:


ISR(INT0_vect)
{
    1366:	1f 92       	push	r1
    1368:	0f 92       	push	r0
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	0f 92       	push	r0
    136e:	11 24       	eor	r1, r1
    1370:	8f 93       	push	r24
    1372:	9f 93       	push	r25
    1374:	af 93       	push	r26
    1376:	bf 93       	push	r27
    1378:	ef 93       	push	r30
    137a:	ff 93       	push	r31
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    if(odd_edge == 0){
    1384:	80 91 9d 01 	lds	r24, 0x019D
    1388:	88 23       	and	r24, r24
    138a:	b9 f4       	brne	.+46     	; 0x13ba <__vector_1+0x54>
        /// DCC_RX pin ODD edge
        timer1_stamp[1] = TCNT1; /// Take timestamp 1
    138c:	e4 e8       	ldi	r30, 0x84	; 132
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	91 81       	ldd	r25, Z+1	; 0x01
    1394:	90 93 d5 01 	sts	0x01D5, r25
    1398:	80 93 d4 01 	sts	0x01D4, r24
        TCNT1 = 0; /// Clear the TIMER
    139c:	e4 e8       	ldi	r30, 0x84	; 132
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	11 82       	std	Z+1, r1	; 0x01
    13a2:	10 82       	st	Z, r1
        /// Start TIMER1 (Useful only in the packet beginning)
        TCCR1B |= (0<<CS12)|(1<<CS11)|(0<<CS10);
    13a4:	a1 e8       	ldi	r26, 0x81	; 129
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e1 e8       	ldi	r30, 0x81	; 129
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	82 60       	ori	r24, 0x02	; 2
    13b0:	8c 93       	st	X, r24
        odd_edge = 1; /// ODD EDGE
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	80 93 9d 01 	sts	0x019D, r24
    13b8:	0a c0       	rjmp	.+20     	; 0x13ce <__vector_1+0x68>
        PORT_DEBUG |= (1<<PIN_DEBUG_3);  /// DEBUG 3
        #endif // DEBUG

    }else{
        /// DCC_RX pin EVEN edge
        timer1_stamp[0] = TCNT1; /// Take timestamp 0
    13ba:	e4 e8       	ldi	r30, 0x84	; 132
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
    13c2:	90 93 d3 01 	sts	0x01D3, r25
    13c6:	80 93 d2 01 	sts	0x01D2, r24
        odd_edge = 0; /// EVEN EDGE
    13ca:	10 92 9d 01 	sts	0x019D, r1
        #ifdef DEBUG
        PORT_DEBUG &= ~(1<<PIN_DEBUG_3);  /// DEBUG 3
        #endif // DEBUG
    }
    int0_flag++; /// flag incrementation
    13ce:	80 91 9c 01 	lds	r24, 0x019C
    13d2:	8f 5f       	subi	r24, 0xFF	; 255
    13d4:	80 93 9c 01 	sts	0x019C, r24
}
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	ff 91       	pop	r31
    13de:	ef 91       	pop	r30
    13e0:	bf 91       	pop	r27
    13e2:	af 91       	pop	r26
    13e4:	9f 91       	pop	r25
    13e6:	8f 91       	pop	r24
    13e8:	0f 90       	pop	r0
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	0f 90       	pop	r0
    13ee:	1f 90       	pop	r1
    13f0:	18 95       	reti

000013f2 <LED_toggle>:
}
*/


void LED_toggle(uint8_t led_bit)
{   /// led_bit = 0x01, 0x02, 0x04, 0x08, ...
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <LED_toggle+0x6>
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <LED_toggle+0x8>
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t bitshift = 0;
    1400:	19 82       	std	Y+1, r1	; 0x01

    switch(led_bit){
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	3c 83       	std	Y+4, r19	; 0x04
    140a:	2b 83       	std	Y+3, r18	; 0x03
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	82 30       	cpi	r24, 0x02	; 2
    1412:	91 05       	cpc	r25, r1
    1414:	69 f0       	breq	.+26     	; 0x1430 <LED_toggle+0x3e>
    1416:	2b 81       	ldd	r18, Y+3	; 0x03
    1418:	3c 81       	ldd	r19, Y+4	; 0x04
    141a:	24 30       	cpi	r18, 0x04	; 4
    141c:	31 05       	cpc	r19, r1
    141e:	59 f0       	breq	.+22     	; 0x1436 <LED_toggle+0x44>
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	91 05       	cpc	r25, r1
    1428:	49 f4       	brne	.+18     	; 0x143c <LED_toggle+0x4a>
    case 0x01: /// LED0
            bitshift = LEDz_PIN;
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	08 c0       	rjmp	.+16     	; 0x1440 <LED_toggle+0x4e>
        break;
    case 0x02: /// LED1
            bitshift = LEDy_PIN;
    1430:	84 e0       	ldi	r24, 0x04	; 4
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <LED_toggle+0x4e>
        break;
    case 0x04: /// IDLE process LED
            bitshift = LEDx_PIN;
    1436:	85 e0       	ldi	r24, 0x05	; 5
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <LED_toggle+0x4e>
        break;
    default:   /// LED0
            bitshift = LEDx_PIN;
    143c:	85 e0       	ldi	r24, 0x05	; 5
    143e:	89 83       	std	Y+1, r24	; 0x01

    }// end switch

    if(led_flag&led_bit){
    1440:	80 91 d8 01 	lds	r24, 0x01D8
    1444:	9a 81       	ldd	r25, Y+2	; 0x02
    1446:	89 23       	and	r24, r25
    1448:	88 23       	and	r24, r24
    144a:	e9 f0       	breq	.+58     	; 0x1486 <LED_toggle+0x94>
        led_flag &= ~led_bit;
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	98 2f       	mov	r25, r24
    1450:	90 95       	com	r25
    1452:	80 91 d8 01 	lds	r24, 0x01D8
    1456:	89 23       	and	r24, r25
    1458:	80 93 d8 01 	sts	0x01D8, r24
        PORTB &= ~(1<<bitshift);
    145c:	a5 e2       	ldi	r26, 0x25	; 37
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e5 e2       	ldi	r30, 0x25	; 37
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <LED_toggle+0x88>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <LED_toggle+0x84>
    147e:	80 95       	com	r24
    1480:	84 23       	and	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	19 c0       	rjmp	.+50     	; 0x14b8 <LED_toggle+0xc6>
    }else{ /// The LED is off
        led_flag |= led_bit;
    1486:	90 91 d8 01 	lds	r25, 0x01D8
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	89 2b       	or	r24, r25
    148e:	80 93 d8 01 	sts	0x01D8, r24
        PORTB |= (1<<bitshift);
    1492:	a5 e2       	ldi	r26, 0x25	; 37
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e5 e2       	ldi	r30, 0x25	; 37
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <LED_toggle+0xbe>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <LED_toggle+0xba>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
    }
}
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <main>:

/// ====================


int main(void)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <main+0x6>
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62

    uint16_t ref_timer = 0;
    14d2:	1b 82       	std	Y+3, r1	; 0x03
    14d4:	1a 82       	std	Y+2, r1	; 0x02
    timer0_cnt = 0;
    14d6:	10 92 da 01 	sts	0x01DA, r1
    14da:	10 92 d9 01 	sts	0x01D9, r1
    timer1_cnt = 0;
    14de:	10 92 dc 01 	sts	0x01DC, r1
    14e2:	10 92 db 01 	sts	0x01DB, r1
    #endif // ENCODER

    #ifdef DECODER

        #ifdef UART_TERM
            USART_init();
    14e6:	0e 94 ba 0b 	call	0x1774	; 0x1774 <USART_init>
        #endif // UART_TERM

        uint8_t dcc_decoder_mode = 0; /// 0 for the Station, 1 for the Entrance
    14ea:	19 82       	std	Y+1, r1	; 0x01
        timer1_stamp[0] = 0;
    14ec:	10 92 d3 01 	sts	0x01D3, r1
    14f0:	10 92 d2 01 	sts	0x01D2, r1
        timer1_stamp[1] = 0;
    14f4:	10 92 d5 01 	sts	0x01D5, r1
    14f8:	10 92 d4 01 	sts	0x01D4, r1
        timer1_stamp[2] = 0;
    14fc:	10 92 d7 01 	sts	0x01D7, r1
    1500:	10 92 d6 01 	sts	0x01D6, r1

        DCC_DECODER_Pin_Setup();
    1504:	0e 94 53 00 	call	0xa6	; 0xa6 <DCC_DECODER_Pin_Setup>
        DCC_DECODER_LED_Pin_Setup(dcc_decoder_mode); /// Setting the LEDs
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	0e 94 cb 00 	call	0x196	; 0x196 <DCC_DECODER_LED_Pin_Setup>

        //ATmega328p_EXTINT_Setup();
        EICRA |= (0 << ISC01)|(1<< ISC00); /// External interrupt (DCC RX pin).
    150e:	a9 e6       	ldi	r26, 0x69	; 105
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e9 e6       	ldi	r30, 0x69	; 105
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	81 60       	ori	r24, 0x01	; 1
    151a:	8c 93       	st	X, r24
        EIMSK |= (1<< INT0);
    151c:	ad e3       	ldi	r26, 0x3D	; 61
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	ed e3       	ldi	r30, 0x3D	; 61
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	81 60       	ori	r24, 0x01	; 1
    1528:	8c 93       	st	X, r24

        TIMER1_DECODER_setup(); /// used for precise timing on the DCC bus (resolution 0.5 us)
    152a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <TIMER1_DECODER_setup>
        TIMER0_DECODER_setup(); /// used for traffic LED blinking (timer 1ms)
    152e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <TIMER0_DECODER_setup>
        dcc_decoder_mode = DCC_ModeSetup(); /// checking the ctrl jumpers, optional UART message print
    1532:	0e 94 7d 00 	call	0xfa	; 0xfa <DCC_ModeSetup>
    1536:	89 83       	std	Y+1, r24	; 0x01



    #endif // DECODER

    sei();/// Enable Interrupts
    1538:	78 94       	sei
                LED_toggle(0x04); /// PINB5 (built-in LED)
            }
        #endif // ENCODER

        #ifdef DECODER
           DCC_DECODER_MainFCN(dcc_decoder_mode);
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	0e 94 3f 01 	call	0x27e	; 0x27e <DCC_DECODER_MainFCN>

            /// BACKGROUND BLINK PROCESS:
            if( (TIMER0_get_value() - ref_timer) >= T_IDLE){
    1540:	0e 94 35 0b 	call	0x166a	; 0x166a <TIMER0_get_value>
    1544:	2a 81       	ldd	r18, Y+2	; 0x02
    1546:	3b 81       	ldd	r19, Y+3	; 0x03
    1548:	82 1b       	sub	r24, r18
    154a:	93 0b       	sbc	r25, r19
    154c:	21 e0       	ldi	r18, 0x01	; 1
    154e:	84 3f       	cpi	r24, 0xF4	; 244
    1550:	92 07       	cpc	r25, r18
    1552:	98 f3       	brcs	.-26     	; 0x153a <main+0x74>
                ref_timer = TIMER0_get_value();
    1554:	0e 94 35 0b 	call	0x166a	; 0x166a <TIMER0_get_value>
    1558:	9b 83       	std	Y+3, r25	; 0x03
    155a:	8a 83       	std	Y+2, r24	; 0x02
                LED_toggle(0x04); /// PINB5 (built-in LED)
    155c:	84 e0       	ldi	r24, 0x04	; 4
    155e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <LED_toggle>
    1562:	eb cf       	rjmp	.-42     	; 0x153a <main+0x74>

00001564 <SPI_setup>:

#include "spi.h"

void SPI_setup(void)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    //SPCR0 |= ();
    /// F_CPU = 16 MHz
    /// Set SCK speed, type of Endian, Edges, etc..
SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR1)|(1<<SPR0); ///SPI control REG.
    156c:	ec e4       	ldi	r30, 0x4C	; 76
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	83 e5       	ldi	r24, 0x53	; 83
    1572:	80 83       	st	Z, r24
/// SPR1 & SPR0 = 00  F_clk/4. = 4 MHz => 250 ns
/// SPR1 & SPR0 = 11  F_clk/128. = 125 kHz => 8 us

//SPSR &= ~(1<<SPI2X); /// DOuble SPI speed is OFF

}
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <SPI_ByteTransfer>:

uint8_t SPI_ByteTransfer(uint8_t TXData)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	0f 92       	push	r0
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	89 83       	std	Y+1, r24	; 0x01
    SPDR = TXData; /// First Shift one byte OUT of MOSI
    1586:	ee e4       	ldi	r30, 0x4E	; 78
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	80 83       	st	Z, r24
    while(!(SPSR & (1<<SPIF)));
    158e:	ed e4       	ldi	r30, 0x4D	; 77
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	88 23       	and	r24, r24
    1596:	dc f7       	brge	.-10     	; 0x158e <SPI_ByteTransfer+0x14>
    return SPDR; /// Simultanously you get one Byte IN to MISO
    1598:	ee e4       	ldi	r30, 0x4E	; 78
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
}
    159e:	0f 90       	pop	r0
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <TIMER1_setup>:
#include "tim.h"


void TIMER1_setup(void)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
  ///   1       0       1       1024
  ///   1       1       0       Extern Falling
  ///   1       1       1       Extern Rising
    #ifdef F_CPU_16
    /// F_CPU = 16 MHz
  TCCR1A |= (0<<WGM11)|(0<<WGM10);
    15ae:	a0 e8       	ldi	r26, 0x80	; 128
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e0 e8       	ldi	r30, 0x80	; 128
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8c 93       	st	X, r24
  TCCR1B |= (0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(1<<CS10);
    15ba:	a1 e8       	ldi	r26, 0x81	; 129
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e1 e8       	ldi	r30, 0x81	; 129
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8b 60       	ori	r24, 0x0B	; 11
    15c6:	8c 93       	st	X, r24
  /// CTC mode, N = 64
  TIMSK1 |= (0<<TOIE1)|(1<<OCIE1A);
    15c8:	af e6       	ldi	r26, 0x6F	; 111
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	ef e6       	ldi	r30, 0x6F	; 111
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	82 60       	ori	r24, 0x02	; 2
    15d4:	8c 93       	st	X, r24
  /// CTC interrupt enabled
  OCR1A = 249;
    15d6:	e8 e8       	ldi	r30, 0x88	; 136
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	89 ef       	ldi	r24, 0xF9	; 249
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	91 83       	std	Z+1, r25	; 0x01
    15e0:	80 83       	st	Z, r24
  OCR1A = 499;
  /// T_ISR = 1.000 ms

  #endif // F_CPU_4

}
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <TIMER0_ENCODER_setup>:
    //timer_cnt = 0;
}
*/

void TIMER0_ENCODER_setup(void)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    /// Set TIMER0 into FAST PWM mode with OCR0A update in BOTTOM TCNT0 position.

    TCCR0A |= (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(1<<WGM01)|(0<<WGM00);
    15f0:	a4 e4       	ldi	r26, 0x44	; 68
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e4 e4       	ldi	r30, 0x44	; 68
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	82 60       	ori	r24, 0x02	; 2
    15fc:	8c 93       	st	X, r24

    #ifdef F_CPU_16

    //TCCR0B |= (0<<WGM02)|(0<<CS02)|(1<<CS01)|(0<<CS00); /// TIMER RUNNING
    //TCCR0B |= (0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00); /// TIMER STOPPED
    TCCR0B |= (0<<WGM02)|(0<<CS02)|(1<<CS01)|(0<<CS00); /// TIMER STARTED,  N=8
    15fe:	a5 e4       	ldi	r26, 0x45	; 69
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e4       	ldi	r30, 0x45	; 69
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	82 60       	ori	r24, 0x02	; 2
    160a:	8c 93       	st	X, r24
    /// CTC mode, (N = 8)
    OCR0A = 115; /// for bit "1"
    160c:	e7 e4       	ldi	r30, 0x47	; 71
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	83 e7       	ldi	r24, 0x73	; 115
    1612:	80 83       	st	Z, r24

    #endif // F_CPU_4

    /// T_ISR = 58us for bit "1"
    /// T_ISR = 116us for bit "0"
    TIMSK0 |= (0<<TOIE0)|(1<<OCIE0A)|(0<<OCIE0B); ///OCR0A ISR
    1614:	ae e6       	ldi	r26, 0x6E	; 110
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	ee e6       	ldi	r30, 0x6E	; 110
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	82 60       	ori	r24, 0x02	; 2
    1620:	8c 93       	st	X, r24

}
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <TIMER1_ENCODER_setup>:

void TIMER1_ENCODER_setup(void)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
  TCCR1A |= (0<<WGM11)|(0<<WGM10);
    1630:	a0 e8       	ldi	r26, 0x80	; 128
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e0 e8       	ldi	r30, 0x80	; 128
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	8c 93       	st	X, r24
  TCCR1B |= (0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(1<<CS10);
    163c:	a1 e8       	ldi	r26, 0x81	; 129
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e1 e8       	ldi	r30, 0x81	; 129
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	8b 60       	ori	r24, 0x0B	; 11
    1648:	8c 93       	st	X, r24
  ///   1       0       0       256
  ///   1       0       1       1024
  ///   1       1       0       Extern Falling
  ///   1       1       1       Extern Rising

  TIMSK1 |= (0<<TOIE1)|(1<<OCIE1A);
    164a:	af e6       	ldi	r26, 0x6F	; 111
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ef e6       	ldi	r30, 0x6F	; 111
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	82 60       	ori	r24, 0x02	; 2
    1656:	8c 93       	st	X, r24
  /// CTC interrupt Enabled
  OCR1A = 249;  /// 1ms timer
    1658:	e8 e8       	ldi	r30, 0x88	; 136
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	89 ef       	ldi	r24, 0xF9	; 249
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	80 83       	st	Z, r24

}
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <TIMER0_get_value>:

uint16_t TIMER0_get_value(void)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	00 d0       	rcall	.+0      	; 0x1670 <TIMER0_get_value+0x6>
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
   uint16_t val = 0;
    1674:	1a 82       	std	Y+2, r1	; 0x02
    1676:	19 82       	std	Y+1, r1	; 0x01

   val = timer0_cnt;
    1678:	80 91 d9 01 	lds	r24, 0x01D9
    167c:	90 91 da 01 	lds	r25, 0x01DA
    1680:	9a 83       	std	Y+2, r25	; 0x02
    1682:	89 83       	std	Y+1, r24	; 0x01

   return val;
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <TIMER1_get_value>:

uint16_t TIMER1_get_value(void)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <TIMER1_get_value+0x6>
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
   uint16_t val = 0;
    169c:	1a 82       	std	Y+2, r1	; 0x02
    169e:	19 82       	std	Y+1, r1	; 0x01

   val = timer1_cnt;
    16a0:	80 91 db 01 	lds	r24, 0x01DB
    16a4:	90 91 dc 01 	lds	r25, 0x01DC
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	89 83       	std	Y+1, r24	; 0x01

   return val;
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <TIMER1_DECODER_setup>:

}
*/

void TIMER1_DECODER_setup(void)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
  TCCR1A |= (0<<WGM11)|(0<<WGM10);
    16c2:	a0 e8       	ldi	r26, 0x80	; 128
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e0 e8       	ldi	r30, 0x80	; 128
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	8c 93       	st	X, r24
  TCCR1B |= (0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
    16ce:	a1 e8       	ldi	r26, 0x81	; 129
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e1 e8       	ldi	r30, 0x81	; 129
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	8a 60       	ori	r24, 0x0A	; 10
    16da:	8c 93       	st	X, r24
  /// CTC mode, N = 8, Timer resolution = 0.5 us, Timer Range = 32768 us

  TIMSK1 |= (0<<TOIE1)|(0<<OCIE1A);
    16dc:	af e6       	ldi	r26, 0x6F	; 111
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	ef e6       	ldi	r30, 0x6F	; 111
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	8c 93       	st	X, r24
  /// CTC interrupt Disabled
  OCR1A = 20010;  /// TIMEOUT for the DCC RX PIN EDGE DETECTION
    16e8:	e8 e8       	ldi	r30, 0x88	; 136
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	8a e2       	ldi	r24, 0x2A	; 42
    16ee:	9e e4       	ldi	r25, 0x4E	; 78
    16f0:	91 83       	std	Z+1, r25	; 0x01
    16f2:	80 83       	st	Z, r24

}
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <TIMER0_DECODER_setup>:

void TIMER0_DECODER_setup(void)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    /// Timer0 used for LED blinking

    TCCR0A |= (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(1<<WGM01)|(0<<WGM00);
    1702:	a4 e4       	ldi	r26, 0x44	; 68
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e4 e4       	ldi	r30, 0x44	; 68
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	82 60       	ori	r24, 0x02	; 2
    170e:	8c 93       	st	X, r24
    /// No output pins enabled.
    //TCCR0B |= (0<<WGM02)|(0<<CS02)|(1<<CS01)|(0<<CS00); /// TIMER RUNNING
    TCCR0B |= (0<<WGM02)|(0<<CS02)|(1<<CS01)|(1<<CS00); /// TIMER STARTED
    1710:	a5 e4       	ldi	r26, 0x45	; 69
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e5 e4       	ldi	r30, 0x45	; 69
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	83 60       	ori	r24, 0x03	; 3
    171c:	8c 93       	st	X, r24
  ///   1       0       0       256
  ///   1       0       1       1024
  ///   1       1       0       Extern Falling
  ///   1       1       1       Extern Rising

    TIMSK0 |= (0<<TOIE0)|(1<<OCIE0A)|(0<<OCIE0B);/// Output Compare A ISR
    171e:	ae e6       	ldi	r26, 0x6E	; 110
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	ee e6       	ldi	r30, 0x6E	; 110
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	82 60       	ori	r24, 0x02	; 2
    172a:	8c 93       	st	X, r24
    OCR0A = 249; /// ISR frequency 1.000 kHz
    172c:	e7 e4       	ldi	r30, 0x47	; 71
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	89 ef       	ldi	r24, 0xF9	; 249
    1732:	80 83       	st	Z, r24
    //OCR0A = 231; /// for bit "0"

}
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <__vector_14>:
}
#endif // ENCODER

#ifdef DECODER
ISR(TIMER0_COMPA_vect)
{
    173a:	1f 92       	push	r1
    173c:	0f 92       	push	r0
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	0f 92       	push	r0
    1742:	11 24       	eor	r1, r1
    1744:	8f 93       	push	r24
    1746:	9f 93       	push	r25
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    timer0_cnt++;  /// Every 1 ms
    1750:	80 91 d9 01 	lds	r24, 0x01D9
    1754:	90 91 da 01 	lds	r25, 0x01DA
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	90 93 da 01 	sts	0x01DA, r25
    175e:	80 93 d9 01 	sts	0x01D9, r24
}
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	9f 91       	pop	r25
    1768:	8f 91       	pop	r24
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	0f 90       	pop	r0
    1770:	1f 90       	pop	r1
    1772:	18 95       	reti

00001774 <USART_init>:
#include "uart.h"


void USART_init(void)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    //UCSR0A |= (0<<U2X0)|(0<<MPCM0);
    //UBRR0H = 0x00;/// has to be written first
    //UBRR0 = 0x67; /// this updates the prescaler.

    /// For 57600 Bd:  (error =-0.8%)
    UCSR0A |= (1<<U2X0);
    177c:	a0 ec       	ldi	r26, 0xC0	; 192
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e0 ec       	ldi	r30, 0xC0	; 192
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	82 60       	ori	r24, 0x02	; 2
    1788:	8c 93       	st	X, r24
    UBRR0 = 34;
    178a:	e4 ec       	ldi	r30, 0xC4	; 196
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	82 e2       	ldi	r24, 0x22	; 34
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	91 83       	std	Z+1, r25	; 0x01
    1794:	80 83       	st	Z, r24

    UCSR0B |= (1<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02)|(0<<RXB80)|(0<<TXB80) ;
    1796:	a1 ec       	ldi	r26, 0xC1	; 193
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e1 ec       	ldi	r30, 0xC1	; 193
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	88 69       	ori	r24, 0x98	; 152
    17a2:	8c 93       	st	X, r24
    UCSR0C |= (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0) ;
    17a4:	a2 ec       	ldi	r26, 0xC2	; 194
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e2 ec       	ldi	r30, 0xC2	; 194
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	86 60       	ori	r24, 0x06	; 6
    17b0:	8c 93       	st	X, r24
    /// no parity, 8bit data, 1 stop bit, RX complete interrupt, RX enabled, double speed mode DISABLED.
    /// see page 244 of ATMEGA328P datasheet.

    uart_flag = 0;
    17b2:	10 92 9e 01 	sts	0x019E, r1
    uart_idx = 0;
    17b6:	10 92 9f 01 	sts	0x019F, r1

}
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <USART_RX_WAIT>:


void USART_RX_WAIT(uint8_t *RX_Data)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <USART_RX_WAIT+0x6>
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	9a 83       	std	Y+2, r25	; 0x02
    17cc:	89 83       	std	Y+1, r24	; 0x01
    while ( (UCSR0A&0x80) != 0x80 ); /// Wait until it receives something
    17ce:	e0 ec       	ldi	r30, 0xC0	; 192
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	88 23       	and	r24, r24
    17d6:	dc f7       	brge	.-10     	; 0x17ce <USART_RX_WAIT+0xe>
        *RX_Data = UDR0; /// After that, read the data register
    17d8:	e6 ec       	ldi	r30, 0xC6	; 198
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	e9 81       	ldd	r30, Y+1	; 0x01
    17e0:	fa 81       	ldd	r31, Y+2	; 0x02
    17e2:	80 83       	st	Z, r24
}
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <USART_TX_WAIT>:

void USART_TX_WAIT(uint8_t TX_Data)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	0f 92       	push	r0
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	89 83       	std	Y+1, r24	; 0x01
    while ( (UCSR0A&0x20) != 0x20 ); /// Wait until TX buffer ready.
    17fa:	e0 ec       	ldi	r30, 0xC0	; 192
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	88 2f       	mov	r24, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	80 72       	andi	r24, 0x20	; 32
    1806:	90 70       	andi	r25, 0x00	; 0
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	b9 f3       	breq	.-18     	; 0x17fa <USART_TX_WAIT+0xc>
    UDR0 = TX_Data;  /// Send data
    180c:	e6 ec       	ldi	r30, 0xC6	; 198
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	80 83       	st	Z, r24
}
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <USART_TX_STRING_WAIT>:

void USART_TX_STRING_WAIT(char s[])
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <USART_TX_STRING_WAIT+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <USART_TX_STRING_WAIT+0x8>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int i=0;
    182c:	1a 82       	std	Y+2, r1	; 0x02
    182e:	19 82       	std	Y+1, r1	; 0x01
    1830:	0f c0       	rjmp	.+30     	; 0x1850 <USART_TX_STRING_WAIT+0x34>
    while( s[i] != '\0'){
        USART_TX_WAIT(s[i]);
    1832:	2b 81       	ldd	r18, Y+3	; 0x03
    1834:	3c 81       	ldd	r19, Y+4	; 0x04
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	f9 01       	movw	r30, r18
    183c:	e8 0f       	add	r30, r24
    183e:	f9 1f       	adc	r31, r25
    1840:	80 81       	ld	r24, Z
    1842:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <USART_TX_WAIT>
        i++;
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	89 83       	std	Y+1, r24	; 0x01
}

void USART_TX_STRING_WAIT(char s[])
{
    unsigned int i=0;
    while( s[i] != '\0'){
    1850:	2b 81       	ldd	r18, Y+3	; 0x03
    1852:	3c 81       	ldd	r19, Y+4	; 0x04
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	9a 81       	ldd	r25, Y+2	; 0x02
    1858:	f9 01       	movw	r30, r18
    185a:	e8 0f       	add	r30, r24
    185c:	f9 1f       	adc	r31, r25
    185e:	80 81       	ld	r24, Z
    1860:	88 23       	and	r24, r24
    1862:	39 f7       	brne	.-50     	; 0x1832 <USART_TX_STRING_WAIT+0x16>
        USART_TX_WAIT(s[i]);
        i++;
    }
    //USART_TX_WAIT('\n');
}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <USART_get_flag>:

uint8_t USART_get_flag(void)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <USART_get_flag+0x6>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    uint16_t val = 0;
    187c:	1a 82       	std	Y+2, r1	; 0x02
    187e:	19 82       	std	Y+1, r1	; 0x01
    UCSR0B &= ~(1<<RXCIE0); // disable USART RX interrupt
    1880:	a1 ec       	ldi	r26, 0xC1	; 193
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e1 ec       	ldi	r30, 0xC1	; 193
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	8f 77       	andi	r24, 0x7F	; 127
    188c:	8c 93       	st	X, r24
    val = uart_flag;
    188e:	80 91 9e 01 	lds	r24, 0x019E
    1892:	88 2f       	mov	r24, r24
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9a 83       	std	Y+2, r25	; 0x02
    1898:	89 83       	std	Y+1, r24	; 0x01
    UCSR0B |= (1<<RXCIE0); // enable
    189a:	a1 ec       	ldi	r26, 0xC1	; 193
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e1 ec       	ldi	r30, 0xC1	; 193
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	80 68       	ori	r24, 0x80	; 128
    18a6:	8c 93       	st	X, r24
    return val;
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <CMD_Head_lib>:
    }// end if
}
*/

uint8_t CMD_Head_lib(char CMD_head[5])
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <CMD_Head_lib+0x6>
    18ba:	0f 92       	push	r0
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	89 83       	std	Y+1, r24	; 0x01

    if(!strcmp(CMD_head,"TRX_")){       /// Send data
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	9a 81       	ldd	r25, Y+2	; 0x02
    18c8:	2e e5       	ldi	r18, 0x5E	; 94
    18ca:	31 e0       	ldi	r19, 0x01	; 1
    18cc:	b9 01       	movw	r22, r18
    18ce:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <strcmp>
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	19 f4       	brne	.+6      	; 0x18dc <CMD_Head_lib+0x28>
        return 0x40;
    18d6:	80 e4       	ldi	r24, 0x40	; 64
    18d8:	8b 83       	std	Y+3, r24	; 0x03
    18da:	64 c0       	rjmp	.+200    	; 0x19a4 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"TXB_")){ /// (CMD invalid)
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	23 e6       	ldi	r18, 0x63	; 99
    18e2:	31 e0       	ldi	r19, 0x01	; 1
    18e4:	b9 01       	movw	r22, r18
    18e6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <strcmp>
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <CMD_Head_lib+0x3e>
        return 0;
    18ee:	1b 82       	std	Y+3, r1	; 0x03
    18f0:	59 c0       	rjmp	.+178    	; 0x19a4 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"STOT")){ /// Stop TEST 1
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	28 e6       	ldi	r18, 0x68	; 104
    18f8:	31 e0       	ldi	r19, 0x01	; 1
    18fa:	b9 01       	movw	r22, r18
    18fc:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <strcmp>
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	11 f4       	brne	.+4      	; 0x1908 <CMD_Head_lib+0x54>
        return 0;
    1904:	1b 82       	std	Y+3, r1	; 0x03
    1906:	4e c0       	rjmp	.+156    	; 0x19a4 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"SIDL")){ /// (CMD invalid)
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	2d e6       	ldi	r18, 0x6D	; 109
    190e:	31 e0       	ldi	r19, 0x01	; 1
    1910:	b9 01       	movw	r22, r18
    1912:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <strcmp>
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	11 f4       	brne	.+4      	; 0x191e <CMD_Head_lib+0x6a>
        return 0;
    191a:	1b 82       	std	Y+3, r1	; 0x03
    191c:	43 c0       	rjmp	.+134    	; 0x19a4 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"CONF")){ /// (CMD invalid)
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	22 e7       	ldi	r18, 0x72	; 114
    1924:	31 e0       	ldi	r19, 0x01	; 1
    1926:	b9 01       	movw	r22, r18
    1928:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <strcmp>
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	11 f4       	brne	.+4      	; 0x1934 <CMD_Head_lib+0x80>
        return 0;
    1930:	1b 82       	std	Y+3, r1	; 0x03
    1932:	38 c0       	rjmp	.+112    	; 0x19a4 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"RESA")){ /// (CMD invalid)
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	9a 81       	ldd	r25, Y+2	; 0x02
    1938:	27 e7       	ldi	r18, 0x77	; 119
    193a:	31 e0       	ldi	r19, 0x01	; 1
    193c:	b9 01       	movw	r22, r18
    193e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <strcmp>
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	11 f4       	brne	.+4      	; 0x194a <CMD_Head_lib+0x96>
        return 0;
    1946:	1b 82       	std	Y+3, r1	; 0x03
    1948:	2d c0       	rjmp	.+90     	; 0x19a4 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"RESB")){ /// (CMD invalid)
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	9a 81       	ldd	r25, Y+2	; 0x02
    194e:	2c e7       	ldi	r18, 0x7C	; 124
    1950:	31 e0       	ldi	r19, 0x01	; 1
    1952:	b9 01       	movw	r22, r18
    1954:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <strcmp>
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	11 f4       	brne	.+4      	; 0x1960 <CMD_Head_lib+0xac>
        return 0;
    195c:	1b 82       	std	Y+3, r1	; 0x03
    195e:	22 c0       	rjmp	.+68     	; 0x19a4 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"RDC_")){ /// (CMD invalid)
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	21 e8       	ldi	r18, 0x81	; 129
    1966:	31 e0       	ldi	r19, 0x01	; 1
    1968:	b9 01       	movw	r22, r18
    196a:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <strcmp>
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	11 f4       	brne	.+4      	; 0x1976 <CMD_Head_lib+0xc2>
        return 0;
    1972:	1b 82       	std	Y+3, r1	; 0x03
    1974:	17 c0       	rjmp	.+46     	; 0x19a4 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"SNOP")){ /// (CMD invalid)
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	9a 81       	ldd	r25, Y+2	; 0x02
    197a:	26 e8       	ldi	r18, 0x86	; 134
    197c:	31 e0       	ldi	r19, 0x01	; 1
    197e:	b9 01       	movw	r22, r18
    1980:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <strcmp>
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	11 f4       	brne	.+4      	; 0x198c <CMD_Head_lib+0xd8>
        return 0;
    1988:	1b 82       	std	Y+3, r1	; 0x03
    198a:	0c c0       	rjmp	.+24     	; 0x19a4 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"FLFF")){ /// (CMD invalid)
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	9a 81       	ldd	r25, Y+2	; 0x02
    1990:	2b e8       	ldi	r18, 0x8B	; 139
    1992:	31 e0       	ldi	r19, 0x01	; 1
    1994:	b9 01       	movw	r22, r18
    1996:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <strcmp>
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	11 f4       	brne	.+4      	; 0x19a2 <CMD_Head_lib+0xee>
        return 0;
    199e:	1b 82       	std	Y+3, r1	; 0x03
    19a0:	01 c0       	rjmp	.+2      	; 0x19a4 <CMD_Head_lib+0xf0>
        //return 10;
    //}else if(!strcmp(CMD_head,"RDCB")){ /// read back config regs B
    }else{ /// Unknown Command
        return 0x00;
    19a2:	1b 82       	std	Y+3, r1	; 0x03
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    }// end if
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <strcmp>:
    19b2:	fb 01       	movw	r30, r22
    19b4:	dc 01       	movw	r26, r24
    19b6:	8d 91       	ld	r24, X+
    19b8:	01 90       	ld	r0, Z+
    19ba:	80 19       	sub	r24, r0
    19bc:	01 10       	cpse	r0, r1
    19be:	d9 f3       	breq	.-10     	; 0x19b6 <strcmp+0x4>
    19c0:	99 0b       	sbc	r25, r25
    19c2:	08 95       	ret

000019c4 <itoa>:
    19c4:	fb 01       	movw	r30, r22
    19c6:	9f 01       	movw	r18, r30
    19c8:	e8 94       	clt
    19ca:	42 30       	cpi	r20, 0x02	; 2
    19cc:	c4 f0       	brlt	.+48     	; 0x19fe <itoa+0x3a>
    19ce:	45 32       	cpi	r20, 0x25	; 37
    19d0:	b4 f4       	brge	.+44     	; 0x19fe <itoa+0x3a>
    19d2:	4a 30       	cpi	r20, 0x0A	; 10
    19d4:	29 f4       	brne	.+10     	; 0x19e0 <itoa+0x1c>
    19d6:	97 fb       	bst	r25, 7
    19d8:	1e f4       	brtc	.+6      	; 0x19e0 <itoa+0x1c>
    19da:	90 95       	com	r25
    19dc:	81 95       	neg	r24
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	64 2f       	mov	r22, r20
    19e2:	77 27       	eor	r23, r23
    19e4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__udivmodhi4>
    19e8:	80 5d       	subi	r24, 0xD0	; 208
    19ea:	8a 33       	cpi	r24, 0x3A	; 58
    19ec:	0c f0       	brlt	.+2      	; 0x19f0 <itoa+0x2c>
    19ee:	89 5d       	subi	r24, 0xD9	; 217
    19f0:	81 93       	st	Z+, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	a1 f7       	brne	.-24     	; 0x19e0 <itoa+0x1c>
    19f8:	16 f4       	brtc	.+4      	; 0x19fe <itoa+0x3a>
    19fa:	5d e2       	ldi	r21, 0x2D	; 45
    19fc:	51 93       	st	Z+, r21
    19fe:	10 82       	st	Z, r1
    1a00:	c9 01       	movw	r24, r18
    1a02:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <strrev>

00001a06 <strrev>:
    1a06:	dc 01       	movw	r26, r24
    1a08:	fc 01       	movw	r30, r24
    1a0a:	67 2f       	mov	r22, r23
    1a0c:	71 91       	ld	r23, Z+
    1a0e:	77 23       	and	r23, r23
    1a10:	e1 f7       	brne	.-8      	; 0x1a0a <strrev+0x4>
    1a12:	32 97       	sbiw	r30, 0x02	; 2
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <strrev+0x18>
    1a16:	7c 91       	ld	r23, X
    1a18:	6d 93       	st	X+, r22
    1a1a:	70 83       	st	Z, r23
    1a1c:	62 91       	ld	r22, -Z
    1a1e:	ae 17       	cp	r26, r30
    1a20:	bf 07       	cpc	r27, r31
    1a22:	c8 f3       	brcs	.-14     	; 0x1a16 <strrev+0x10>
    1a24:	08 95       	ret

00001a26 <__udivmodhi4>:
    1a26:	aa 1b       	sub	r26, r26
    1a28:	bb 1b       	sub	r27, r27
    1a2a:	51 e1       	ldi	r21, 0x11	; 17
    1a2c:	07 c0       	rjmp	.+14     	; 0x1a3c <__udivmodhi4_ep>

00001a2e <__udivmodhi4_loop>:
    1a2e:	aa 1f       	adc	r26, r26
    1a30:	bb 1f       	adc	r27, r27
    1a32:	a6 17       	cp	r26, r22
    1a34:	b7 07       	cpc	r27, r23
    1a36:	10 f0       	brcs	.+4      	; 0x1a3c <__udivmodhi4_ep>
    1a38:	a6 1b       	sub	r26, r22
    1a3a:	b7 0b       	sbc	r27, r23

00001a3c <__udivmodhi4_ep>:
    1a3c:	88 1f       	adc	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	5a 95       	dec	r21
    1a42:	a9 f7       	brne	.-22     	; 0x1a2e <__udivmodhi4_loop>
    1a44:	80 95       	com	r24
    1a46:	90 95       	com	r25
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	08 95       	ret

00001a4e <_exit>:
    1a4e:	f8 94       	cli

00001a50 <__stop_program>:
    1a50:	ff cf       	rjmp	.-2      	; 0x1a50 <__stop_program>
